{"ast":null,"code":"import { defineComponent, inject, computed, ref, onMounted, onBeforeUnmount } from 'vue';\nimport { addResizeListener, removeResizeListener } from '../../../utils/resize-event.mjs';\nimport { selectKey } from './token.mjs';\nvar script = defineComponent({\n  name: \"ElSelectDropdown\",\n  componentName: \"ElSelectDropdown\",\n  setup() {\n    const select = inject(selectKey);\n    const popperClass = computed(() => select.props.popperClass);\n    const isMultiple = computed(() => select.props.multiple);\n    const isFitInputWidth = computed(() => select.props.fitInputWidth);\n    const minWidth = ref(\"\");\n    function updateMinWidth() {\n      var _a;\n      minWidth.value = `${(_a = select.selectWrapper) == null ? void 0 : _a.getBoundingClientRect().width}px`;\n    }\n    onMounted(() => {\n      addResizeListener(select.selectWrapper, updateMinWidth);\n    });\n    onBeforeUnmount(() => {\n      removeResizeListener(select.selectWrapper, updateMinWidth);\n    });\n    return {\n      minWidth,\n      popperClass,\n      isMultiple,\n      isFitInputWidth\n    };\n  }\n});\nexport { script as default };","map":{"version":3,"names":["script","defineComponent","name","componentName","setup","select","inject","selectKey","popperClass","computed","props","isMultiple","multiple","isFitInputWidth","fitInputWidth","minWidth","ref","updateMinWidth","value","_a","selectWrapper","getBoundingClientRect","width","onMounted","addResizeListener","onBeforeUnmount","removeResizeListener"],"sources":["../../../../../../packages/components/select/src/select-dropdown.vue"],"sourcesContent":["<template>\n  <div\n    class=\"el-select-dropdown\"\n    :class=\"[{ 'is-multiple': isMultiple }, popperClass]\"\n    :style=\"{ [isFitInputWidth ? 'width' : 'minWidth']: minWidth }\"\n  >\n    <slot></slot>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  computed,\n  onMounted,\n  onBeforeUnmount,\n  inject,\n  ref,\n} from 'vue'\nimport {\n  addResizeListener,\n  removeResizeListener,\n} from '@element-plus/utils/resize-event'\nimport { selectKey } from './token'\nimport type { ResizableElement } from '@element-plus/utils/resize-event'\n\nexport default defineComponent({\n  name: 'ElSelectDropdown',\n\n  componentName: 'ElSelectDropdown',\n\n  setup() {\n    const select = inject(selectKey)\n\n    // computed\n    const popperClass = computed(() => select.props.popperClass)\n    const isMultiple = computed(() => select.props.multiple)\n    const isFitInputWidth = computed(() => select.props.fitInputWidth)\n    const minWidth = ref('')\n\n    function updateMinWidth() {\n      minWidth.value = `${\n        select.selectWrapper?.getBoundingClientRect().width\n      }px`\n    }\n\n    onMounted(() => {\n      // TODO: updatePopper\n      // popper.value.update()\n\n      addResizeListener(\n        select.selectWrapper as ResizableElement,\n        updateMinWidth\n      )\n    })\n\n    onBeforeUnmount(() => {\n      removeResizeListener(\n        select.selectWrapper as ResizableElement,\n        updateMinWidth\n      )\n    })\n\n    return {\n      minWidth,\n      popperClass,\n      isMultiple,\n      isFitInputWidth,\n    }\n  },\n})\n</script>\n"],"mappings":";;;AA0BA,IAAAA,MAAA,GAAeC,eAAA,CAAgB;EAC7BC,IAAA,EAAM;EAENC,aAAA,EAAe;EAEfC,MAAA,EAAQ;IACN,MAAMC,MAAA,GAASC,MAAA,CAAOC,SAAA;IAGtB,MAAMC,WAAA,GAAcC,QAAA,CAAS,MAAMJ,MAAA,CAAOK,KAAA,CAAMF,WAAA;IAChD,MAAMG,UAAA,GAAaF,QAAA,CAAS,MAAMJ,MAAA,CAAOK,KAAA,CAAME,QAAA;IAC/C,MAAMC,eAAA,GAAkBJ,QAAA,CAAS,MAAMJ,MAAA,CAAOK,KAAA,CAAMI,aAAA;IACpD,MAAMC,QAAA,GAAWC,GAAA,CAAI;IAErB,SAAAC,eAAA,EAA0B;;MACxBF,QAAA,CAASG,KAAA,GAAQ,GACf,CAAAC,EAAA,GAAAd,MAAA,CAAOe,aAAA,KAAP,gBAAAD,EAAA,CAAsBE,qBAAA,GAAwBC,KAAA;IAAA;IAIlDC,SAAA,CAAU,MAAM;MAIdC,iBAAA,CACEnB,MAAA,CAAOe,aAAA,EACPH,cAAA;IAAA;IAIJQ,eAAA,CAAgB,MAAM;MACpBC,oBAAA,CACErB,MAAA,CAAOe,aAAA,EACPH,cAAA;IAAA;IAIJ,OAAO;MACLF,QAAA;MACAP,WAAA;MACAG,UAAA;MACAE;IAAA;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}