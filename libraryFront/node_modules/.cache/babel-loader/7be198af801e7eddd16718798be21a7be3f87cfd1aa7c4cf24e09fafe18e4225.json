{"ast":null,"code":"import { getCurrentInstance, computed, watch, onMounted } from 'vue';\nimport { isFunction } from '@vue/shared';\nimport { isBool } from '../../utils/util.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../utils/constants.mjs';\nimport isServer from '../../utils/isServer.mjs';\nimport { buildProps, definePropType } from '../../utils/props.mjs';\nconst useModelToggleProps = buildProps({\n  modelValue: {\n    type: definePropType(Boolean),\n    default: null\n  },\n  \"onUpdate:modelValue\": Function\n});\nconst useModelToggleEmits = [UPDATE_MODEL_EVENT];\nconst useModelToggle = ({\n  indicator,\n  shouldHideWhenRouteChanges,\n  shouldProceed,\n  onShow,\n  onHide\n}) => {\n  const instance = getCurrentInstance();\n  const props = instance.props;\n  const {\n    emit\n  } = instance;\n  const hasUpdateHandler = computed(() => isFunction(props[\"onUpdate:modelValue\"]));\n  const isModelBindingAbsent = computed(() => props.modelValue === null);\n  const doShow = () => {\n    if (indicator.value === true) {\n      return;\n    }\n    indicator.value = true;\n    if (isFunction(onShow)) {\n      onShow();\n    }\n  };\n  const doHide = () => {\n    if (indicator.value === false) {\n      return;\n    }\n    indicator.value = false;\n    if (isFunction(onHide)) {\n      onHide();\n    }\n  };\n  const show = () => {\n    if (props.disabled === true || isFunction(shouldProceed) && !shouldProceed()) return;\n    const shouldEmit = hasUpdateHandler.value && !isServer;\n    if (shouldEmit) {\n      emit(UPDATE_MODEL_EVENT, true);\n    }\n    if (isModelBindingAbsent.value || !shouldEmit) {\n      doShow();\n    }\n  };\n  const hide = () => {\n    if (props.disabled === true || isServer) return;\n    const shouldEmit = hasUpdateHandler.value && !isServer;\n    if (shouldEmit) {\n      emit(UPDATE_MODEL_EVENT, false);\n    }\n    if (isModelBindingAbsent.value || !shouldEmit) {\n      doHide();\n    }\n  };\n  const onChange = val => {\n    if (!isBool(val)) return;\n    if (props.disabled && val) {\n      if (hasUpdateHandler.value) {\n        emit(UPDATE_MODEL_EVENT, false);\n      }\n    } else if (indicator.value !== val) {\n      if (val) {\n        doShow();\n      } else {\n        doHide();\n      }\n    }\n  };\n  const toggle = () => {\n    if (indicator.value) {\n      hide();\n    } else {\n      show();\n    }\n  };\n  watch(() => props.modelValue, onChange);\n  if (shouldHideWhenRouteChanges && instance.appContext.config.globalProperties.$route !== void 0) {\n    watch(() => ({\n      ...instance.proxy.$route\n    }), () => {\n      if (shouldHideWhenRouteChanges.value && indicator.value) {\n        hide();\n      }\n    });\n  }\n  onMounted(() => {\n    onChange(props.modelValue);\n  });\n  return {\n    hide,\n    show,\n    toggle\n  };\n};\nexport { useModelToggle, useModelToggleEmits, useModelToggleProps };","map":{"version":3,"names":["useModelToggleProps","buildProps","modelValue","type","definePropType","Boolean","default","Function","useModelToggleEmits","UPDATE_MODEL_EVENT","useModelToggle","indicator","shouldHideWhenRouteChanges","shouldProceed","onShow","onHide","instance","getCurrentInstance","props","emit","hasUpdateHandler","computed","isFunction","isModelBindingAbsent","doShow","value","doHide","show","disabled","shouldEmit","isServer","hide","onChange","val","isBool","toggle","watch","appContext","config","globalProperties","$route","proxy","onMounted"],"sources":["../../../../../packages/hooks/use-model-toggle/index.ts"],"sourcesContent":["import { computed, getCurrentInstance, watch, onMounted } from 'vue'\nimport { isFunction } from '@vue/shared'\nimport { isBool } from '@element-plus/utils/util'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/utils/constants'\nimport isServer from '@element-plus/utils/isServer'\nimport { buildProps, definePropType } from '@element-plus/utils/props'\nimport type { RouteLocationNormalizedLoaded } from 'vue-router'\n\nimport type { Ref, ComponentPublicInstance, ExtractPropTypes } from 'vue'\n\nexport const useModelToggleProps = buildProps({\n  modelValue: {\n    type: definePropType<boolean | null>(Boolean),\n    default: null,\n  },\n  'onUpdate:modelValue': Function,\n})\nexport type UseModelToggleProps = ExtractPropTypes<typeof useModelToggleProps>\n\nexport const useModelToggleEmits = [UPDATE_MODEL_EVENT]\n\nexport type ModelToggleParams = {\n  indicator: Ref<boolean>\n  shouldHideWhenRouteChanges?: Ref<boolean>\n  shouldProceed?: () => boolean\n  onShow?: () => void\n  onHide?: () => void\n}\n\nexport const useModelToggle = ({\n  indicator,\n  shouldHideWhenRouteChanges,\n  shouldProceed,\n  onShow,\n  onHide,\n}: ModelToggleParams) => {\n  const instance = getCurrentInstance()!\n  const props = instance.props as UseModelToggleProps & { disabled: boolean }\n  const { emit } = instance\n\n  const hasUpdateHandler = computed(() =>\n    isFunction(props['onUpdate:modelValue'])\n  )\n  // when it matches the default value we say this is absent\n  // though this could be mistakenly passed from the user but we need to rule out that\n  // condition\n  const isModelBindingAbsent = computed(() => props.modelValue === null)\n\n  const doShow = () => {\n    if (indicator.value === true) {\n      return\n    }\n\n    indicator.value = true\n    if (isFunction(onShow)) {\n      onShow()\n    }\n  }\n\n  const doHide = () => {\n    if (indicator.value === false) {\n      return\n    }\n\n    indicator.value = false\n\n    if (isFunction(onHide)) {\n      onHide()\n    }\n  }\n\n  const show = () => {\n    if (\n      props.disabled === true ||\n      (isFunction(shouldProceed) && !shouldProceed())\n    )\n      return\n\n    const shouldEmit = hasUpdateHandler.value && !isServer\n\n    if (shouldEmit) {\n      emit(UPDATE_MODEL_EVENT, true)\n    }\n\n    if (isModelBindingAbsent.value || !shouldEmit) {\n      doShow()\n    }\n  }\n\n  const hide = () => {\n    if (props.disabled === true || isServer) return\n\n    const shouldEmit = hasUpdateHandler.value && !isServer\n\n    if (shouldEmit) {\n      emit(UPDATE_MODEL_EVENT, false)\n    }\n\n    if (isModelBindingAbsent.value || !shouldEmit) {\n      doHide()\n    }\n  }\n\n  const onChange = (val: boolean) => {\n    if (!isBool(val)) return\n    if (props.disabled && val) {\n      if (hasUpdateHandler.value) {\n        emit(UPDATE_MODEL_EVENT, false)\n      }\n    } else if (indicator.value !== val) {\n      if (val) {\n        doShow()\n      } else {\n        doHide()\n      }\n    }\n  }\n\n  const toggle = () => {\n    if (indicator.value) {\n      hide()\n    } else {\n      show()\n    }\n  }\n\n  watch(() => props.modelValue, onChange as any)\n\n  if (\n    shouldHideWhenRouteChanges &&\n    instance.appContext.config.globalProperties.$route !== undefined\n  ) {\n    watch(\n      () => ({\n        ...(\n          instance.proxy as ComponentPublicInstance<{\n            $route: RouteLocationNormalizedLoaded\n          }>\n        ).$route,\n      }),\n      () => {\n        if (shouldHideWhenRouteChanges.value && indicator.value) {\n          hide()\n        }\n      }\n    )\n  }\n\n  onMounted(() => {\n    onChange(props.modelValue as boolean)\n  })\n\n  return {\n    hide,\n    show,\n    toggle,\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}