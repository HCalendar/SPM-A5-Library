{"ast":null,"code":"import { withDirectives, openBlock, createElementBlock, createElementVNode, toDisplayString, renderSlot, vShow } from 'vue';\nconst _hoisted_1 = {\n  class: \"el-select-group__wrap\"\n};\nconst _hoisted_2 = {\n  class: \"el-select-group__title\"\n};\nconst _hoisted_3 = {\n  class: \"el-select-group\"\n};\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return withDirectives((openBlock(), createElementBlock(\"ul\", _hoisted_1, [createElementVNode(\"li\", _hoisted_2, toDisplayString(_ctx.label), 1), createElementVNode(\"li\", null, [createElementVNode(\"ul\", _hoisted_3, [renderSlot(_ctx.$slots, \"default\")])])], 512)), [[vShow, _ctx.visible]]);\n}\nexport { render };","map":{"version":3,"names":["class","createElementBlock","_hoisted_1","createElementVNode","_hoisted_2","toDisplayString","_ctx","label","_hoisted_3","renderSlot","$slots","visible"],"sources":["../../../../../../packages/components/select/src/option-group.vue?vue&type=template&id=072bbb70&lang.js"],"sourcesContent":["<template>\n  <ul v-show=\"visible\" class=\"el-select-group__wrap\">\n    <li class=\"el-select-group__title\">{{ label }}</li>\n    <li>\n      <ul class=\"el-select-group\">\n        <slot></slot>\n      </ul>\n    </li>\n  </ul>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  provide,\n  inject,\n  ref,\n  reactive,\n  toRefs,\n  getCurrentInstance,\n  onMounted,\n  watch,\n  toRaw,\n} from 'vue'\nimport { selectGroupKey, selectKey } from './token'\n\nexport default defineComponent({\n  name: 'ElOptionGroup',\n  componentName: 'ElOptionGroup',\n\n  props: {\n    label: String,\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  setup(props) {\n    const visible = ref(true)\n    const instance = getCurrentInstance()\n    const children = ref([])\n\n    provide(\n      selectGroupKey,\n      reactive({\n        ...toRefs(props),\n      })\n    )\n\n    const select = inject(selectKey)\n\n    onMounted(() => {\n      children.value = flattedChildren(instance.subTree)\n    })\n\n    // get all instances of options\n    const flattedChildren = (node) => {\n      const children = []\n      if (Array.isArray(node.children)) {\n        node.children.forEach((child) => {\n          if (\n            child.type &&\n            child.type.name === 'ElOption' &&\n            child.component &&\n            child.component.proxy\n          ) {\n            children.push(child.component.proxy)\n          } else if (child.children?.length) {\n            children.push(...flattedChildren(child))\n          }\n        })\n      }\n      return children\n    }\n\n    const { groupQueryChange } = toRaw(select)\n    watch(groupQueryChange, () => {\n      visible.value = children.value.some((option) => option.visible === true)\n    })\n\n    return {\n      visible,\n    }\n  },\n})\n</script>\n"],"mappings":";;EACuBA,KAAA,EAAM;AAAA;;EACrBA,KAAA,EAAM;AAAA;;EAEJA,KAAA,EAAM;AAAA;;sCAHdC,kBAAA,OAAAC,UAAA,GACEC,kBAAA,OAAAC,UAAA,EAAAC,eAAA,CAAsCC,IAAA,CAAAC,KAAA,OACtCJ,kBAAA,cACEA,kBAAA,OAAAK,UAAA,GACEC,UAAA,CAAAH,IAAA,CAAAI,MAAA,a,sBAJMJ,IAAA,CAAAK,OAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}