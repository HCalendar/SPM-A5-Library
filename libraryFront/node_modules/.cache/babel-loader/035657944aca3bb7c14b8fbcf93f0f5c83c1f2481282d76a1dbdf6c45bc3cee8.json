{"ast":null,"code":"import { openBlock, createElementBlock, normalizeClass, Fragment, renderList, toDisplayString, createCommentVNode, createElementVNode, renderSlot } from 'vue';\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = [\"onClick\"];\nconst _hoisted_3 = {\n  class: \"el-calendar-day\"\n};\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"table\", {\n    class: normalizeClass({\n      \"el-calendar-table\": true,\n      \"is-range\": _ctx.isInRange\n    }),\n    cellspacing: \"0\",\n    cellpadding: \"0\"\n  }, [!_ctx.hideHeader ? (openBlock(), createElementBlock(\"thead\", _hoisted_1, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.weekDays, day => {\n    return openBlock(), createElementBlock(\"th\", {\n      key: day\n    }, toDisplayString(day), 1);\n  }), 128))])) : createCommentVNode(\"v-if\", true), createElementVNode(\"tbody\", null, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.rows, (row, index) => {\n    return openBlock(), createElementBlock(\"tr\", {\n      key: index,\n      class: normalizeClass({\n        \"el-calendar-table__row\": true,\n        \"el-calendar-table__row--hide-border\": index === 0 && _ctx.hideHeader\n      })\n    }, [(openBlock(true), createElementBlock(Fragment, null, renderList(row, (cell, key) => {\n      return openBlock(), createElementBlock(\"td\", {\n        key,\n        class: normalizeClass(_ctx.getCellClass(cell)),\n        onClick: $event => _ctx.handlePickDay(cell)\n      }, [createElementVNode(\"div\", _hoisted_3, [renderSlot(_ctx.$slots, \"dateCell\", {\n        data: _ctx.getSlotData(cell)\n      }, () => [createElementVNode(\"span\", null, toDisplayString(cell.text), 1)])])], 10, _hoisted_2);\n    }), 128))], 2);\n  }), 128))])], 2);\n}\nexport { render };","map":{"version":3,"names":["class","createElementBlock","normalizeClass","cellspacing","cellpadding","_ctx","hideHeader","openBlock","_hoisted_1","Fragment","renderList","weekDays","day","key","toDisplayString","createElementVNode","rows","row","index","cell","getCellClass","onClick","$event","handlePickDay","_hoisted_3","renderSlot","$slots","data","getSlotData","text"],"sources":["../../../../../../packages/components/calendar/src/date-table.vue?vue&type=template&id=297fdb36&lang.js"],"sourcesContent":["<template>\n  <table\n    :class=\"{\n      'el-calendar-table': true,\n      'is-range': isInRange,\n    }\"\n    cellspacing=\"0\"\n    cellpadding=\"0\"\n  >\n    <thead v-if=\"!hideHeader\">\n      <th v-for=\"day in weekDays\" :key=\"day\">{{ day }}</th>\n    </thead>\n\n    <tbody>\n      <tr\n        v-for=\"(row, index) in rows\"\n        :key=\"index\"\n        :class=\"{\n          'el-calendar-table__row': true,\n          'el-calendar-table__row--hide-border': index === 0 && hideHeader,\n        }\"\n      >\n        <td\n          v-for=\"(cell, key) in row\"\n          :key=\"key\"\n          :class=\"getCellClass(cell)\"\n          @click=\"handlePickDay(cell)\"\n        >\n          <div class=\"el-calendar-day\">\n            <slot name=\"dateCell\" :data=\"getSlotData(cell)\">\n              <span>{{ cell.text }}</span>\n            </slot>\n          </div>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent } from 'vue'\nimport dayjs from 'dayjs'\nimport localeData from 'dayjs/plugin/localeData'\nimport { useLocale } from '@element-plus/hooks'\nimport { rangeArr } from '@element-plus/components/time-picker'\nimport { dateTableProps, dateTableEmits } from './date-table'\nimport type { Dayjs } from 'dayjs'\ndayjs.extend(localeData)\n\ntype CellType = 'next' | 'prev' | 'current'\ninterface Cell {\n  text: number\n  type: CellType\n}\n\nconst WEEK_DAYS = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'] as const\n\nexport const getPrevMonthLastDays = (date: Dayjs, count: number) => {\n  const lastDay = date.subtract(1, 'month').endOf('month').date()\n  return rangeArr(count).map((_, index) => lastDay - (count - index - 1))\n}\n\nexport const getMonthDays = (date: Dayjs) => {\n  const days = date.daysInMonth()\n  return rangeArr(days).map((_, index) => index + 1)\n}\n\nconst toNestedArr = (days: Cell[]) =>\n  rangeArr(days.length / 7).map((index) => {\n    const start = index * 7\n    return days.slice(start, start + 7)\n  })\n\nexport default defineComponent({\n  props: dateTableProps,\n  emits: dateTableEmits,\n\n  setup(props, { emit }) {\n    const { t, lang } = useLocale()\n\n    const now = dayjs().locale(lang.value)\n    // todo better way to get Day.js locale object\n    const firstDayOfWeek: number = (now as any).$locale().weekStart || 0\n\n    const isInRange = computed(() => !!props.range && !!props.range.length)\n\n    const rows = computed(() => {\n      let days: Cell[] = []\n      if (isInRange.value) {\n        const [start, end] = props.range!\n        const currentMonthRange: Cell[] = rangeArr(\n          end.date() - start.date() + 1\n        ).map((index) => ({\n          text: start.date() + index,\n          type: 'current',\n        }))\n\n        let remaining = currentMonthRange.length % 7\n        remaining = remaining === 0 ? 0 : 7 - remaining\n        const nextMonthRange: Cell[] = rangeArr(remaining).map((_, index) => ({\n          text: index + 1,\n          type: 'next',\n        }))\n        days = currentMonthRange.concat(nextMonthRange)\n      } else {\n        const firstDay = props.date.startOf('month').day() || 7\n        const prevMonthDays: Cell[] = getPrevMonthLastDays(\n          props.date,\n          firstDay - firstDayOfWeek\n        ).map((day) => ({\n          text: day,\n          type: 'prev',\n        }))\n        const currentMonthDays: Cell[] = getMonthDays(props.date).map(\n          (day) => ({\n            text: day,\n            type: 'current',\n          })\n        )\n        days = [...prevMonthDays, ...currentMonthDays]\n        const nextMonthDays: Cell[] = rangeArr(42 - days.length).map(\n          (_, index) => ({\n            text: index + 1,\n            type: 'next',\n          })\n        )\n        days = days.concat(nextMonthDays)\n      }\n      return toNestedArr(days)\n    })\n\n    const weekDays = computed(() => {\n      const start = firstDayOfWeek\n      if (start === 0) {\n        return WEEK_DAYS.map((_) => t(`el.datepicker.weeks.${_}`))\n      } else {\n        return WEEK_DAYS.slice(start)\n          .concat(WEEK_DAYS.slice(0, start))\n          .map((_) => t(`el.datepicker.weeks.${_}`))\n      }\n    })\n\n    const getFormattedDate = (day: number, type: CellType): Dayjs => {\n      switch (type) {\n        case 'prev':\n          return props.date.startOf('month').subtract(1, 'month').date(day)\n        case 'next':\n          return props.date.startOf('month').add(1, 'month').date(day)\n        case 'current':\n          return props.date.date(day)\n      }\n    }\n\n    const getCellClass = ({ text, type }: Cell) => {\n      const classes: string[] = [type]\n      if (type === 'current') {\n        const date = getFormattedDate(text, type)\n        if (date.isSame(props.selectedDay, 'day')) {\n          classes.push('is-selected')\n        }\n        if (date.isSame(now, 'day')) {\n          classes.push('is-today')\n        }\n      }\n      return classes\n    }\n\n    const handlePickDay = ({ text, type }: Cell) => {\n      const date = getFormattedDate(text, type)\n      emit('pick', date)\n    }\n\n    const getSlotData = ({ text, type }: Cell) => {\n      const day = getFormattedDate(text, type)\n      return {\n        isSelected: day.isSame(props.selectedDay),\n        type: `${type}-month`,\n        day: day.format('YYYY-MM-DD'),\n        date: day.toDate(),\n      }\n    }\n\n    return {\n      isInRange,\n      weekDays,\n      rows,\n      getCellClass,\n      handlePickDay,\n      getSlotData,\n    }\n  },\n})\n</script>\n"],"mappings":";;;;;;EA4BeA,KAAA,EAAM;AAAA;;sBA3BnBC,kBAAA;IACGD,KAAA,EAAAE,cAAA;;;;IAIDC,WAAA,EAAY;IACZC,WAAA,EAAY;EAAA,I,CAEEC,IAAA,CAAAC,UAAA,IAAAC,SAAA,IAAdN,kBAAA,UAAAO,UAAA,I,iBACEP,kBAAA,CAAAQ,QAAA,QAAAC,UAAA,CAAkBL,IAAA,CAAAM,QAAA,EAAPC,GAAA;wBAAXX,kBAAA;MAA6BY,GAAA,EAAKD;IAAA,GAAAE,eAAA,CAAQF,GAAA;mDAG5CG,kBAAA,kB,iBACEd,kBAAA,CAAAQ,QAAA,QAAAC,UAAA,CACyBL,IAAA,CAAAW,IAAA,GAAfC,GAAA,EAAKC,KAAA;wBADfjB,kBAAA;MAEGY,GAAA,EAAKK,KAAA;MACLlB,KAAA,EAAAE,cAAA;;;;0BAKDD,kBAAA,CAAAQ,QAAA,QAAAC,UAAA,CACwBO,GAAA,GAAdE,IAAA,EAAMN,GAAA;0BADhBZ,kBAAA;QAEGY,GAAA;QACAb,KAAA,EAAAE,cAAA,CAAOG,IAAA,CAAAe,YAAA,CAAaD,IAAA;QACpBE,OAAA,EAAAC,MAAA,IAAOjB,IAAA,CAAAkB,aAAA,CAAcJ,IAAA;MAAA,IAEtBJ,kBAAA,QAAAS,UAAA,GACEC,UAAA,CAAApB,IAAA,CAAAqB,MAAA;QAAuBC,IAAA,EAAMtB,IAAA,CAAAuB,WAAA,CAAYT,IAAA;MAAA,GAAzC,OACEJ,kBAAA,eAAAD,eAAA,CAASK,IAAA,CAAKU,IAAA,M","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}