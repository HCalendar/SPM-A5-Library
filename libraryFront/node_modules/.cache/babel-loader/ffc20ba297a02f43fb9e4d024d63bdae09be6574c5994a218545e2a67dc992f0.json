{"ast":null,"code":"import { resolveComponent, openBlock, createElementBlock, mergeProps, Fragment, renderList, renderSlot, createVNode, createBlock, normalizeClass, createCommentVNode, normalizeProps } from 'vue';\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_skeleton_item = resolveComponent(\"el-skeleton-item\");\n  return _ctx.uiLoading ? (openBlock(), createElementBlock(\"div\", mergeProps({\n    key: 0,\n    class: [\"el-skeleton\", _ctx.animated ? \"is-animated\" : \"\"]\n  }, _ctx.$attrs), [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.count, i => {\n    return openBlock(), createElementBlock(Fragment, {\n      key: i\n    }, [_ctx.loading ? renderSlot(_ctx.$slots, \"template\", {\n      key: i\n    }, () => [createVNode(_component_el_skeleton_item, {\n      class: \"is-first\",\n      variant: \"p\"\n    }), (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.rows, item => {\n      return openBlock(), createBlock(_component_el_skeleton_item, {\n        key: item,\n        class: normalizeClass({\n          \"el-skeleton__paragraph\": true,\n          \"is-last\": item === _ctx.rows && _ctx.rows > 1\n        }),\n        variant: \"p\"\n      }, null, 8, [\"class\"]);\n    }), 128))]) : createCommentVNode(\"v-if\", true)], 64);\n  }), 128))], 16)) : renderSlot(_ctx.$slots, \"default\", normalizeProps(mergeProps({\n    key: 1\n  }, _ctx.$attrs)));\n}\nexport { render };","map":{"version":3,"names":["_ctx","uiLoading","openBlock","createElementBlock","mergeProps","class","animated","$attrs","Fragment","renderList","count","i","loading","renderSlot","$slots","key","createVNode","_component_el_skeleton_item","variant","rows","item","createBlock","normalizeClass","normalizeProps"],"sources":["../../../../../../packages/components/skeleton/src/skeleton.vue?vue&type=template&id=26fa9225&lang.js"],"sourcesContent":["<template>\n  <template v-if=\"uiLoading\">\n    <div\n      :class=\"['el-skeleton', animated ? 'is-animated' : '']\"\n      v-bind=\"$attrs\"\n    >\n      <template v-for=\"i in count\" :key=\"i\">\n        <slot v-if=\"loading\" :key=\"i\" name=\"template\">\n          <el-skeleton-item class=\"is-first\" variant=\"p\" />\n          <el-skeleton-item\n            v-for=\"item in rows\"\n            :key=\"item\"\n            :class=\"{\n              'el-skeleton__paragraph': true,\n              'is-last': item === rows && rows > 1,\n            }\"\n            variant=\"p\"\n          />\n        </slot>\n      </template>\n    </div>\n  </template>\n  <template v-else>\n    <slot v-bind=\"$attrs\"></slot>\n  </template>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed } from 'vue'\nimport { useThrottleRender } from '@element-plus/hooks'\nimport SkeletonItem from './skeleton-item.vue'\nimport { skeletonProps } from './skeleton'\n\nexport default defineComponent({\n  name: 'ElSkeleton',\n  components: {\n    [SkeletonItem.name]: SkeletonItem,\n  },\n  props: skeletonProps,\n  setup(props) {\n    const innerLoading = computed(() => {\n      return props.loading\n    })\n\n    const uiLoading = useThrottleRender(innerLoading, props.throttle)\n\n    return {\n      uiLoading,\n    }\n  },\n})\n</script>\n"],"mappings":";;;SACkBA,IAAA,CAAAC,SAAA,IAAAC,SAAA,IACdC,kBAAA,QAAAC,UAAA;;IACGC,KAAA,kBAAuBL,IAAA,CAAAM,QAAA;KAChBN,IAAA,CAAAO,MAAA,K,iBAERJ,kBAAA,CAAAK,QAAA,QAAAC,UAAA,CAAsBT,IAAA,CAAAU,KAAA,EAALC,CAAA;;WAAkBA;IAAA,IACrBX,IAAA,CAAAY,OAAA,GAAZC,UAAA,CAAAb,IAAA,CAAAc,MAAA;MAAsBC,GAAA,EAAKJ;IAAA,GAA3B,OACEK,WAAA,CAAAC,2BAAA;MAAkBZ,KAAA,EAAM;MAAWa,OAAA,EAAQ;IAAA,KAAAhB,SAAA,QAC3CC,kBAAA,CAAAK,QAAA,QAAAC,UAAA,CACiBT,IAAA,CAAAmB,IAAA,EAARC,IAAA;0BADTC,WAAA,CAAAJ,2BAAA;QAEGF,GAAA,EAAKK,IAAA;QACLf,KAAA,EAAAiB,cAAA;;;;QAIDJ,OAAA,EAAQ;MAAA;;qBAOhBL,UAAA,CAAAb,IAAA,CAAAc,MAAA,aAAAS,cAAA,CAAAnB,UAAA;IAAAW,GAAA;EAAA,GAAcf,IAAA,CAAAO,MAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}