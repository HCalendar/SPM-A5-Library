{"ast":null,"code":"import { resolveComponent, openBlock, createBlock, withCtx, createElementBlock, Fragment, renderList, toDisplayString, createCommentVNode } from 'vue';\nconst _hoisted_1 = {\n  key: 0,\n  class: \"el-cascader-menu__empty-text\"\n};\nconst _hoisted_2 = {\n  key: 1,\n  ref: \"hoverZone\",\n  class: \"el-cascader-menu__hover-zone\"\n};\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_cascader_node = resolveComponent(\"el-cascader-node\");\n  const _component_el_scrollbar = resolveComponent(\"el-scrollbar\");\n  return openBlock(), createBlock(_component_el_scrollbar, {\n    key: _ctx.menuId,\n    tag: \"ul\",\n    role: \"menu\",\n    class: \"el-cascader-menu\",\n    \"wrap-class\": \"el-cascader-menu__wrap\",\n    \"view-class\": [\"el-cascader-menu__list\", _ctx.isEmpty && \"is-empty\"],\n    onMousemove: _ctx.handleMouseMove,\n    onMouseleave: _ctx.clearHoverZone\n  }, {\n    default: withCtx(() => {\n      var _a;\n      return [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.nodes, node => {\n        return openBlock(), createBlock(_component_el_cascader_node, {\n          key: node.uid,\n          node,\n          \"menu-id\": _ctx.menuId,\n          onExpand: _ctx.handleExpand\n        }, null, 8, [\"node\", \"menu-id\", \"onExpand\"]);\n      }), 128)), _ctx.isEmpty ? (openBlock(), createElementBlock(\"div\", _hoisted_1, toDisplayString(_ctx.t(\"el.cascader.noData\")), 1)) : ((_a = _ctx.panel) == null ? void 0 : _a.isHoverMenu) ? (openBlock(), createElementBlock(\"svg\", _hoisted_2, null, 512)) : createCommentVNode(\"v-if\", true)];\n    }),\n    _: 1\n  }, 8, [\"view-class\", \"onMousemove\", \"onMouseleave\"]);\n}\nexport { render };","map":{"version":3,"names":["class","ref","createBlock","_component_el_scrollbar","key","_ctx","menuId","tag","role","isEmpty","onMousemove","handleMouseMove","onMouseleave","clearHoverZone","createElementBlock","Fragment","renderList","nodes","node","_component_el_cascader_node","uid","onExpand","handleExpand","openBlock","_hoisted_1","toDisplayString","t","_a","panel","isHoverMenu","_hoisted_2","createCommentVNode"],"sources":["../../../../../../packages/components/cascader-panel/src/menu.vue?vue&type=template&id=9c79e4e2&lang.js"],"sourcesContent":["<template>\n  <el-scrollbar\n    :key=\"menuId\"\n    tag=\"ul\"\n    role=\"menu\"\n    class=\"el-cascader-menu\"\n    wrap-class=\"el-cascader-menu__wrap\"\n    :view-class=\"['el-cascader-menu__list', isEmpty && 'is-empty']\"\n    @mousemove=\"handleMouseMove\"\n    @mouseleave=\"clearHoverZone\"\n  >\n    <el-cascader-node\n      v-for=\"node in nodes\"\n      :key=\"node.uid\"\n      :node=\"node\"\n      :menu-id=\"menuId\"\n      @expand=\"handleExpand\"\n    />\n    <div v-if=\"isEmpty\" class=\"el-cascader-menu__empty-text\">\n      {{ t('el.cascader.noData') }}\n    </div>\n    <svg\n      v-else-if=\"panel?.isHoverMenu\"\n      ref=\"hoverZone\"\n      class=\"el-cascader-menu__hover-zone\"\n    ></svg>\n  </el-scrollbar>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, getCurrentInstance, inject, ref } from 'vue'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport { useLocale } from '@element-plus/hooks'\nimport { generateId } from '@element-plus/utils/util'\nimport ElCascaderNode from './node.vue'\nimport { CASCADER_PANEL_INJECTION_KEY } from './types'\nimport type { default as CascaderNode } from './node'\n\nimport type { PropType } from 'vue'\nimport type { TimeoutHandle, Nullable } from '@element-plus/utils/types'\n\nexport default defineComponent({\n  name: 'ElCascaderMenu',\n\n  components: {\n    ElScrollbar,\n    ElCascaderNode,\n  },\n\n  props: {\n    nodes: {\n      type: Array as PropType<CascaderNode[]>,\n      required: true,\n    },\n    index: {\n      type: Number,\n      required: true,\n    },\n  },\n\n  setup(props) {\n    const instance = getCurrentInstance()!\n    const { t } = useLocale()\n    const id = generateId()\n    let activeNode: Nullable<HTMLElement> = null\n    let hoverTimer: Nullable<TimeoutHandle> = null\n\n    const panel = inject(CASCADER_PANEL_INJECTION_KEY)!\n\n    const hoverZone = ref<null | SVGSVGElement>(null)\n\n    const isEmpty = computed(() => !props.nodes.length)\n    const menuId = computed(() => `cascader-menu-${id}-${props.index}`)\n\n    const handleExpand = (e: MouseEvent) => {\n      activeNode = e.target as HTMLElement\n    }\n\n    const handleMouseMove = (e: MouseEvent) => {\n      if (!panel.isHoverMenu || !activeNode || !hoverZone.value) return\n\n      if (activeNode.contains(e.target as HTMLElement)) {\n        clearHoverTimer()\n\n        const el = instance.vnode.el as HTMLElement\n        const { left } = el.getBoundingClientRect()\n        const { offsetWidth, offsetHeight } = el\n        const startX = e.clientX - left\n        const top = activeNode.offsetTop\n        const bottom = top + activeNode.offsetHeight\n\n        hoverZone.value.innerHTML = `\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${top} L${offsetWidth} 0 V${top} Z\" />\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${bottom} L${offsetWidth} ${offsetHeight} V${bottom} Z\" />\n        `\n      } else if (!hoverTimer) {\n        hoverTimer = window.setTimeout(\n          clearHoverZone,\n          panel.config.hoverThreshold\n        )\n      }\n    }\n\n    const clearHoverTimer = () => {\n      if (!hoverTimer) return\n      clearTimeout(hoverTimer)\n      hoverTimer = null\n    }\n\n    const clearHoverZone = () => {\n      if (!hoverZone.value) return\n      hoverZone.value.innerHTML = ''\n      clearHoverTimer()\n    }\n\n    return {\n      panel,\n      hoverZone,\n      isEmpty,\n      menuId,\n      t,\n      handleExpand,\n      handleMouseMove,\n      clearHoverZone,\n    }\n  },\n})\n</script>\n"],"mappings":";;;EAkBwBA,KAAA,EAAM;AAAA;;;EAKxBC,GAAA,EAAI;EACJD,KAAA,EAAM;AAAA;;;;sBAvBVE,WAAA,CAAAC,uBAAA;IACGC,GAAA,EAAKC,IAAA,CAAAC,MAAA;IACNC,GAAA,EAAI;IACJC,IAAA,EAAK;IACLR,KAAA,EAAM;IACN,cAAW;IACV,yCAAuCK,IAAA,CAAAI,OAAA;IACvCC,WAAA,EAAWL,IAAA,CAAAM,eAAA;IACXC,YAAA,EAAYP,IAAA,CAAAQ;;qBAGX;;gCADFC,kBAAA,CAAAC,QAAA,QAAAC,UAAA,CACiBX,IAAA,CAAAY,KAAA,EAARC,IAAA;4BADThB,WAAA,CAAAiB,2BAAA;UAEGf,GAAA,EAAKc,IAAA,CAAKE,GAAA;UACVF,IAAA;UACA,WAASb,IAAA,CAAAC,MAAA;UACTe,QAAA,EAAQhB,IAAA,CAAAiB;;iBAEAjB,IAAA,CAAAI,OAAA,IAAAc,SAAA,IAAXT,kBAAA,QAAAU,UAAA,EAAAC,eAAA,CACKpB,IAAA,CAAAqB,CAAA,+BAGQ,EAAAC,EAAA,GAAAtB,IAAA,CAAAuB,KAAA,qBAAAD,EAAA,CAAOE,WAAA,KAAAN,SAAA,IADpBT,kBAAA,QAAAgB,UAAA,gBAAAC,kBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}