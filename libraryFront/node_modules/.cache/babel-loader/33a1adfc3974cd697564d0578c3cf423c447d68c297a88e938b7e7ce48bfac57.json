{"ast":null,"code":"import { ref, computed, watch, nextTick, onMounted } from 'vue';\nimport { useTimeoutFn } from '@vueuse/core';\nimport '../../../hooks/index.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../utils/constants.mjs';\nimport isServer from '../../../utils/isServer.mjs';\nimport PopupManager from '../../../utils/popup-manager.mjs';\nimport { isNumber } from '../../../utils/util.mjs';\nimport { useLockscreen } from '../../../hooks/use-lockscreen/index.mjs';\nimport { useModal } from '../../../hooks/use-modal/index.mjs';\nimport { useRestoreActive } from '../../../hooks/use-restore-active/index.mjs';\nconst useDialog = (props, {\n  emit\n}, targetRef) => {\n  const visible = ref(false);\n  const closed = ref(false);\n  const rendered = ref(false);\n  const zIndex = ref(props.zIndex || PopupManager.nextZIndex());\n  let openTimer = void 0;\n  let closeTimer = void 0;\n  const normalizeWidth = computed(() => isNumber(props.width) ? `${props.width}px` : props.width);\n  const style = computed(() => {\n    const style2 = {};\n    const varPrefix = `--el-dialog`;\n    if (!props.fullscreen) {\n      if (props.top) {\n        style2[`${varPrefix}-margin-top`] = props.top;\n      }\n      if (props.width) {\n        style2[`${varPrefix}-width`] = normalizeWidth.value;\n      }\n    }\n    return style2;\n  });\n  function afterEnter() {\n    emit(\"opened\");\n  }\n  function afterLeave() {\n    emit(\"closed\");\n    emit(UPDATE_MODEL_EVENT, false);\n    if (props.destroyOnClose) {\n      rendered.value = false;\n    }\n  }\n  function beforeLeave() {\n    emit(\"close\");\n  }\n  function open() {\n    closeTimer == null ? void 0 : closeTimer();\n    openTimer == null ? void 0 : openTimer();\n    if (props.openDelay && props.openDelay > 0) {\n      ;\n      ({\n        stop: openTimer\n      } = useTimeoutFn(() => doOpen(), props.openDelay));\n    } else {\n      doOpen();\n    }\n  }\n  function close() {\n    openTimer == null ? void 0 : openTimer();\n    closeTimer == null ? void 0 : closeTimer();\n    if (props.closeDelay && props.closeDelay > 0) {\n      ;\n      ({\n        stop: closeTimer\n      } = useTimeoutFn(() => doClose(), props.closeDelay));\n    } else {\n      doClose();\n    }\n  }\n  function hide(shouldCancel) {\n    if (shouldCancel) return;\n    closed.value = true;\n    visible.value = false;\n  }\n  function handleClose() {\n    if (props.beforeClose) {\n      props.beforeClose(hide);\n    } else {\n      close();\n    }\n  }\n  function onModalClick() {\n    if (props.closeOnClickModal) {\n      handleClose();\n    }\n  }\n  function doOpen() {\n    if (isServer) {\n      return;\n    }\n    visible.value = true;\n  }\n  function doClose() {\n    visible.value = false;\n  }\n  if (props.lockScroll) {\n    useLockscreen(visible);\n  }\n  if (props.closeOnPressEscape) {\n    useModal({\n      handleClose\n    }, visible);\n  }\n  useRestoreActive(visible);\n  watch(() => props.modelValue, val => {\n    if (val) {\n      closed.value = false;\n      open();\n      rendered.value = true;\n      emit(\"open\");\n      zIndex.value = props.zIndex ? zIndex.value++ : PopupManager.nextZIndex();\n      nextTick(() => {\n        if (targetRef.value) {\n          targetRef.value.scrollTop = 0;\n        }\n      });\n    } else {\n      if (visible.value) {\n        close();\n      }\n    }\n  });\n  onMounted(() => {\n    if (props.modelValue) {\n      visible.value = true;\n      rendered.value = true;\n      open();\n    }\n  });\n  return {\n    afterEnter,\n    afterLeave,\n    beforeLeave,\n    handleClose,\n    onModalClick,\n    close,\n    doClose,\n    closed,\n    style,\n    rendered,\n    visible,\n    zIndex\n  };\n};\nexport { useDialog };","map":{"version":3,"names":["useDialog","props","emit","targetRef","visible","ref","closed","rendered","zIndex","PopupManager","nextZIndex","openTimer","closeTimer","normalizeWidth","computed","isNumber","width","style","style2","varPrefix","fullscreen","top","value","afterEnter","afterLeave","UPDATE_MODEL_EVENT","destroyOnClose","beforeLeave","open","openDelay","stop","useTimeoutFn","doOpen","close","closeDelay","doClose","hide","shouldCancel","handleClose","beforeClose","onModalClick","closeOnClickModal","isServer","lockScroll","useLockscreen","closeOnPressEscape","useModal","useRestoreActive","watch","modelValue","val","nextTick","scrollTop","onMounted"],"sources":["../../../../../../packages/components/dialog/src/use-dialog.ts"],"sourcesContent":["import { computed, ref, watch, nextTick, onMounted } from 'vue'\nimport { useTimeoutFn } from '@vueuse/core'\n\nimport { useLockscreen, useRestoreActive, useModal } from '@element-plus/hooks'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/utils/constants'\nimport isServer from '@element-plus/utils/isServer'\nimport PopupManager from '@element-plus/utils/popup-manager'\nimport { isNumber } from '@element-plus/utils/util'\n\nimport type { CSSProperties, Ref, SetupContext } from 'vue'\nimport type { DialogEmits, DialogProps } from './dialog'\n\nexport const useDialog = (\n  props: DialogProps,\n  { emit }: SetupContext<DialogEmits>,\n  targetRef: Ref<HTMLElement | undefined>\n) => {\n  const visible = ref(false)\n  const closed = ref(false)\n  const rendered = ref(false) // when desctroyOnClose is true, we initialize it as false vise versa\n  const zIndex = ref(props.zIndex || PopupManager.nextZIndex())\n\n  let openTimer: (() => void) | undefined = undefined\n  let closeTimer: (() => void) | undefined = undefined\n\n  const normalizeWidth = computed(() =>\n    isNumber(props.width) ? `${props.width}px` : props.width\n  )\n\n  const style = computed<CSSProperties>(() => {\n    const style: CSSProperties = {}\n    const varPrefix = `--el-dialog`\n    if (!props.fullscreen) {\n      if (props.top) {\n        style[`${varPrefix}-margin-top`] = props.top\n      }\n      if (props.width) {\n        style[`${varPrefix}-width`] = normalizeWidth.value\n      }\n    }\n    return style\n  })\n\n  function afterEnter() {\n    emit('opened')\n  }\n\n  function afterLeave() {\n    emit('closed')\n    emit(UPDATE_MODEL_EVENT, false)\n    if (props.destroyOnClose) {\n      rendered.value = false\n    }\n  }\n\n  function beforeLeave() {\n    emit('close')\n  }\n\n  function open() {\n    closeTimer?.()\n    openTimer?.()\n\n    if (props.openDelay && props.openDelay > 0) {\n      ;({ stop: openTimer } = useTimeoutFn(() => doOpen(), props.openDelay))\n    } else {\n      doOpen()\n    }\n  }\n\n  function close() {\n    // if (this.willClose && !this.willClose()) return;\n    openTimer?.()\n    closeTimer?.()\n\n    if (props.closeDelay && props.closeDelay > 0) {\n      ;({ stop: closeTimer } = useTimeoutFn(() => doClose(), props.closeDelay))\n    } else {\n      doClose()\n    }\n  }\n\n  function hide(shouldCancel: boolean) {\n    if (shouldCancel) return\n    closed.value = true\n    visible.value = false\n  }\n\n  function handleClose() {\n    if (props.beforeClose) {\n      props.beforeClose(hide)\n    } else {\n      close()\n    }\n  }\n\n  function onModalClick() {\n    if (props.closeOnClickModal) {\n      handleClose()\n    }\n  }\n\n  function doOpen() {\n    if (isServer) {\n      return\n    }\n\n    // if (props.willOpen?.()) {\n    //  return\n    // }\n    visible.value = true\n  }\n\n  function doClose() {\n    visible.value = false\n  }\n\n  if (props.lockScroll) {\n    useLockscreen(visible)\n  }\n\n  if (props.closeOnPressEscape) {\n    useModal(\n      {\n        handleClose,\n      },\n      visible\n    )\n  }\n\n  useRestoreActive(visible)\n\n  watch(\n    () => props.modelValue,\n    (val) => {\n      if (val) {\n        closed.value = false\n        open()\n        rendered.value = true // enables lazy rendering\n        emit('open')\n        zIndex.value = props.zIndex ? zIndex.value++ : PopupManager.nextZIndex()\n        // this.$el.addEventListener('scroll', this.updatePopper)\n        nextTick(() => {\n          if (targetRef.value) {\n            targetRef.value.scrollTop = 0\n          }\n        })\n      } else {\n        // this.$el.removeEventListener('scroll', this.updatePopper\n        if (visible.value) {\n          close()\n        }\n      }\n    }\n  )\n\n  onMounted(() => {\n    if (props.modelValue) {\n      visible.value = true\n      rendered.value = true // enables lazy rendering\n      open()\n    }\n  })\n\n  return {\n    afterEnter,\n    afterLeave,\n    beforeLeave,\n    handleClose,\n    onModalClick,\n    close,\n    doClose,\n    closed,\n    style,\n    rendered,\n    visible,\n    zIndex,\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}