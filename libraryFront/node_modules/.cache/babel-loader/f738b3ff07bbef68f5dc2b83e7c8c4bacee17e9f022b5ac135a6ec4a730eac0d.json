{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent, provide } from 'vue';\nimport { isValidComponentSize } from '../../../utils/validators.mjs';\nimport '../../../hooks/index.mjs';\nimport './descriptions-row.mjs';\nimport { elDescriptionsKey } from './token.mjs';\nimport script$1 from './descriptions-row.vue_vue_type_script_lang.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nvar script = defineComponent({\n  name: \"ElDescriptions\",\n  components: {\n    [script$1.name]: script$1\n  },\n  props: {\n    border: {\n      type: Boolean,\n      default: false\n    },\n    column: {\n      type: Number,\n      default: 3\n    },\n    direction: {\n      type: String,\n      default: \"horizontal\"\n    },\n    size: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    title: {\n      type: String,\n      default: \"\"\n    },\n    extra: {\n      type: String,\n      default: \"\"\n    }\n  },\n  setup(props, {\n    slots\n  }) {\n    provide(elDescriptionsKey, props);\n    const descriptionsSize = useSize();\n    const flattedChildren = children => {\n      const temp = Array.isArray(children) ? children : [children];\n      const res = [];\n      temp.forEach(child => {\n        if (Array.isArray(child.children)) {\n          res.push(...flattedChildren(child.children));\n        } else {\n          res.push(child);\n        }\n      });\n      return res;\n    };\n    const filledNode = (node, span, count, isLast = false) => {\n      if (!node.props) {\n        node.props = {};\n      }\n      if (span > count) {\n        node.props.span = count;\n      }\n      if (isLast) {\n        node.props.span = span;\n      }\n      return node;\n    };\n    const getRows = () => {\n      var _a;\n      const children = flattedChildren((_a = slots.default) == null ? void 0 : _a.call(slots)).filter(node => {\n        var _a2;\n        return ((_a2 = node == null ? void 0 : node.type) == null ? void 0 : _a2.name) === \"ElDescriptionsItem\";\n      });\n      const rows = [];\n      let temp = [];\n      let count = props.column;\n      let totalSpan = 0;\n      children.forEach((node, index) => {\n        var _a2;\n        const span = ((_a2 = node.props) == null ? void 0 : _a2.span) || 1;\n        if (index < children.length - 1) {\n          totalSpan += span > count ? count : span;\n        }\n        if (index === children.length - 1) {\n          const lastSpan = props.column - totalSpan % props.column;\n          temp.push(filledNode(node, lastSpan, count, true));\n          rows.push(temp);\n          return;\n        }\n        if (span < count) {\n          count -= span;\n          temp.push(node);\n        } else {\n          temp.push(filledNode(node, span, count));\n          rows.push(temp);\n          count = props.column;\n          temp = [];\n        }\n      });\n      return rows;\n    };\n    return {\n      descriptionsSize,\n      getRows\n    };\n  }\n});\nexport { script as default };","map":{"version":3,"names":["script","defineComponent","name","components","script$1","props","border","type","Boolean","default","column","Number","direction","String","size","validator","isValidComponentSize","title","extra","setup","slots","provide","elDescriptionsKey","descriptionsSize","useSize","flattedChildren","children","temp","Array","isArray","res","forEach","child","push","filledNode","node","span","count","isLast","getRows","_a","call","filter","_a2","rows","totalSpan","index","length","lastSpan"],"sources":["../../../../../../packages/components/descriptions/src/index.vue"],"sourcesContent":["<template>\n  <div class=\"el-descriptions\">\n    <div\n      v-if=\"title || extra || $slots.title || $slots.extra\"\n      class=\"el-descriptions__header\"\n    >\n      <div class=\"el-descriptions__title\">\n        <slot name=\"title\">{{ title }}</slot>\n      </div>\n      <div class=\"el-descriptions__extra\">\n        <slot name=\"extra\">{{ extra }}</slot>\n      </div>\n    </div>\n\n    <div class=\"el-descriptions__body\">\n      <table\n        :class=\"[\n          'el-descriptions__table',\n          { 'is-bordered': border },\n          descriptionsSize ? `el-descriptions--${descriptionsSize}` : '',\n        ]\"\n      >\n        <tbody>\n          <template v-for=\"(row, index) in getRows()\" :key=\"index\">\n            <el-descriptions-row :row=\"row\" />\n          </template>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, provide } from 'vue'\nimport { isValidComponentSize } from '@element-plus/utils/validators'\nimport { useSize } from '@element-plus/hooks'\nimport DescriptionsRow from './descriptions-row.vue'\nimport { elDescriptionsKey } from './token'\n\nimport type { PropType } from 'vue'\nimport type { ComponentSize } from '@element-plus/utils/types'\n\nexport default defineComponent({\n  name: 'ElDescriptions',\n  components: {\n    [DescriptionsRow.name]: DescriptionsRow,\n  },\n  props: {\n    border: {\n      type: Boolean,\n      default: false,\n    },\n    column: {\n      type: Number,\n      default: 3,\n    },\n    direction: {\n      type: String as PropType<'horizontal' | 'vertical'>,\n      default: 'horizontal',\n    },\n    size: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    title: {\n      type: String,\n      default: '',\n    },\n    extra: {\n      type: String,\n      default: '',\n    },\n  },\n  setup(props, { slots }) {\n    provide(elDescriptionsKey, props)\n\n    const descriptionsSize = useSize()\n\n    const flattedChildren = (children) => {\n      const temp = Array.isArray(children) ? children : [children]\n      const res = []\n      temp.forEach((child) => {\n        if (Array.isArray(child.children)) {\n          res.push(...flattedChildren(child.children))\n        } else {\n          res.push(child)\n        }\n      })\n      return res\n    }\n\n    const filledNode = (node, span, count, isLast = false) => {\n      if (!node.props) {\n        node.props = {}\n      }\n      if (span > count) {\n        node.props.span = count\n      }\n      if (isLast) {\n        // set the last span\n        node.props.span = span\n      }\n      return node\n    }\n\n    const getRows = () => {\n      const children = flattedChildren(slots.default?.()).filter(\n        (node) => node?.type?.name === 'ElDescriptionsItem'\n      )\n      const rows = []\n      let temp = []\n      let count = props.column\n      let totalSpan = 0 // all spans number of item\n\n      children.forEach((node, index) => {\n        const span = node.props?.span || 1\n\n        if (index < children.length - 1) {\n          totalSpan += span > count ? count : span\n        }\n\n        if (index === children.length - 1) {\n          // calculate the last item span\n          const lastSpan = props.column - (totalSpan % props.column)\n          temp.push(filledNode(node, lastSpan, count, true))\n          rows.push(temp)\n          return\n        }\n\n        if (span < count) {\n          count -= span\n          temp.push(node)\n        } else {\n          temp.push(filledNode(node, span, count))\n          rows.push(temp)\n          count = props.column\n          temp = []\n        }\n      })\n\n      return rows\n    }\n\n    return {\n      descriptionsSize,\n      getRows,\n    }\n  },\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}