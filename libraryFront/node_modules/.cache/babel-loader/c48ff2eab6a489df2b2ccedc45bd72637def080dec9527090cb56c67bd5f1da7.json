{"ast":null,"code":"function calcColorChannels(c) {\n  let rawColor = c.trim().replace(\"#\", \"\");\n  if (/^[0-9a-fA-F]{3}$/.test(rawColor)) {\n    rawColor = rawColor[0].repeat(2) + rawColor[1].repeat(2) + rawColor[2].repeat(2);\n  }\n  if (/^[0-9a-fA-F]{6}$/.test(rawColor)) {\n    return {\n      red: parseInt(rawColor.slice(0, 2), 16),\n      green: parseInt(rawColor.slice(2, 4), 16),\n      blue: parseInt(rawColor.slice(4, 6), 16)\n    };\n  }\n  return {\n    red: 255,\n    green: 255,\n    blue: 255\n  };\n}\nfunction mixColor(color, percent = 0.2) {\n  let {\n    red,\n    green,\n    blue\n  } = calcColorChannels(color);\n  if (percent > 0) {\n    red *= 1 - percent;\n    green *= 1 - percent;\n    blue *= 1 - percent;\n  } else {\n    const value = Math.abs(percent);\n    red += (255 - red) * Math.abs(percent);\n    green += (255 - green) * value;\n    blue += (255 - blue) * value;\n  }\n  return `rgb(${Math.round(red)}, ${Math.round(green)}, ${Math.round(blue)})`;\n}\nfunction lighten(color, percent = 0.2) {\n  return mixColor(color, -percent);\n}\nfunction darken(color, percent = 0.2) {\n  return mixColor(color, percent);\n}\nexport { calcColorChannels, darken, lighten, mixColor };","map":{"version":3,"names":["c","rawColor","trim","replace","test","repeat","red","parseInt","slice","green","blue","color","percent","calcColorChannels","value","Math","abs","round","mixColor"],"sources":["../../../../packages/utils/color.ts"],"sourcesContent":["export function calcColorChannels(c: string) {\n  let rawColor = c.trim().replace('#', '')\n  if (/^[0-9a-fA-F]{3}$/.test(rawColor)) {\n    rawColor =\n      rawColor[0].repeat(2) + rawColor[1].repeat(2) + rawColor[2].repeat(2)\n  }\n  if (/^[0-9a-fA-F]{6}$/.test(rawColor)) {\n    return {\n      red: parseInt(rawColor.slice(0, 2), 16),\n      green: parseInt(rawColor.slice(2, 4), 16),\n      blue: parseInt(rawColor.slice(4, 6), 16),\n    }\n  }\n  return {\n    red: 255,\n    green: 255,\n    blue: 255,\n  }\n}\n\nexport function mixColor(color: string, percent = 0.2) {\n  let { red, green, blue } = calcColorChannels(color)\n  if (percent > 0) {\n    // shade given color\n    red *= 1 - percent\n    green *= 1 - percent\n    blue *= 1 - percent\n  } else {\n    // tint given color\n    const value = Math.abs(percent)\n    red += (255 - red) * Math.abs(percent)\n    green += (255 - green) * value\n    blue += (255 - blue) * value\n  }\n  return `rgb(${Math.round(red)}, ${Math.round(green)}, ${Math.round(blue)})`\n}\n\nexport function lighten(color: string, percent = 0.2) {\n  return mixColor(color, -percent)\n}\n\nexport function darken(color: string, percent = 0.2) {\n  return mixColor(color, percent)\n}\n"],"mappings":"2BAAkCA,CAAA,EAAW;EAC3C,IAAIC,QAAA,GAAWD,CAAA,CAAEE,IAAA,GAAOC,OAAA,CAAQ,KAAK;EACrC,IAAI,mBAAmBC,IAAA,CAAKH,QAAA,GAAW;IACrCA,QAAA,GACEA,QAAA,CAAS,GAAGI,MAAA,CAAO,KAAKJ,QAAA,CAAS,GAAGI,MAAA,CAAO,KAAKJ,QAAA,CAAS,GAAGI,MAAA,CAAO;EAAA;EAEvE,IAAI,mBAAmBD,IAAA,CAAKH,QAAA,GAAW;IACrC,OAAO;MACLK,GAAA,EAAKC,QAAA,CAASN,QAAA,CAASO,KAAA,CAAM,GAAG,IAAI;MACpCC,KAAA,EAAOF,QAAA,CAASN,QAAA,CAASO,KAAA,CAAM,GAAG,IAAI;MACtCE,IAAA,EAAMH,QAAA,CAASN,QAAA,CAASO,KAAA,CAAM,GAAG,IAAI;IAAA;EAAA;EAGzC,OAAO;IACLF,GAAA,EAAK;IACLG,KAAA,EAAO;IACPC,IAAA,EAAM;EAAA;AAAA;kBAIeC,KAAA,EAAeC,OAAA,GAAU,KAAK;EACrD,IAAI;IAAEN,GAAA;IAAKG,KAAA;IAAOC;EAAA,IAASG,iBAAA,CAAkBF,KAAA;EAC7C,IAAIC,OAAA,GAAU,GAAG;IAEfN,GAAA,IAAO,IAAIM,OAAA;IACXH,KAAA,IAAS,IAAIG,OAAA;IACbF,IAAA,IAAQ,IAAIE,OAAA;EAAA,OACP;IAEL,MAAME,KAAA,GAAQC,IAAA,CAAKC,GAAA,CAAIJ,OAAA;IACvBN,GAAA,IAAQ,OAAMA,GAAA,IAAOS,IAAA,CAAKC,GAAA,CAAIJ,OAAA;IAC9BH,KAAA,IAAU,OAAMA,KAAA,IAASK,KAAA;IACzBJ,IAAA,IAAS,OAAMA,IAAA,IAAQI,KAAA;EAAA;EAEzB,OAAO,OAAOC,IAAA,CAAKE,KAAA,CAAMX,GAAA,MAASS,IAAA,CAAKE,KAAA,CAAMR,KAAA,MAAWM,IAAA,CAAKE,KAAA,CAAMP,IAAA;AAAA;iBAG7CC,KAAA,EAAeC,OAAA,GAAU,KAAK;EACpD,OAAOM,QAAA,CAASP,KAAA,EAAO,CAACC,OAAA;AAAA;gBAGHD,KAAA,EAAeC,OAAA,GAAU,KAAK;EACnD,OAAOM,QAAA,CAASP,KAAA,EAAOC,OAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}