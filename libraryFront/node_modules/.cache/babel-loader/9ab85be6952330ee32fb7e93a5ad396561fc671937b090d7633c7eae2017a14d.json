{"ast":null,"code":"import { addResizeListener, removeResizeListener } from '../../utils/resize-event.mjs';\nconst Resize = {\n  beforeMount(el, binding) {\n    el._handleResize = () => {\n      var _a;\n      el && ((_a = binding.value) == null ? void 0 : _a.call(binding, el));\n    };\n    addResizeListener(el, el._handleResize);\n  },\n  beforeUnmount(el) {\n    removeResizeListener(el, el._handleResize);\n  }\n};\nexport { Resize as default };","map":{"version":3,"names":["Resize","beforeMount","el","binding","_handleResize","_a","value","call","addResizeListener","beforeUnmount","removeResizeListener"],"sources":["../../../../../packages/directives/resize/index.ts"],"sourcesContent":["import {\n  addResizeListener,\n  removeResizeListener,\n} from '@element-plus/utils/resize-event'\n\nimport type { ObjectDirective, DirectiveBinding } from 'vue'\n\ndeclare interface ResizeEl extends HTMLElement {\n  _handleResize?: () => void\n}\n\nconst Resize: ObjectDirective = {\n  beforeMount(el: ResizeEl, binding: DirectiveBinding) {\n    el._handleResize = () => {\n      el && binding.value?.(el)\n    }\n    addResizeListener(el, el._handleResize)\n  },\n  beforeUnmount(el: ResizeEl) {\n    removeResizeListener(el, el._handleResize)\n  },\n}\n\nexport default Resize\n"],"mappings":";MAWMA,MAAA,GAA0B;EAC9BC,YAAYC,EAAA,EAAcC,OAAA,EAA2B;IACnDD,EAAA,CAAGE,aAAA,GAAgB,MAAM;MAb7B,IAAAC,EAAA;MAcMH,EAAA,MAAAG,EAAA,GAAAF,OAAA,CAAcG,KAAA,KAAR,gBAAAD,EAAA,CAAAE,IAAA,CAAAJ,OAAA,EAAgBD,EAAA;IAAA;IAExBM,iBAAA,CAAkBN,EAAA,EAAIA,EAAA,CAAGE,aAAA;EAAA;EAE3BK,cAAcP,EAAA,EAAc;IAC1BQ,oBAAA,CAAqBR,EAAA,EAAIA,EAAA,CAAGE,aAAA;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}