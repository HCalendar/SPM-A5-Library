{"ast":null,"code":"import { resolveComponent, withDirectives, openBlock, createElementBlock, normalizeClass, normalizeStyle, createCommentVNode, Fragment, renderSlot, createElementVNode, mergeProps, createBlock, withCtx, resolveDynamicComponent, withModifiers, createVNode, toDisplayString, vShow } from 'vue';\nconst _hoisted_1 = {\n  key: 0,\n  class: \"el-input-group__prepend\"\n};\nconst _hoisted_2 = [\"type\", \"disabled\", \"readonly\", \"autocomplete\", \"tabindex\", \"aria-label\", \"placeholder\"];\nconst _hoisted_3 = {\n  key: 1,\n  class: \"el-input__prefix\"\n};\nconst _hoisted_4 = {\n  class: \"el-input__prefix-inner\"\n};\nconst _hoisted_5 = {\n  key: 2,\n  class: \"el-input__suffix\"\n};\nconst _hoisted_6 = {\n  class: \"el-input__suffix-inner\"\n};\nconst _hoisted_7 = {\n  key: 3,\n  class: \"el-input__count\"\n};\nconst _hoisted_8 = {\n  class: \"el-input__count-inner\"\n};\nconst _hoisted_9 = {\n  key: 3,\n  class: \"el-input-group__append\"\n};\nconst _hoisted_10 = [\"tabindex\", \"disabled\", \"readonly\", \"autocomplete\", \"aria-label\", \"placeholder\"];\nconst _hoisted_11 = {\n  key: 0,\n  class: \"el-input__count\"\n};\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_circle_close = resolveComponent(\"circle-close\");\n  const _component_icon_view = resolveComponent(\"icon-view\");\n  return withDirectives((openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([_ctx.type === \"textarea\" ? \"el-textarea\" : \"el-input\", _ctx.inputSize ? \"el-input--\" + _ctx.inputSize : \"\", {\n      \"is-disabled\": _ctx.inputDisabled,\n      \"is-exceed\": _ctx.inputExceed,\n      \"el-input-group\": _ctx.$slots.prepend || _ctx.$slots.append,\n      \"el-input-group--append\": _ctx.$slots.append,\n      \"el-input-group--prepend\": _ctx.$slots.prepend,\n      \"el-input--prefix\": _ctx.$slots.prefix || _ctx.prefixIcon,\n      \"el-input--suffix\": _ctx.$slots.suffix || _ctx.suffixIcon || _ctx.clearable || _ctx.showPassword,\n      \"el-input--suffix--password-clear\": _ctx.clearable && _ctx.showPassword\n    }, _ctx.$attrs.class]),\n    style: normalizeStyle(_ctx.containerStyle),\n    onMouseenter: _cache[17] || (_cache[17] = (...args) => _ctx.onMouseEnter && _ctx.onMouseEnter(...args)),\n    onMouseleave: _cache[18] || (_cache[18] = (...args) => _ctx.onMouseLeave && _ctx.onMouseLeave(...args))\n  }, [createCommentVNode(\" input \"), _ctx.type !== \"textarea\" ? (openBlock(), createElementBlock(Fragment, {\n    key: 0\n  }, [createCommentVNode(\" prepend slot \"), _ctx.$slots.prepend ? (openBlock(), createElementBlock(\"div\", _hoisted_1, [renderSlot(_ctx.$slots, \"prepend\")])) : createCommentVNode(\"v-if\", true), createElementVNode(\"input\", mergeProps({\n    ref: \"input\",\n    class: \"el-input__inner\"\n  }, _ctx.attrs, {\n    type: _ctx.showPassword ? _ctx.passwordVisible ? \"text\" : \"password\" : _ctx.type,\n    disabled: _ctx.inputDisabled,\n    readonly: _ctx.readonly,\n    autocomplete: _ctx.autocomplete,\n    tabindex: _ctx.tabindex,\n    \"aria-label\": _ctx.label,\n    placeholder: _ctx.placeholder,\n    style: _ctx.inputStyle,\n    onCompositionstart: _cache[0] || (_cache[0] = (...args) => _ctx.handleCompositionStart && _ctx.handleCompositionStart(...args)),\n    onCompositionupdate: _cache[1] || (_cache[1] = (...args) => _ctx.handleCompositionUpdate && _ctx.handleCompositionUpdate(...args)),\n    onCompositionend: _cache[2] || (_cache[2] = (...args) => _ctx.handleCompositionEnd && _ctx.handleCompositionEnd(...args)),\n    onInput: _cache[3] || (_cache[3] = (...args) => _ctx.handleInput && _ctx.handleInput(...args)),\n    onFocus: _cache[4] || (_cache[4] = (...args) => _ctx.handleFocus && _ctx.handleFocus(...args)),\n    onBlur: _cache[5] || (_cache[5] = (...args) => _ctx.handleBlur && _ctx.handleBlur(...args)),\n    onChange: _cache[6] || (_cache[6] = (...args) => _ctx.handleChange && _ctx.handleChange(...args)),\n    onKeydown: _cache[7] || (_cache[7] = (...args) => _ctx.handleKeydown && _ctx.handleKeydown(...args))\n  }), null, 16, _hoisted_2), createCommentVNode(\" prefix slot \"), _ctx.$slots.prefix || _ctx.prefixIcon ? (openBlock(), createElementBlock(\"span\", _hoisted_3, [createElementVNode(\"span\", _hoisted_4, [renderSlot(_ctx.$slots, \"prefix\"), _ctx.prefixIcon ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0,\n    class: \"el-input__icon\"\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.prefixIcon)))]),\n    _: 1\n  })) : createCommentVNode(\"v-if\", true)])])) : createCommentVNode(\"v-if\", true), createCommentVNode(\" suffix slot \"), _ctx.suffixVisible ? (openBlock(), createElementBlock(\"span\", _hoisted_5, [createElementVNode(\"span\", _hoisted_6, [!_ctx.showClear || !_ctx.showPwdVisible || !_ctx.isWordLimitVisible ? (openBlock(), createElementBlock(Fragment, {\n    key: 0\n  }, [renderSlot(_ctx.$slots, \"suffix\"), _ctx.suffixIcon ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0,\n    class: \"el-input__icon\"\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.suffixIcon)))]),\n    _: 1\n  })) : createCommentVNode(\"v-if\", true)], 64)) : createCommentVNode(\"v-if\", true), _ctx.showClear ? (openBlock(), createBlock(_component_el_icon, {\n    key: 1,\n    class: \"el-input__icon el-input__clear\",\n    onMousedown: _cache[8] || (_cache[8] = withModifiers(() => {}, [\"prevent\"])),\n    onClick: _ctx.clear\n  }, {\n    default: withCtx(() => [createVNode(_component_circle_close)]),\n    _: 1\n  }, 8, [\"onClick\"])) : createCommentVNode(\"v-if\", true), _ctx.showPwdVisible ? (openBlock(), createBlock(_component_el_icon, {\n    key: 2,\n    class: \"el-input__icon el-input__clear\",\n    onClick: _ctx.handlePasswordVisible\n  }, {\n    default: withCtx(() => [createVNode(_component_icon_view)]),\n    _: 1\n  }, 8, [\"onClick\"])) : createCommentVNode(\"v-if\", true), _ctx.isWordLimitVisible ? (openBlock(), createElementBlock(\"span\", _hoisted_7, [createElementVNode(\"span\", _hoisted_8, toDisplayString(_ctx.textLength) + \" / \" + toDisplayString(_ctx.attrs.maxlength), 1)])) : createCommentVNode(\"v-if\", true)]), _ctx.validateState && _ctx.validateIcon ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0,\n    class: \"el-input__icon el-input__validateIcon\"\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.validateIcon)))]),\n    _: 1\n  })) : createCommentVNode(\"v-if\", true)])) : createCommentVNode(\"v-if\", true), createCommentVNode(\" append slot \"), _ctx.$slots.append ? (openBlock(), createElementBlock(\"div\", _hoisted_9, [renderSlot(_ctx.$slots, \"append\")])) : createCommentVNode(\"v-if\", true)], 64)) : (openBlock(), createElementBlock(Fragment, {\n    key: 1\n  }, [createCommentVNode(\" textarea \"), createElementVNode(\"textarea\", mergeProps({\n    ref: \"textarea\",\n    class: \"el-textarea__inner\"\n  }, _ctx.attrs, {\n    tabindex: _ctx.tabindex,\n    disabled: _ctx.inputDisabled,\n    readonly: _ctx.readonly,\n    autocomplete: _ctx.autocomplete,\n    style: _ctx.computedTextareaStyle,\n    \"aria-label\": _ctx.label,\n    placeholder: _ctx.placeholder,\n    onCompositionstart: _cache[9] || (_cache[9] = (...args) => _ctx.handleCompositionStart && _ctx.handleCompositionStart(...args)),\n    onCompositionupdate: _cache[10] || (_cache[10] = (...args) => _ctx.handleCompositionUpdate && _ctx.handleCompositionUpdate(...args)),\n    onCompositionend: _cache[11] || (_cache[11] = (...args) => _ctx.handleCompositionEnd && _ctx.handleCompositionEnd(...args)),\n    onInput: _cache[12] || (_cache[12] = (...args) => _ctx.handleInput && _ctx.handleInput(...args)),\n    onFocus: _cache[13] || (_cache[13] = (...args) => _ctx.handleFocus && _ctx.handleFocus(...args)),\n    onBlur: _cache[14] || (_cache[14] = (...args) => _ctx.handleBlur && _ctx.handleBlur(...args)),\n    onChange: _cache[15] || (_cache[15] = (...args) => _ctx.handleChange && _ctx.handleChange(...args)),\n    onKeydown: _cache[16] || (_cache[16] = (...args) => _ctx.handleKeydown && _ctx.handleKeydown(...args))\n  }), null, 16, _hoisted_10), _ctx.isWordLimitVisible ? (openBlock(), createElementBlock(\"span\", _hoisted_11, toDisplayString(_ctx.textLength) + \" / \" + toDisplayString(_ctx.attrs.maxlength), 1)) : createCommentVNode(\"v-if\", true)], 64))], 38)), [[vShow, _ctx.type !== \"hidden\"]]);\n}\nexport { render };","map":{"version":3,"names":["class","createElementBlock","normalizeClass","style","normalizeStyle","_ctx","containerStyle","onMouseenter","_cache","args","onMouseEnter","onMouseleave","onMouseLeave","createCommentVNode","type","openBlock","Fragment","key","$slots","prepend","_hoisted_1","renderSlot","createElementVNode","mergeProps","ref","attrs","showPassword","passwordVisible","disabled","inputDisabled","readonly","autocomplete","tabindex","label","placeholder","inputStyle","onCompositionstart","handleCompositionStart","onCompositionupdate","handleCompositionUpdate","onCompositionend","handleCompositionEnd","onInput","handleInput","onFocus","handleFocus","onBlur","handleBlur","onChange","handleChange","onKeydown","handleKeydown","prefix","prefixIcon","_hoisted_3","_hoisted_4","createBlock","_component_el_icon","resolveDynamicComponent","suffixVisible","_hoisted_5","_hoisted_6","showClear","showPwdVisible","isWordLimitVisible","suffixIcon","onMousedown","withModifiers","onClick","clear","createVNode","_component_circle_close","handlePasswordVisible","_component_icon_view","_hoisted_7","_hoisted_8","toDisplayString","textLength","maxlength","validateState","validateIcon","append","_hoisted_9","computedTextareaStyle","_hoisted_11"],"sources":["../../../../../../packages/components/input/src/input.vue?vue&type=template&id=3290dcb6&lang.js"],"sourcesContent":["<template>\n  <div\n    v-show=\"type !== 'hidden'\"\n    :class=\"[\n      type === 'textarea' ? 'el-textarea' : 'el-input',\n      inputSize ? 'el-input--' + inputSize : '',\n      {\n        'is-disabled': inputDisabled,\n        'is-exceed': inputExceed,\n        'el-input-group': $slots.prepend || $slots.append,\n        'el-input-group--append': $slots.append,\n        'el-input-group--prepend': $slots.prepend,\n        'el-input--prefix': $slots.prefix || prefixIcon,\n        'el-input--suffix':\n          $slots.suffix || suffixIcon || clearable || showPassword,\n        'el-input--suffix--password-clear': clearable && showPassword,\n      },\n      $attrs.class,\n    ]\"\n    :style=\"containerStyle\"\n    @mouseenter=\"onMouseEnter\"\n    @mouseleave=\"onMouseLeave\"\n  >\n    <!-- input -->\n    <template v-if=\"type !== 'textarea'\">\n      <!-- prepend slot -->\n      <div v-if=\"$slots.prepend\" class=\"el-input-group__prepend\">\n        <slot name=\"prepend\" />\n      </div>\n\n      <input\n        ref=\"input\"\n        class=\"el-input__inner\"\n        v-bind=\"attrs\"\n        :type=\"showPassword ? (passwordVisible ? 'text' : 'password') : type\"\n        :disabled=\"inputDisabled\"\n        :readonly=\"readonly\"\n        :autocomplete=\"autocomplete\"\n        :tabindex=\"tabindex\"\n        :aria-label=\"label\"\n        :placeholder=\"placeholder\"\n        :style=\"inputStyle\"\n        @compositionstart=\"handleCompositionStart\"\n        @compositionupdate=\"handleCompositionUpdate\"\n        @compositionend=\"handleCompositionEnd\"\n        @input=\"handleInput\"\n        @focus=\"handleFocus\"\n        @blur=\"handleBlur\"\n        @change=\"handleChange\"\n        @keydown=\"handleKeydown\"\n      />\n\n      <!-- prefix slot -->\n      <span v-if=\"$slots.prefix || prefixIcon\" class=\"el-input__prefix\">\n        <span class=\"el-input__prefix-inner\">\n          <slot name=\"prefix\"></slot>\n          <el-icon v-if=\"prefixIcon\" class=\"el-input__icon\">\n            <component :is=\"prefixIcon\" />\n          </el-icon>\n        </span>\n      </span>\n\n      <!-- suffix slot -->\n      <span v-if=\"suffixVisible\" class=\"el-input__suffix\">\n        <span class=\"el-input__suffix-inner\">\n          <template v-if=\"!showClear || !showPwdVisible || !isWordLimitVisible\">\n            <slot name=\"suffix\"></slot>\n            <el-icon v-if=\"suffixIcon\" class=\"el-input__icon\">\n              <component :is=\"suffixIcon\" />\n            </el-icon>\n          </template>\n          <el-icon\n            v-if=\"showClear\"\n            class=\"el-input__icon el-input__clear\"\n            @mousedown.prevent\n            @click=\"clear\"\n          >\n            <circle-close />\n          </el-icon>\n          <el-icon\n            v-if=\"showPwdVisible\"\n            class=\"el-input__icon el-input__clear\"\n            @click=\"handlePasswordVisible\"\n          >\n            <icon-view />\n          </el-icon>\n          <span v-if=\"isWordLimitVisible\" class=\"el-input__count\">\n            <span class=\"el-input__count-inner\">\n              {{ textLength }} / {{ attrs.maxlength }}\n            </span>\n          </span>\n        </span>\n        <el-icon\n          v-if=\"validateState && validateIcon\"\n          class=\"el-input__icon el-input__validateIcon\"\n        >\n          <component :is=\"validateIcon\" />\n        </el-icon>\n      </span>\n\n      <!-- append slot -->\n      <div v-if=\"$slots.append\" class=\"el-input-group__append\">\n        <slot name=\"append\" />\n      </div>\n    </template>\n\n    <!-- textarea -->\n    <template v-else>\n      <textarea\n        ref=\"textarea\"\n        class=\"el-textarea__inner\"\n        v-bind=\"attrs\"\n        :tabindex=\"tabindex\"\n        :disabled=\"inputDisabled\"\n        :readonly=\"readonly\"\n        :autocomplete=\"autocomplete\"\n        :style=\"computedTextareaStyle\"\n        :aria-label=\"label\"\n        :placeholder=\"placeholder\"\n        @compositionstart=\"handleCompositionStart\"\n        @compositionupdate=\"handleCompositionUpdate\"\n        @compositionend=\"handleCompositionEnd\"\n        @input=\"handleInput\"\n        @focus=\"handleFocus\"\n        @blur=\"handleBlur\"\n        @change=\"handleChange\"\n        @keydown=\"handleKeydown\"\n      />\n      <span v-if=\"isWordLimitVisible\" class=\"el-input__count\">\n        {{ textLength }} / {{ attrs.maxlength }}\n      </span>\n    </template>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  computed,\n  watch,\n  nextTick,\n  getCurrentInstance,\n  ref,\n  shallowRef,\n  onMounted,\n  onUpdated,\n} from 'vue'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { CircleClose, View as IconView } from '@element-plus/icons-vue'\nimport { ValidateComponentsMap } from '@element-plus/utils/icon'\nimport {\n  useAttrs,\n  useDisabled,\n  useFormItem,\n  useSize,\n} from '@element-plus/hooks'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/utils/constants'\nimport { isObject } from '@element-plus/utils/util'\nimport isServer from '@element-plus/utils/isServer'\nimport { isKorean } from '@element-plus/utils/isDef'\nimport { calcTextareaHeight } from './calc-textarea-height'\nimport { inputProps, inputEmits } from './input'\n\nimport type { StyleValue } from '@element-plus/utils/types'\n\ntype TargetElement = HTMLInputElement | HTMLTextAreaElement\n\nconst PENDANT_MAP = {\n  suffix: 'append',\n  prefix: 'prepend',\n} as const\n\nexport default defineComponent({\n  name: 'ElInput',\n\n  components: { ElIcon, CircleClose, IconView },\n\n  inheritAttrs: false,\n\n  props: inputProps,\n  emits: inputEmits,\n\n  setup(props, { slots, emit, attrs: rawAttrs }) {\n    const instance = getCurrentInstance()!\n    const attrs = useAttrs()\n\n    const { form, formItem } = useFormItem()\n    const inputSize = useSize()\n    const inputDisabled = useDisabled()\n\n    const input = ref<HTMLInputElement>()\n    const textarea = ref<HTMLTextAreaElement>()\n    const focused = ref(false)\n    const hovering = ref(false)\n    const isComposing = ref(false)\n    const passwordVisible = ref(false)\n    const _textareaCalcStyle = shallowRef(props.inputStyle)\n\n    const inputOrTextarea = computed(() => input.value || textarea.value)\n\n    const needStatusIcon = computed(() => form?.statusIcon ?? false)\n    const validateState = computed(() => formItem?.validateState || '')\n    const validateIcon = computed(\n      () => ValidateComponentsMap[validateState.value]\n    )\n    const containerStyle = computed(() => rawAttrs.style as StyleValue)\n    const computedTextareaStyle = computed<StyleValue>(() => [\n      props.inputStyle,\n      _textareaCalcStyle.value,\n      { resize: props.resize },\n    ])\n    const nativeInputValue = computed(() =>\n      props.modelValue === null || props.modelValue === undefined\n        ? ''\n        : String(props.modelValue)\n    )\n    const showClear = computed(\n      () =>\n        props.clearable &&\n        !inputDisabled.value &&\n        !props.readonly &&\n        !!nativeInputValue.value &&\n        (focused.value || hovering.value)\n    )\n    const showPwdVisible = computed(\n      () =>\n        props.showPassword &&\n        !inputDisabled.value &&\n        !props.readonly &&\n        (!!nativeInputValue.value || focused.value)\n    )\n    const isWordLimitVisible = computed(\n      () =>\n        props.showWordLimit &&\n        !!attrs.value.maxlength &&\n        (props.type === 'text' || props.type === 'textarea') &&\n        !inputDisabled.value &&\n        !props.readonly &&\n        !props.showPassword\n    )\n    const textLength = computed(() => Array.from(nativeInputValue.value).length)\n    const inputExceed = computed(\n      () =>\n        // show exceed style if length of initial value greater then maxlength\n        !!isWordLimitVisible.value &&\n        textLength.value > Number(attrs.value.maxlength)\n    )\n\n    const resizeTextarea = () => {\n      const { type, autosize } = props\n\n      if (isServer || type !== 'textarea') return\n\n      if (autosize) {\n        const minRows = isObject(autosize) ? autosize.minRows : undefined\n        const maxRows = isObject(autosize) ? autosize.maxRows : undefined\n        _textareaCalcStyle.value = {\n          ...calcTextareaHeight(textarea.value!, minRows, maxRows),\n        }\n      } else {\n        _textareaCalcStyle.value = {\n          minHeight: calcTextareaHeight(textarea.value!).minHeight,\n        }\n      }\n    }\n\n    const setNativeInputValue = () => {\n      const input = inputOrTextarea.value\n      if (!input || input.value === nativeInputValue.value) return\n      input.value = nativeInputValue.value\n    }\n\n    const calcIconOffset = (place: 'prefix' | 'suffix') => {\n      const { el } = instance.vnode\n      if (!el) return\n      const elList: HTMLSpanElement[] = Array.from(\n        el.querySelectorAll(`.el-input__${place}`)\n      )\n      const target = elList.find((item) => item.parentNode === el)\n\n      if (!target) return\n\n      const pendant = PENDANT_MAP[place]\n\n      if (slots[pendant]) {\n        target.style.transform = `translateX(${place === 'suffix' ? '-' : ''}${\n          el.querySelector(`.el-input-group__${pendant}`).offsetWidth\n        }px)`\n      } else {\n        target.removeAttribute('style')\n      }\n    }\n\n    const updateIconOffset = () => {\n      calcIconOffset('prefix')\n      calcIconOffset('suffix')\n    }\n\n    const handleInput = (event: Event) => {\n      const { value } = event.target as TargetElement\n\n      // should not emit input during composition\n      // see: https://github.com/ElemeFE/element/issues/10516\n      if (isComposing.value) return\n\n      // hack for https://github.com/ElemeFE/element/issues/8548\n      // should remove the following line when we don't support IE\n      if (value === nativeInputValue.value) return\n\n      emit(UPDATE_MODEL_EVENT, value)\n      emit('input', value)\n\n      // ensure native input value is controlled\n      // see: https://github.com/ElemeFE/element/issues/12850\n      nextTick(setNativeInputValue)\n    }\n\n    const handleChange = (event: Event) => {\n      emit('change', (event.target as TargetElement).value)\n    }\n\n    const focus = () => {\n      // see: https://github.com/ElemeFE/element/issues/18573\n      nextTick(() => {\n        inputOrTextarea.value?.focus()\n      })\n    }\n\n    const blur = () => {\n      inputOrTextarea.value?.blur()\n    }\n\n    const handleFocus = (event: FocusEvent) => {\n      focused.value = true\n      emit('focus', event)\n    }\n\n    const handleBlur = (event: FocusEvent) => {\n      focused.value = false\n      emit('blur', event)\n      if (props.validateEvent) {\n        formItem?.validate?.('blur')\n      }\n    }\n\n    const select = () => {\n      inputOrTextarea.value?.select()\n    }\n\n    const handleCompositionStart = (event: CompositionEvent) => {\n      emit('compositionstart', event)\n      isComposing.value = true\n    }\n\n    const handleCompositionUpdate = (event: CompositionEvent) => {\n      emit('compositionupdate', event)\n      const text = (event.target as HTMLInputElement)?.value\n      const lastCharacter = text[text.length - 1] || ''\n      isComposing.value = !isKorean(lastCharacter)\n    }\n\n    const handleCompositionEnd = (event: CompositionEvent) => {\n      emit('compositionend', event)\n      if (isComposing.value) {\n        isComposing.value = false\n        handleInput(event)\n      }\n    }\n\n    const clear = () => {\n      emit(UPDATE_MODEL_EVENT, '')\n      emit('change', '')\n      emit('clear')\n      emit('input', '')\n    }\n\n    const handlePasswordVisible = () => {\n      passwordVisible.value = !passwordVisible.value\n      focus()\n    }\n\n    const suffixVisible = computed(\n      () =>\n        !!slots.suffix ||\n        !!props.suffixIcon ||\n        showClear.value ||\n        props.showPassword ||\n        isWordLimitVisible.value ||\n        (!!validateState.value && needStatusIcon.value)\n    )\n\n    watch(\n      () => props.modelValue,\n      () => {\n        nextTick(resizeTextarea)\n        if (props.validateEvent) {\n          formItem?.validate?.('change')\n        }\n      }\n    )\n\n    // native input value is set explicitly\n    // do not use v-model / :value in template\n    // see: https://github.com/ElemeFE/element/issues/14521\n    watch(nativeInputValue, () => setNativeInputValue())\n\n    // when change between <input> and <textarea>,\n    // update DOM dependent value and styles\n    // https://github.com/ElemeFE/element/issues/14857\n    watch(\n      () => props.type,\n      () => {\n        nextTick(() => {\n          setNativeInputValue()\n          resizeTextarea()\n          updateIconOffset()\n        })\n      }\n    )\n\n    onMounted(() => {\n      setNativeInputValue()\n      updateIconOffset()\n      nextTick(resizeTextarea)\n    })\n\n    onUpdated(() => {\n      nextTick(updateIconOffset)\n    })\n\n    const onMouseLeave = (evt: MouseEvent) => {\n      hovering.value = false\n      emit('mouseleave', evt)\n    }\n\n    const onMouseEnter = (evt: MouseEvent) => {\n      hovering.value = true\n      emit('mouseenter', evt)\n    }\n\n    const handleKeydown = (evt: KeyboardEvent) => {\n      emit('keydown', evt)\n    }\n\n    return {\n      input,\n      textarea,\n      attrs,\n      inputSize,\n      validateState,\n      validateIcon,\n      containerStyle,\n      computedTextareaStyle,\n      inputDisabled,\n      showClear,\n      showPwdVisible,\n      isWordLimitVisible,\n      textLength,\n      hovering,\n      inputExceed,\n      passwordVisible,\n      inputOrTextarea,\n      suffixVisible,\n\n      resizeTextarea,\n      handleInput,\n      handleChange,\n      handleFocus,\n      handleBlur,\n      handleCompositionStart,\n      handleCompositionUpdate,\n      handleCompositionEnd,\n      handlePasswordVisible,\n      clear,\n      select,\n      focus,\n      blur,\n      onMouseLeave,\n      onMouseEnter,\n      handleKeydown,\n    }\n  },\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}