{"ast":null,"code":"import { getCurrentInstance, computed } from 'vue';\nimport memo from 'lodash/memoize';\nimport memoOne from 'memoize-one';\nconst useCache = () => {\n  const vm = getCurrentInstance();\n  const props = vm.proxy.$props;\n  return computed(() => {\n    const _getItemStyleCache = (_, __, ___) => ({});\n    return props.perfMode ? memo(_getItemStyleCache) : memoOne(_getItemStyleCache);\n  });\n};\nexport { useCache };","map":{"version":3,"names":["useCache","vm","getCurrentInstance","props","proxy","$props","computed","_getItemStyleCache","_","__","___","perfMode","memo","memoOne"],"sources":["../../../../../../../packages/components/virtual-list/src/hooks/use-cache.ts"],"sourcesContent":["import { computed, getCurrentInstance } from 'vue'\nimport memo from 'lodash/memoize'\nimport memoOne from 'memoize-one'\n\nimport type { VirtualizedProps } from '../props'\n\nexport const useCache = () => {\n  const vm = getCurrentInstance()!\n\n  const props = vm.proxy!.$props as VirtualizedProps\n\n  return computed(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _getItemStyleCache = (_: any, __: any, ___: any) => ({})\n    return props.perfMode\n      ? memo(_getItemStyleCache)\n      : memoOne(_getItemStyleCache)\n  })\n}\n"],"mappings":";;;MAMaA,QAAA,GAAWA,CAAA,KAAM;EAC5B,MAAMC,EAAA,GAAKC,kBAAA;EAEX,MAAMC,KAAA,GAAQF,EAAA,CAAGG,KAAA,CAAOC,MAAA;EAExB,OAAOC,QAAA,CAAS,MAAM;IAEpB,MAAMC,kBAAA,GAAqBA,CAACC,CAAA,EAAQC,EAAA,EAASC,GAAA;IAC7C,OAAOP,KAAA,CAAMQ,QAAA,GACTC,IAAA,CAAKL,kBAAA,IACLM,OAAA,CAAQN,kBAAA;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}