{"ast":null,"code":"import { resolveComponent, openBlock, createElementBlock, normalizeClass, createBlock, withCtx, createVNode, normalizeStyle, createElementVNode, toDisplayString } from 'vue';\nconst _hoisted_1 = {\n  key: 1,\n  class: \"el-tree__empty-block\"\n};\nconst _hoisted_2 = {\n  class: \"el-tree__empty-text\"\n};\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _a;\n  const _component_el_tree_node = resolveComponent(\"el-tree-node\");\n  const _component_fixed_size_list = resolveComponent(\"fixed-size-list\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([\"el-tree\", {\n      \"el-tree--highlight-current\": _ctx.highlightCurrent\n    }]),\n    role: \"tree\"\n  }, [_ctx.isNotEmpty ? (openBlock(), createBlock(_component_fixed_size_list, {\n    key: 0,\n    \"class-name\": \"el-tree-virtual-list\",\n    data: _ctx.flattenTree,\n    total: _ctx.flattenTree.length,\n    height: _ctx.height,\n    \"item-size\": _ctx.itemSize,\n    \"perf-mode\": _ctx.perfMode\n  }, {\n    default: withCtx(({\n      data,\n      index,\n      style\n    }) => [createVNode(_component_el_tree_node, {\n      key: data[index].key,\n      style: normalizeStyle(style),\n      node: data[index],\n      expanded: _ctx.isExpanded(data[index]),\n      \"show-checkbox\": _ctx.showCheckbox,\n      checked: _ctx.isChecked(data[index]),\n      indeterminate: _ctx.isIndeterminate(data[index]),\n      disabled: _ctx.isDisabled(data[index]),\n      current: _ctx.isCurrent(data[index]),\n      \"hidden-expand-icon\": _ctx.isForceHiddenExpandIcon(data[index]),\n      onClick: _ctx.handleNodeClick,\n      onToggle: _ctx.toggleExpand,\n      onCheck: _ctx.handleNodeCheck\n    }, null, 8, [\"style\", \"node\", \"expanded\", \"show-checkbox\", \"checked\", \"indeterminate\", \"disabled\", \"current\", \"hidden-expand-icon\", \"onClick\", \"onToggle\", \"onCheck\"])]),\n    _: 1\n  }, 8, [\"data\", \"total\", \"height\", \"item-size\", \"perf-mode\"])) : (openBlock(), createElementBlock(\"div\", _hoisted_1, [createElementVNode(\"span\", _hoisted_2, toDisplayString((_a = _ctx.emptyText) != null ? _a : _ctx.t(\"el.tree.emptyText\")), 1)]))], 2);\n}\nexport { render };","map":{"version":3,"names":["class","createElementBlock","normalizeClass","role","_ctx","isNotEmpty","openBlock","createBlock","_component_fixed_size_list","data","flattenTree","total","length","height","itemSize","perfMode","default","withCtx","index","style","createVNode","_component_el_tree_node","key","normalizeStyle","node","expanded","isExpanded","showCheckbox","checked","isChecked","indeterminate","isIndeterminate","disabled","isDisabled","current","isCurrent","isForceHiddenExpandIcon","onClick","handleNodeClick","onToggle","toggleExpand","onCheck","handleNodeCheck","_hoisted_1","createElementVNode","_hoisted_2","toDisplayString","_a","emptyText","t"],"sources":["../../../../../../packages/components/tree-v2/src/tree.vue?vue&type=template&id=5b45a1b2&lang.js"],"sourcesContent":["<template>\n  <div\n    class=\"el-tree\"\n    :class=\"{\n      'el-tree--highlight-current': highlightCurrent,\n    }\"\n    role=\"tree\"\n  >\n    <fixed-size-list\n      v-if=\"isNotEmpty\"\n      class-name=\"el-tree-virtual-list\"\n      :data=\"flattenTree\"\n      :total=\"flattenTree.length\"\n      :height=\"height\"\n      :item-size=\"itemSize\"\n      :perf-mode=\"perfMode\"\n    >\n      <template #default=\"{ data, index, style }\">\n        <el-tree-node\n          :key=\"data[index].key\"\n          :style=\"style\"\n          :node=\"data[index]\"\n          :expanded=\"isExpanded(data[index])\"\n          :show-checkbox=\"showCheckbox\"\n          :checked=\"isChecked(data[index])\"\n          :indeterminate=\"isIndeterminate(data[index])\"\n          :disabled=\"isDisabled(data[index])\"\n          :current=\"isCurrent(data[index])\"\n          :hidden-expand-icon=\"isForceHiddenExpandIcon(data[index])\"\n          @click=\"handleNodeClick\"\n          @toggle=\"toggleExpand\"\n          @check=\"handleNodeCheck\"\n        ></el-tree-node>\n      </template>\n    </fixed-size-list>\n    <div v-else class=\"el-tree__empty-block\">\n      <span class=\"el-tree__empty-text\">{{\n        emptyText ?? t('el.tree.emptyText')\n      }}</span>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, getCurrentInstance, provide } from 'vue'\nimport { useLocale } from '@element-plus/hooks'\nimport { FixedSizeList } from '@element-plus/components/virtual-list'\nimport { useTree } from './composables/useTree'\nimport ElTreeNode from './tree-node.vue'\nimport { ROOT_TREE_INJECTION_KEY, treeEmits, treeProps } from './virtual-tree'\nimport type { TreeProps } from './types'\n\nexport default defineComponent({\n  name: 'ElTreeV2',\n  components: {\n    ElTreeNode,\n    FixedSizeList,\n  },\n  props: treeProps,\n  emits: treeEmits,\n  setup(props: TreeProps, ctx) {\n    provide(ROOT_TREE_INJECTION_KEY, {\n      ctx,\n      props,\n      instance: getCurrentInstance(),\n    })\n    const { t } = useLocale()\n    const {\n      flattenTree,\n      isNotEmpty,\n      toggleExpand,\n      isExpanded,\n      isIndeterminate,\n      isChecked,\n      isDisabled,\n      isCurrent,\n      isForceHiddenExpandIcon,\n      toggleCheckbox,\n      handleNodeClick,\n      handleNodeCheck,\n      // expose\n      getCurrentNode,\n      getCurrentKey,\n      setCurrentKey,\n      getCheckedKeys,\n      getCheckedNodes,\n      getHalfCheckedKeys,\n      getHalfCheckedNodes,\n      setChecked,\n      setCheckedKeys,\n      filter,\n      setData,\n    } = useTree(props, ctx.emit)\n\n    ctx.expose({\n      getCurrentNode,\n      getCurrentKey,\n      setCurrentKey,\n      getCheckedKeys,\n      getCheckedNodes,\n      getHalfCheckedKeys,\n      getHalfCheckedNodes,\n      setChecked,\n      setCheckedKeys,\n      filter,\n      setData,\n    })\n\n    return {\n      t,\n      flattenTree,\n      itemSize: 26,\n      isNotEmpty,\n      toggleExpand,\n      toggleCheckbox,\n      isExpanded,\n      isIndeterminate,\n      isChecked,\n      isDisabled,\n      isCurrent,\n      isForceHiddenExpandIcon,\n      handleNodeClick,\n      handleNodeCheck,\n    }\n  },\n})\n</script>\n"],"mappings":";;;EAmCgBA,KAAA,EAAM;AAAA;;EACVA,KAAA,EAAM;AAAA;;;;;sBAnChBC,kBAAA;IACED,KAAA,EAAAE,cAAA,EAAM;;;IAINC,IAAA,EAAK;EAAA,IAGGC,IAAA,CAAAC,UAAA,IAAAC,SAAA,IADRC,WAAA,CAAAC,0BAAA;;IAEE,cAAW;IACVC,IAAA,EAAML,IAAA,CAAAM,WAAA;IACNC,KAAA,EAAOP,IAAA,CAAAM,WAAA,CAAYE,MAAA;IACnBC,MAAA,EAAQT,IAAA,CAAAS,MAAA;IACR,aAAWT,IAAA,CAAAU,QAAA;IACX,aAAWV,IAAA,CAAAW;;IAEDC,OAAA,EAAAC,OAAA,CACT;MADoBR,IAAA;MAAMS,KAAA;MAAOC;IAAA,OACjCC,WAAA,CAAAC,uBAAA;MACGC,GAAA,EAAKb,IAAA,CAAKS,KAAA,EAAOI,GAAA;MACjBH,KAAA,EAAAI,cAAA,CAAOJ,KAAA;MACPK,IAAA,EAAMf,IAAA,CAAKS,KAAA;MACXO,QAAA,EAAUrB,IAAA,CAAAsB,UAAA,CAAWjB,IAAA,CAAKS,KAAA;MAC1B,iBAAed,IAAA,CAAAuB,YAAA;MACfC,OAAA,EAASxB,IAAA,CAAAyB,SAAA,CAAUpB,IAAA,CAAKS,KAAA;MACxBY,aAAA,EAAe1B,IAAA,CAAA2B,eAAA,CAAgBtB,IAAA,CAAKS,KAAA;MACpCc,QAAA,EAAU5B,IAAA,CAAA6B,UAAA,CAAWxB,IAAA,CAAKS,KAAA;MAC1BgB,OAAA,EAAS9B,IAAA,CAAA+B,SAAA,CAAU1B,IAAA,CAAKS,KAAA;MACxB,sBAAoBd,IAAA,CAAAgC,uBAAA,CAAwB3B,IAAA,CAAKS,KAAA;MACjDmB,OAAA,EAAOjC,IAAA,CAAAkC,eAAA;MACPC,QAAA,EAAQnC,IAAA,CAAAoC,YAAA;MACRC,OAAA,EAAOrC,IAAA,CAAAsC;;;gFAIdzC,kBAAA,QAAA0C,UAAA,GACEC,kBAAA,SAAAC,UAAA,EAAAC,eAAA,CACE,CAAAC,EAAA,GAAA3C,IAAA,CAAA4C,SAAA,YAAAD,EAAA,GAAa3C,IAAA,CAAA6C,CAAA,2B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}