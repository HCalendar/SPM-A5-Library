{"ast":null,"code":"import { nextTick } from 'vue';\nimport { isFunction } from '@vue/shared';\nimport throttle from 'lodash/throttle';\nimport { getOffsetTopDistance, getScrollContainer } from '../../../utils/dom.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nconst SCOPE = \"ElInfiniteScroll\";\nconst CHECK_INTERVAL = 50;\nconst DEFAULT_DELAY = 200;\nconst DEFAULT_DISTANCE = 0;\nconst attributes = {\n  delay: {\n    type: Number,\n    default: DEFAULT_DELAY\n  },\n  distance: {\n    type: Number,\n    default: DEFAULT_DISTANCE\n  },\n  disabled: {\n    type: Boolean,\n    default: false\n  },\n  immediate: {\n    type: Boolean,\n    default: true\n  }\n};\nconst getScrollOptions = (el, instance) => {\n  return Object.entries(attributes).reduce((acm, [name, option]) => {\n    var _a, _b;\n    const {\n      type,\n      default: defaultValue\n    } = option;\n    const attrVal = el.getAttribute(`infinite-scroll-${name}`);\n    let value = (_b = (_a = instance[attrVal]) != null ? _a : attrVal) != null ? _b : defaultValue;\n    value = value === \"false\" ? false : value;\n    value = type(value);\n    acm[name] = Number.isNaN(value) ? defaultValue : value;\n    return acm;\n  }, {});\n};\nconst destroyObserver = el => {\n  const {\n    observer\n  } = el[SCOPE];\n  if (observer) {\n    observer.disconnect();\n    delete el[SCOPE].observer;\n  }\n};\nconst handleScroll = (el, cb) => {\n  const {\n    container,\n    containerEl,\n    instance,\n    observer,\n    lastScrollTop\n  } = el[SCOPE];\n  const {\n    disabled,\n    distance\n  } = getScrollOptions(el, instance);\n  const {\n    clientHeight,\n    scrollHeight,\n    scrollTop\n  } = containerEl;\n  const delta = scrollTop - lastScrollTop;\n  el[SCOPE].lastScrollTop = scrollTop;\n  if (observer || disabled || delta < 0) return;\n  let shouldTrigger = false;\n  if (container === el) {\n    shouldTrigger = scrollHeight - (clientHeight + scrollTop) <= distance;\n  } else {\n    const {\n      clientTop,\n      scrollHeight: height\n    } = el;\n    const offsetTop = getOffsetTopDistance(el, containerEl);\n    shouldTrigger = scrollTop + clientHeight >= offsetTop + clientTop + height - distance;\n  }\n  if (shouldTrigger) {\n    cb.call(instance);\n  }\n};\nfunction checkFull(el, cb) {\n  const {\n    containerEl,\n    instance\n  } = el[SCOPE];\n  const {\n    disabled\n  } = getScrollOptions(el, instance);\n  if (disabled) return;\n  if (containerEl.scrollHeight <= containerEl.clientHeight) {\n    cb.call(instance);\n  } else {\n    destroyObserver(el);\n  }\n}\nconst InfiniteScroll = {\n  async mounted(el, binding) {\n    const {\n      instance,\n      value: cb\n    } = binding;\n    if (!isFunction(cb)) {\n      throwError(SCOPE, \"'v-infinite-scroll' binding value must be a function\");\n    }\n    await nextTick();\n    const {\n      delay,\n      immediate\n    } = getScrollOptions(el, instance);\n    const container = getScrollContainer(el, true);\n    const containerEl = container === window ? document.documentElement : container;\n    const onScroll = throttle(handleScroll.bind(null, el, cb), delay);\n    if (!container) return;\n    el[SCOPE] = {\n      instance,\n      container,\n      containerEl,\n      delay,\n      cb,\n      onScroll,\n      lastScrollTop: containerEl.scrollTop\n    };\n    if (immediate) {\n      const observer = new MutationObserver(throttle(checkFull.bind(null, el, cb), CHECK_INTERVAL));\n      el[SCOPE].observer = observer;\n      observer.observe(el, {\n        childList: true,\n        subtree: true\n      });\n      checkFull(el, cb);\n    }\n    container.addEventListener(\"scroll\", onScroll);\n  },\n  unmounted(el) {\n    const {\n      container,\n      onScroll\n    } = el[SCOPE];\n    container == null ? void 0 : container.removeEventListener(\"scroll\", onScroll);\n    destroyObserver(el);\n  }\n};\nexport { CHECK_INTERVAL, DEFAULT_DELAY, DEFAULT_DISTANCE, SCOPE, InfiniteScroll as default };","map":{"version":3,"names":["SCOPE","CHECK_INTERVAL","DEFAULT_DELAY","DEFAULT_DISTANCE","attributes","delay","type","Number","default","distance","disabled","Boolean","immediate","getScrollOptions","el","instance","Object","entries","reduce","acm","name","option","_a","_b","defaultValue","attrVal","getAttribute","value","isNaN","destroyObserver","observer","disconnect","handleScroll","cb","container","containerEl","lastScrollTop","clientHeight","scrollHeight","scrollTop","delta","shouldTrigger","clientTop","height","offsetTop","getOffsetTopDistance","call","checkFull","InfiniteScroll","mounted","binding","isFunction","throwError","nextTick","getScrollContainer","window","document","documentElement","onScroll","throttle","bind","MutationObserver","observe","childList","subtree","addEventListener","unmounted","removeEventListener"],"sources":["../../../../../../packages/components/infinite-scroll/src/index.ts"],"sourcesContent":["import { nextTick } from 'vue'\nimport { isFunction } from '@vue/shared'\nimport throttle from 'lodash/throttle'\nimport {\n  getScrollContainer,\n  getOffsetTopDistance,\n} from '@element-plus/utils/dom'\nimport { throwError } from '@element-plus/utils/error'\n\nimport type { ObjectDirective, ComponentPublicInstance } from 'vue'\n\nexport const SCOPE = 'ElInfiniteScroll'\nexport const CHECK_INTERVAL = 50\nexport const DEFAULT_DELAY = 200\nexport const DEFAULT_DISTANCE = 0\n\nconst attributes = {\n  delay: {\n    type: Number,\n    default: DEFAULT_DELAY,\n  },\n  distance: {\n    type: Number,\n    default: DEFAULT_DISTANCE,\n  },\n  disabled: {\n    type: Boolean,\n    default: false,\n  },\n  immediate: {\n    type: Boolean,\n    default: true,\n  },\n}\n\ntype Attrs = typeof attributes\ntype ScrollOptions = { [K in keyof Attrs]: Attrs[K]['default'] }\ntype InfiniteScrollCallback = () => void\ntype InfiniteScrollEl = HTMLElement & {\n  [SCOPE]: {\n    container: HTMLElement | Window\n    containerEl: HTMLElement\n    instance: ComponentPublicInstance\n    delay: number // export for test\n    lastScrollTop: number\n    cb: InfiniteScrollCallback\n    onScroll: () => void\n    observer?: MutationObserver\n  }\n}\n\nconst getScrollOptions = (\n  el: HTMLElement,\n  instance: ComponentPublicInstance\n): ScrollOptions => {\n  return Object.entries(attributes).reduce((acm, [name, option]) => {\n    const { type, default: defaultValue } = option\n    const attrVal = el.getAttribute(`infinite-scroll-${name}`)\n    let value = instance[attrVal] ?? attrVal ?? defaultValue\n    value = value === 'false' ? false : value\n    value = type(value)\n    acm[name] = Number.isNaN(value) ? defaultValue : value\n    return acm\n  }, {} as ScrollOptions)\n}\n\nconst destroyObserver = (el: InfiniteScrollEl) => {\n  const { observer } = el[SCOPE]\n\n  if (observer) {\n    observer.disconnect()\n    delete el[SCOPE].observer\n  }\n}\n\nconst handleScroll = (el: InfiniteScrollEl, cb: InfiniteScrollCallback) => {\n  const { container, containerEl, instance, observer, lastScrollTop } =\n    el[SCOPE]\n  const { disabled, distance } = getScrollOptions(el, instance)\n  const { clientHeight, scrollHeight, scrollTop } = containerEl\n  const delta = scrollTop - lastScrollTop\n\n  el[SCOPE].lastScrollTop = scrollTop\n\n  // trigger only if full check has done and not disabled and scroll down\n  if (observer || disabled || delta < 0) return\n\n  let shouldTrigger = false\n\n  if (container === el) {\n    shouldTrigger = scrollHeight - (clientHeight + scrollTop) <= distance\n  } else {\n    // get the scrollHeight since el might be visible overflow\n    const { clientTop, scrollHeight: height } = el\n    const offsetTop = getOffsetTopDistance(el, containerEl)\n    shouldTrigger =\n      scrollTop + clientHeight >= offsetTop + clientTop + height - distance\n  }\n\n  if (shouldTrigger) {\n    cb.call(instance)\n  }\n}\n\nfunction checkFull(el: InfiniteScrollEl, cb: InfiniteScrollCallback) {\n  const { containerEl, instance } = el[SCOPE]\n  const { disabled } = getScrollOptions(el, instance)\n\n  if (disabled) return\n\n  if (containerEl.scrollHeight <= containerEl.clientHeight) {\n    cb.call(instance)\n  } else {\n    destroyObserver(el)\n  }\n}\n\nconst InfiniteScroll: ObjectDirective<\n  InfiniteScrollEl,\n  InfiniteScrollCallback\n> = {\n  async mounted(el, binding) {\n    const { instance, value: cb } = binding\n\n    if (!isFunction(cb)) {\n      throwError(SCOPE, \"'v-infinite-scroll' binding value must be a function\")\n    }\n\n    // ensure parentNode mounted\n    await nextTick()\n\n    const { delay, immediate } = getScrollOptions(el, instance)\n    const container = getScrollContainer(el, true)\n    const containerEl =\n      container === window\n        ? document.documentElement\n        : (container as HTMLElement)\n    const onScroll = throttle(handleScroll.bind(null, el, cb), delay)\n\n    if (!container) return\n\n    el[SCOPE] = {\n      instance,\n      container,\n      containerEl,\n      delay,\n      cb,\n      onScroll,\n      lastScrollTop: containerEl.scrollTop,\n    }\n\n    if (immediate) {\n      const observer = new MutationObserver(\n        throttle(checkFull.bind(null, el, cb), CHECK_INTERVAL)\n      )\n      el[SCOPE].observer = observer\n      observer.observe(el, { childList: true, subtree: true })\n      checkFull(el, cb)\n    }\n\n    container.addEventListener('scroll', onScroll)\n  },\n  unmounted(el) {\n    const { container, onScroll } = el[SCOPE]\n\n    container?.removeEventListener('scroll', onScroll)\n    destroyObserver(el)\n  },\n}\n\nexport default InfiniteScroll\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}