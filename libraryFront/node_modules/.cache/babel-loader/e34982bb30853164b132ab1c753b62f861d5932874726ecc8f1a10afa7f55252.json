{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getCurrentInstance } from 'vue';\nfunction useStyle(props) {\n  const instance = getCurrentInstance();\n  const parent = instance.parent;\n  const storeData = parent.store.states;\n  const isCellHidden = (index, columns) => {\n    let start = 0;\n    for (let i = 0; i < index; i++) {\n      start += columns[i].colSpan;\n    }\n    const after = start + columns[index].colSpan - 1;\n    if (props.fixed === \"left\") {\n      return after >= storeData.fixedLeafColumnsLength.value;\n    } else if (props.fixed === \"right\") {\n      return start < storeData.columns.value.length - storeData.rightFixedLeafColumnsLength.value;\n    } else {\n      return after < storeData.fixedLeafColumnsLength.value || start >= storeData.columns.value.length - storeData.rightFixedLeafColumnsLength.value;\n    }\n  };\n  const getHeaderRowStyle = rowIndex => {\n    const headerRowStyle = parent.props.headerRowStyle;\n    if (typeof headerRowStyle === \"function\") {\n      return headerRowStyle.call(null, {\n        rowIndex\n      });\n    }\n    return headerRowStyle;\n  };\n  const getHeaderRowClass = rowIndex => {\n    const classes = [];\n    const headerRowClassName = parent.props.headerRowClassName;\n    if (typeof headerRowClassName === \"string\") {\n      classes.push(headerRowClassName);\n    } else if (typeof headerRowClassName === \"function\") {\n      classes.push(headerRowClassName.call(null, {\n        rowIndex\n      }));\n    }\n    return classes.join(\" \");\n  };\n  const getHeaderCellStyle = (rowIndex, columnIndex, row, column) => {\n    const headerCellStyle = parent.props.headerCellStyle;\n    if (typeof headerCellStyle === \"function\") {\n      return headerCellStyle.call(null, {\n        rowIndex,\n        columnIndex,\n        row,\n        column\n      });\n    }\n    return headerCellStyle;\n  };\n  const getHeaderCellClass = (rowIndex, columnIndex, row, column) => {\n    const classes = [column.id, column.order, column.headerAlign, column.className, column.labelClassName];\n    if (rowIndex === 0 && isCellHidden(columnIndex, row)) {\n      classes.push(\"is-hidden\");\n    }\n    if (!column.children) {\n      classes.push(\"is-leaf\");\n    }\n    if (column.sortable) {\n      classes.push(\"is-sortable\");\n    }\n    const headerCellClassName = parent.props.headerCellClassName;\n    if (typeof headerCellClassName === \"string\") {\n      classes.push(headerCellClassName);\n    } else if (typeof headerCellClassName === \"function\") {\n      classes.push(headerCellClassName.call(null, {\n        rowIndex,\n        columnIndex,\n        row,\n        column\n      }));\n    }\n    classes.push(\"el-table__cell\");\n    return classes.join(\" \");\n  };\n  return {\n    getHeaderRowStyle,\n    getHeaderRowClass,\n    getHeaderCellStyle,\n    getHeaderCellClass\n  };\n}\nexport { useStyle as default };","map":{"version":3,"names":["useStyle","props","instance","getCurrentInstance","parent","storeData","store","states","isCellHidden","index","columns","start","i","colSpan","after","fixed","fixedLeafColumnsLength","value","length","rightFixedLeafColumnsLength","getHeaderRowStyle","rowIndex","headerRowStyle","call","getHeaderRowClass","classes","headerRowClassName","push","join","getHeaderCellStyle","columnIndex","row","column","headerCellStyle","getHeaderCellClass","id","order","headerAlign","className","labelClassName","children","sortable","headerCellClassName"],"sources":["../../../../../../../packages/components/table/src/table-header/style.helper.ts"],"sourcesContent":["import { getCurrentInstance } from 'vue'\n\nimport type { TableColumnCtx } from '../table-column/defaults'\nimport type { Table } from '../table/defaults'\nimport type { TableHeaderProps } from '.'\n\nfunction useStyle<T>(props: TableHeaderProps<T>) {\n  const instance = getCurrentInstance()\n  const parent = instance.parent as Table<T>\n  const storeData = parent.store.states\n  const isCellHidden = (\n    index: number,\n    columns: TableColumnCtx<T>[]\n  ): boolean => {\n    let start = 0\n    for (let i = 0; i < index; i++) {\n      start += columns[i].colSpan\n    }\n    const after = start + columns[index].colSpan - 1\n    if (props.fixed === 'left') {\n      return after >= storeData.fixedLeafColumnsLength.value\n    } else if (props.fixed === 'right') {\n      return (\n        start <\n        storeData.columns.value.length -\n          storeData.rightFixedLeafColumnsLength.value\n      )\n    } else {\n      return (\n        after < storeData.fixedLeafColumnsLength.value ||\n        start >=\n          storeData.columns.value.length -\n            storeData.rightFixedLeafColumnsLength.value\n      )\n    }\n  }\n\n  const getHeaderRowStyle = (rowIndex: number) => {\n    const headerRowStyle = parent.props.headerRowStyle\n    if (typeof headerRowStyle === 'function') {\n      return headerRowStyle.call(null, { rowIndex })\n    }\n    return headerRowStyle\n  }\n\n  const getHeaderRowClass = (rowIndex: number): string => {\n    const classes = []\n    const headerRowClassName = parent.props.headerRowClassName\n    if (typeof headerRowClassName === 'string') {\n      classes.push(headerRowClassName)\n    } else if (typeof headerRowClassName === 'function') {\n      classes.push(headerRowClassName.call(null, { rowIndex }))\n    }\n\n    return classes.join(' ')\n  }\n\n  const getHeaderCellStyle = (\n    rowIndex: number,\n    columnIndex: number,\n    row: T,\n    column: TableColumnCtx<T>\n  ) => {\n    const headerCellStyle = parent.props.headerCellStyle\n    if (typeof headerCellStyle === 'function') {\n      return headerCellStyle.call(null, {\n        rowIndex,\n        columnIndex,\n        row,\n        column,\n      })\n    }\n    return headerCellStyle\n  }\n\n  const getHeaderCellClass = (\n    rowIndex: number,\n    columnIndex: number,\n    row: T,\n    column: TableColumnCtx<T>\n  ) => {\n    const classes = [\n      column.id,\n      column.order,\n      column.headerAlign,\n      column.className,\n      column.labelClassName,\n    ]\n    if (\n      rowIndex === 0 &&\n      isCellHidden(columnIndex, row as unknown as TableColumnCtx<T>[])\n    ) {\n      classes.push('is-hidden')\n    }\n\n    if (!column.children) {\n      classes.push('is-leaf')\n    }\n\n    if (column.sortable) {\n      classes.push('is-sortable')\n    }\n\n    const headerCellClassName = parent.props.headerCellClassName\n    if (typeof headerCellClassName === 'string') {\n      classes.push(headerCellClassName)\n    } else if (typeof headerCellClassName === 'function') {\n      classes.push(\n        headerCellClassName.call(null, {\n          rowIndex,\n          columnIndex,\n          row,\n          column,\n        })\n      )\n    }\n\n    classes.push('el-table__cell')\n\n    return classes.join(' ')\n  }\n\n  return {\n    getHeaderRowStyle,\n    getHeaderRowClass,\n    getHeaderCellStyle,\n    getHeaderCellClass,\n  }\n}\n\nexport default useStyle\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}