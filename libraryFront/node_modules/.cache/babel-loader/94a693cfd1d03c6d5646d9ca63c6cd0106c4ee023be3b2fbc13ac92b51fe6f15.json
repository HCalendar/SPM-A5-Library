{"ast":null,"code":"import { openBlock, createElementBlock, normalizeClass, normalizeStyle, renderSlot } from 'vue';\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([\"el-select-dropdown\", [{\n      \"is-multiple\": _ctx.isMultiple\n    }, _ctx.popperClass]]),\n    style: normalizeStyle({\n      [_ctx.isFitInputWidth ? \"width\" : \"minWidth\"]: _ctx.minWidth\n    })\n  }, [renderSlot(_ctx.$slots, \"default\")], 6);\n}\nexport { render };","map":{"version":3,"names":["createElementBlock","class","normalizeClass","_ctx","isMultiple","popperClass","style","normalizeStyle","isFitInputWidth","minWidth","renderSlot","$slots"],"sources":["../../../../../../packages/components/select/src/select-dropdown.vue?vue&type=template&id=46cf6eee&lang.js"],"sourcesContent":["<template>\n  <div\n    class=\"el-select-dropdown\"\n    :class=\"[{ 'is-multiple': isMultiple }, popperClass]\"\n    :style=\"{ [isFitInputWidth ? 'width' : 'minWidth']: minWidth }\"\n  >\n    <slot></slot>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  computed,\n  onMounted,\n  onBeforeUnmount,\n  inject,\n  ref,\n} from 'vue'\nimport {\n  addResizeListener,\n  removeResizeListener,\n} from '@element-plus/utils/resize-event'\nimport { selectKey } from './token'\nimport type { ResizableElement } from '@element-plus/utils/resize-event'\n\nexport default defineComponent({\n  name: 'ElSelectDropdown',\n\n  componentName: 'ElSelectDropdown',\n\n  setup() {\n    const select = inject(selectKey)\n\n    // computed\n    const popperClass = computed(() => select.props.popperClass)\n    const isMultiple = computed(() => select.props.multiple)\n    const isFitInputWidth = computed(() => select.props.fitInputWidth)\n    const minWidth = ref('')\n\n    function updateMinWidth() {\n      minWidth.value = `${\n        select.selectWrapper?.getBoundingClientRect().width\n      }px`\n    }\n\n    onMounted(() => {\n      // TODO: updatePopper\n      // popper.value.update()\n\n      addResizeListener(\n        select.selectWrapper as ResizableElement,\n        updateMinWidth\n      )\n    })\n\n    onBeforeUnmount(() => {\n      removeResizeListener(\n        select.selectWrapper as ResizableElement,\n        updateMinWidth\n      )\n    })\n\n    return {\n      minWidth,\n      popperClass,\n      isMultiple,\n      isFitInputWidth,\n    }\n  },\n})\n</script>\n"],"mappings":";;sBACEA,kBAAA;IACEC,KAAA,EAAAC,cAAA,EAAM;MAAA,eACoBC,IAAA,CAAAC;IAAA,GAAcD,IAAA,CAAAE,WAAA;IACvCC,KAAA,EAAAC,cAAA;MAAA,CAAUJ,IAAA,CAAAK,eAAA,0BAAyCL,IAAA,CAAAM;IAAA;MAEpDC,UAAA,CAAAP,IAAA,CAAAQ,MAAA,a","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}