{"ast":null,"code":"import { defineComponent, toRefs, provide, reactive, onMounted, nextTick, onBeforeUnmount, computed } from 'vue';\nimport '../../../directives/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport _Popper from '../../popper/index.mjs';\nimport { ElScrollbar } from '../../scrollbar/index.mjs';\nimport { ElTag } from '../../tag/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../utils/constants.mjs';\nimport { addResizeListener, removeResizeListener } from '../../../utils/resize-event.mjs';\nimport { isValidComponentSize } from '../../../utils/validators.mjs';\nimport { CircleClose, ArrowUp } from '@element-plus/icons-vue';\nimport './option.mjs';\nimport './select-dropdown.mjs';\nimport { useSelectStates, useSelect } from './useSelect.mjs';\nimport { selectKey } from './token.mjs';\nimport script$1 from './select-dropdown.vue_vue_type_script_lang.mjs';\nimport script$2 from './option.vue_vue_type_script_lang.mjs';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useFocus } from '../../../hooks/use-focus/index.mjs';\nimport { Effect } from '../../popper/src/use-popper/defaults.mjs';\nvar script = defineComponent({\n  name: \"ElSelect\",\n  componentName: \"ElSelect\",\n  components: {\n    ElInput,\n    ElSelectMenu: script$1,\n    ElOption: script$2,\n    ElTag,\n    ElScrollbar,\n    ElPopper: _Popper,\n    ElIcon\n  },\n  directives: {\n    ClickOutside\n  },\n  props: {\n    name: String,\n    id: String,\n    modelValue: {\n      type: [Array, String, Number, Boolean, Object],\n      default: void 0\n    },\n    autocomplete: {\n      type: String,\n      default: \"off\"\n    },\n    automaticDropdown: Boolean,\n    size: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    disabled: Boolean,\n    clearable: Boolean,\n    filterable: Boolean,\n    allowCreate: Boolean,\n    loading: Boolean,\n    popperClass: {\n      type: String,\n      default: \"\"\n    },\n    remote: Boolean,\n    loadingText: String,\n    noMatchText: String,\n    noDataText: String,\n    remoteMethod: Function,\n    filterMethod: Function,\n    multiple: Boolean,\n    multipleLimit: {\n      type: Number,\n      default: 0\n    },\n    placeholder: {\n      type: String\n    },\n    defaultFirstOption: Boolean,\n    reserveKeyword: Boolean,\n    valueKey: {\n      type: String,\n      default: \"value\"\n    },\n    collapseTags: Boolean,\n    popperAppendToBody: {\n      type: Boolean,\n      default: true\n    },\n    clearIcon: {\n      type: [String, Object],\n      default: CircleClose\n    },\n    fitInputWidth: {\n      type: Boolean,\n      default: false\n    },\n    suffixIcon: {\n      type: [String, Object],\n      default: ArrowUp\n    },\n    tagType: {\n      type: String,\n      default: \"info\"\n    }\n  },\n  emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT, \"remove-tag\", \"clear\", \"visible-change\", \"focus\", \"blur\"],\n  setup(props, ctx) {\n    const {\n      t\n    } = useLocale();\n    const states = useSelectStates(props);\n    const {\n      optionsArray,\n      selectSize,\n      readonly,\n      handleResize,\n      collapseTagSize,\n      debouncedOnInputChange,\n      debouncedQueryChange,\n      deletePrevTag,\n      deleteTag,\n      deleteSelected,\n      handleOptionSelect,\n      scrollToOption,\n      setSelected,\n      resetInputHeight,\n      managePlaceholder,\n      showClose,\n      selectDisabled,\n      iconComponent,\n      iconReverse,\n      showNewOption,\n      emptyText,\n      toggleLastOptionHitState,\n      resetInputState,\n      handleComposition,\n      onOptionCreate,\n      onOptionDestroy,\n      handleMenuEnter,\n      handleFocus,\n      blur,\n      handleBlur,\n      handleClearClick,\n      handleClose,\n      toggleMenu,\n      selectOption,\n      getValueKey,\n      navigateOptions,\n      dropMenuVisible,\n      reference,\n      input,\n      popper,\n      tags,\n      selectWrapper,\n      scrollbar,\n      queryChange,\n      groupQueryChange\n    } = useSelect(props, states, ctx);\n    const {\n      focus\n    } = useFocus(reference);\n    const {\n      inputWidth,\n      selected,\n      inputLength,\n      filteredOptionsCount,\n      visible,\n      softFocus,\n      selectedLabel,\n      hoverIndex,\n      query,\n      inputHovering,\n      currentPlaceholder,\n      menuVisibleOnFocus,\n      isOnComposition,\n      isSilentBlur,\n      options,\n      cachedOptions,\n      optionsCount,\n      prefixWidth,\n      tagInMultiLine\n    } = toRefs(states);\n    provide(selectKey, reactive({\n      props,\n      options,\n      optionsArray,\n      cachedOptions,\n      optionsCount,\n      filteredOptionsCount,\n      hoverIndex,\n      handleOptionSelect,\n      onOptionCreate,\n      onOptionDestroy,\n      selectWrapper,\n      selected,\n      setSelected,\n      queryChange,\n      groupQueryChange\n    }));\n    onMounted(() => {\n      states.cachedPlaceHolder = currentPlaceholder.value = props.placeholder || t(\"el.select.placeholder\");\n      if (props.multiple && Array.isArray(props.modelValue) && props.modelValue.length > 0) {\n        currentPlaceholder.value = \"\";\n      }\n      addResizeListener(selectWrapper.value, handleResize);\n      if (reference.value && reference.value.$el) {\n        const sizeMap = {\n          medium: 36,\n          small: 32,\n          mini: 28\n        };\n        const input2 = reference.value.input;\n        states.initialInputHeight = input2.getBoundingClientRect().height || sizeMap[selectSize.value];\n      }\n      if (props.remote && props.multiple) {\n        resetInputHeight();\n      }\n      nextTick(() => {\n        if (reference.value.$el) {\n          inputWidth.value = reference.value.$el.getBoundingClientRect().width;\n        }\n        if (ctx.slots.prefix) {\n          const inputChildNodes = reference.value.$el.childNodes;\n          const input2 = [].filter.call(inputChildNodes, item => item.tagName === \"INPUT\")[0];\n          const prefix = reference.value.$el.querySelector(\".el-input__prefix\");\n          prefixWidth.value = Math.max(prefix.getBoundingClientRect().width + 5, 30);\n          if (states.prefixWidth) {\n            input2.style.paddingLeft = `${Math.max(states.prefixWidth, 30)}px`;\n          }\n        }\n      });\n      setSelected();\n    });\n    onBeforeUnmount(() => {\n      removeResizeListener(selectWrapper.value, handleResize);\n    });\n    if (props.multiple && !Array.isArray(props.modelValue)) {\n      ctx.emit(UPDATE_MODEL_EVENT, []);\n    }\n    if (!props.multiple && Array.isArray(props.modelValue)) {\n      ctx.emit(UPDATE_MODEL_EVENT, \"\");\n    }\n    const popperPaneRef = computed(() => {\n      var _a;\n      return (_a = popper.value) == null ? void 0 : _a.popperRef;\n    });\n    return {\n      Effect,\n      tagInMultiLine,\n      prefixWidth,\n      selectSize,\n      readonly,\n      handleResize,\n      collapseTagSize,\n      debouncedOnInputChange,\n      debouncedQueryChange,\n      deletePrevTag,\n      deleteTag,\n      deleteSelected,\n      handleOptionSelect,\n      scrollToOption,\n      inputWidth,\n      selected,\n      inputLength,\n      filteredOptionsCount,\n      visible,\n      softFocus,\n      selectedLabel,\n      hoverIndex,\n      query,\n      inputHovering,\n      currentPlaceholder,\n      menuVisibleOnFocus,\n      isOnComposition,\n      isSilentBlur,\n      options,\n      resetInputHeight,\n      managePlaceholder,\n      showClose,\n      selectDisabled,\n      iconComponent,\n      iconReverse,\n      showNewOption,\n      emptyText,\n      toggleLastOptionHitState,\n      resetInputState,\n      handleComposition,\n      handleMenuEnter,\n      handleFocus,\n      blur,\n      handleBlur,\n      handleClearClick,\n      handleClose,\n      toggleMenu,\n      selectOption,\n      getValueKey,\n      navigateOptions,\n      dropMenuVisible,\n      focus,\n      reference,\n      input,\n      popper,\n      popperPaneRef,\n      tags,\n      selectWrapper,\n      scrollbar\n    };\n  }\n});\nexport { script as default };","map":{"version":3,"names":["script","defineComponent","name","componentName","components","ElInput","ElSelectMenu","script$1","ElOption","script$2","ElTag","ElScrollbar","ElPopper","_Popper","ElIcon","directives","ClickOutside","props","String","id","modelValue","type","Array","Number","Boolean","Object","default","autocomplete","automaticDropdown","size","validator","isValidComponentSize","disabled","clearable","filterable","allowCreate","loading","popperClass","remote","loadingText","noMatchText","noDataText","remoteMethod","Function","filterMethod","multiple","multipleLimit","placeholder","defaultFirstOption","reserveKeyword","valueKey","collapseTags","popperAppendToBody","clearIcon","CircleClose","fitInputWidth","suffixIcon","ArrowUp","tagType","emits","UPDATE_MODEL_EVENT","CHANGE_EVENT","setup","ctx","t","useLocale","states","useSelectStates","optionsArray","selectSize","readonly","handleResize","collapseTagSize","debouncedOnInputChange","debouncedQueryChange","deletePrevTag","deleteTag","deleteSelected","handleOptionSelect","scrollToOption","setSelected","resetInputHeight","managePlaceholder","showClose","selectDisabled","iconComponent","iconReverse","showNewOption","emptyText","toggleLastOptionHitState","resetInputState","handleComposition","onOptionCreate","onOptionDestroy","handleMenuEnter","handleFocus","blur","handleBlur","handleClearClick","handleClose","toggleMenu","selectOption","getValueKey","navigateOptions","dropMenuVisible","reference","input","popper","tags","selectWrapper","scrollbar","queryChange","groupQueryChange","useSelect","focus","useFocus","inputWidth","selected","inputLength","filteredOptionsCount","visible","softFocus","selectedLabel","hoverIndex","query","inputHovering","currentPlaceholder","menuVisibleOnFocus","isOnComposition","isSilentBlur","options","cachedOptions","optionsCount","prefixWidth","tagInMultiLine","toRefs","provide","selectKey","reactive","onMounted","cachedPlaceHolder","value","isArray","length","addResizeListener","$el","sizeMap","medium","small","mini","input2","initialInputHeight","getBoundingClientRect","height","nextTick","width","slots","prefix","inputChildNodes","childNodes","filter","call","item","tagName","querySelector","Math","max","style","paddingLeft","onBeforeUnmount","removeResizeListener","emit","popperPaneRef","computed","_a","popperRef","Effect"],"sources":["../../../../../../packages/components/select/src/select.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"selectWrapper\"\n    v-click-outside:[popperPaneRef]=\"handleClose\"\n    class=\"el-select\"\n    :class=\"[selectSize ? 'el-select--' + selectSize : '']\"\n    @click.stop=\"toggleMenu\"\n  >\n    <el-popper\n      ref=\"popper\"\n      v-model:visible=\"dropMenuVisible\"\n      placement=\"bottom-start\"\n      :append-to-body=\"popperAppendToBody\"\n      :popper-class=\"`el-select__popper ${popperClass}`\"\n      :fallback-placements=\"['bottom-start', 'top-start', 'right', 'left']\"\n      manual-mode\n      :effect=\"Effect.LIGHT\"\n      pure\n      trigger=\"click\"\n      transition=\"el-zoom-in-top\"\n      :stop-popper-mouse-event=\"false\"\n      :gpu-acceleration=\"false\"\n      @before-enter=\"handleMenuEnter\"\n    >\n      <template #trigger>\n        <div class=\"select-trigger\">\n          <div\n            v-if=\"multiple\"\n            ref=\"tags\"\n            class=\"el-select__tags\"\n            :style=\"{ maxWidth: inputWidth - 32 + 'px', width: '100%' }\"\n          >\n            <span v-if=\"collapseTags && selected.length\">\n              <el-tag\n                :closable=\"!selectDisabled && !selected[0].isDisabled\"\n                :size=\"collapseTagSize\"\n                :hit=\"selected[0].hitState\"\n                :type=\"tagType\"\n                disable-transitions\n                @close=\"deleteTag($event, selected[0])\"\n              >\n                <span\n                  class=\"el-select__tags-text\"\n                  :style=\"{ maxWidth: inputWidth - 123 + 'px' }\"\n                  >{{ selected[0].currentLabel }}</span\n                >\n              </el-tag>\n              <el-tag\n                v-if=\"selected.length > 1\"\n                :closable=\"false\"\n                :size=\"collapseTagSize\"\n                :type=\"tagType\"\n                disable-transitions\n              >\n                <span class=\"el-select__tags-text\"\n                  >+ {{ selected.length - 1 }}</span\n                >\n              </el-tag>\n            </span>\n            <!-- <div> -->\n            <transition v-if=\"!collapseTags\" @after-leave=\"resetInputHeight\">\n              <span\n                :style=\"{\n                  marginLeft:\n                    prefixWidth && selected.length ? `${prefixWidth}px` : null,\n                }\"\n              >\n                <el-tag\n                  v-for=\"item in selected\"\n                  :key=\"getValueKey(item)\"\n                  :closable=\"!selectDisabled && !item.isDisabled\"\n                  :size=\"collapseTagSize\"\n                  :hit=\"item.hitState\"\n                  :type=\"tagType\"\n                  disable-transitions\n                  @close=\"deleteTag($event, item)\"\n                >\n                  <span\n                    class=\"el-select__tags-text\"\n                    :style=\"{ maxWidth: inputWidth - 75 + 'px' }\"\n                    >{{ item.currentLabel }}</span\n                  >\n                </el-tag>\n              </span>\n            </transition>\n            <!-- </div> -->\n            <input\n              v-if=\"filterable\"\n              ref=\"input\"\n              v-model=\"query\"\n              type=\"text\"\n              class=\"el-select__input\"\n              :class=\"[selectSize ? `is-${selectSize}` : '']\"\n              :disabled=\"selectDisabled\"\n              :autocomplete=\"autocomplete\"\n              :style=\"{\n                marginLeft:\n                  (prefixWidth && !selected.length) || tagInMultiLine\n                    ? `${prefixWidth}px`\n                    : null,\n                flexGrow: '1',\n                width: `${inputLength / (inputWidth - 32)}%`,\n                maxWidth: `${inputWidth - 42}px`,\n              }\"\n              @focus=\"handleFocus\"\n              @blur=\"handleBlur\"\n              @keyup=\"managePlaceholder\"\n              @keydown=\"resetInputState\"\n              @keydown.down.prevent=\"navigateOptions('next')\"\n              @keydown.up.prevent=\"navigateOptions('prev')\"\n              @keydown.esc.stop.prevent=\"visible = false\"\n              @keydown.enter.stop.prevent=\"selectOption\"\n              @keydown.delete=\"deletePrevTag\"\n              @keydown.tab=\"visible = false\"\n              @compositionstart=\"handleComposition\"\n              @compositionupdate=\"handleComposition\"\n              @compositionend=\"handleComposition\"\n              @input=\"debouncedQueryChange\"\n            />\n          </div>\n          <el-input\n            :id=\"id\"\n            ref=\"reference\"\n            v-model=\"selectedLabel\"\n            type=\"text\"\n            :placeholder=\"currentPlaceholder\"\n            :name=\"name\"\n            :autocomplete=\"autocomplete\"\n            :size=\"selectSize\"\n            :disabled=\"selectDisabled\"\n            :readonly=\"readonly\"\n            :validate-event=\"false\"\n            :class=\"{ 'is-focus': visible }\"\n            :tabindex=\"multiple && filterable ? '-1' : null\"\n            @focus=\"handleFocus\"\n            @blur=\"handleBlur\"\n            @input=\"debouncedOnInputChange\"\n            @paste=\"debouncedOnInputChange\"\n            @compositionstart=\"handleComposition\"\n            @compositionupdate=\"handleComposition\"\n            @compositionend=\"handleComposition\"\n            @keydown.down.stop.prevent=\"navigateOptions('next')\"\n            @keydown.up.stop.prevent=\"navigateOptions('prev')\"\n            @keydown.enter.stop.prevent=\"selectOption\"\n            @keydown.esc.stop.prevent=\"visible = false\"\n            @keydown.tab=\"visible = false\"\n            @mouseenter=\"inputHovering = true\"\n            @mouseleave=\"inputHovering = false\"\n          >\n            <template v-if=\"$slots.prefix\" #prefix>\n              <div\n                style=\"\n                  height: 100%;\n                  display: flex;\n                  justify-content: center;\n                  align-items: center;\n                \"\n              >\n                <slot name=\"prefix\"></slot>\n              </div>\n            </template>\n            <template #suffix>\n              <el-icon\n                v-if=\"iconComponent\"\n                v-show=\"!showClose\"\n                :class=\"['el-select__caret', 'el-input__icon', iconReverse]\"\n              >\n                <component :is=\"iconComponent\" />\n              </el-icon>\n              <el-icon\n                v-if=\"showClose && clearIcon\"\n                class=\"el-select__caret el-input__icon\"\n                @click=\"handleClearClick\"\n              >\n                <component :is=\"clearIcon\" />\n              </el-icon>\n            </template>\n          </el-input>\n        </div>\n      </template>\n      <template #default>\n        <el-select-menu>\n          <el-scrollbar\n            v-show=\"options.size > 0 && !loading\"\n            ref=\"scrollbar\"\n            tag=\"ul\"\n            wrap-class=\"el-select-dropdown__wrap\"\n            view-class=\"el-select-dropdown__list\"\n            :class=\"{\n              'is-empty': !allowCreate && query && filteredOptionsCount === 0,\n            }\"\n          >\n            <el-option v-if=\"showNewOption\" :value=\"query\" :created=\"true\" />\n            <slot></slot>\n          </el-scrollbar>\n          <template\n            v-if=\"\n              emptyText &&\n              (!allowCreate || loading || (allowCreate && options.size === 0))\n            \"\n          >\n            <slot v-if=\"$slots.empty\" name=\"empty\"></slot>\n            <p v-else class=\"el-select-dropdown__empty\">\n              {{ emptyText }}\n            </p>\n          </template>\n        </el-select-menu>\n      </template>\n    </el-popper>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  toRefs,\n  defineComponent,\n  onMounted,\n  onBeforeUnmount,\n  nextTick,\n  reactive,\n  provide,\n  computed,\n} from 'vue'\nimport { ClickOutside } from '@element-plus/directives'\nimport { useFocus, useLocale } from '@element-plus/hooks'\nimport ElInput from '@element-plus/components/input'\nimport ElPopper, { Effect } from '@element-plus/components/popper'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElTag from '@element-plus/components/tag'\nimport ElIcon from '@element-plus/components/icon'\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '@element-plus/utils/constants'\nimport {\n  addResizeListener,\n  removeResizeListener,\n} from '@element-plus/utils/resize-event'\nimport { isValidComponentSize } from '@element-plus/utils/validators'\nimport { CircleClose, ArrowUp } from '@element-plus/icons-vue'\nimport ElOption from './option.vue'\nimport ElSelectMenu from './select-dropdown.vue'\nimport { useSelect, useSelectStates } from './useSelect'\nimport { selectKey } from './token'\n\nimport type { PropType, Component } from 'vue'\nimport type { ComponentSize } from '@element-plus/utils/types'\nimport type { SelectContext } from './token'\n\nexport default defineComponent({\n  name: 'ElSelect',\n  componentName: 'ElSelect',\n  components: {\n    ElInput,\n    ElSelectMenu,\n    ElOption,\n    ElTag,\n    ElScrollbar,\n    ElPopper,\n    ElIcon,\n  },\n  directives: { ClickOutside },\n  props: {\n    name: String,\n    id: String,\n    modelValue: {\n      type: [Array, String, Number, Boolean, Object],\n      default: undefined,\n    },\n    autocomplete: {\n      type: String,\n      default: 'off',\n    },\n    automaticDropdown: Boolean,\n    size: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    disabled: Boolean,\n    clearable: Boolean,\n    filterable: Boolean,\n    allowCreate: Boolean,\n    loading: Boolean,\n    popperClass: {\n      type: String,\n      default: '',\n    },\n    remote: Boolean,\n    loadingText: String,\n    noMatchText: String,\n    noDataText: String,\n    remoteMethod: Function,\n    filterMethod: Function,\n    multiple: Boolean,\n    multipleLimit: {\n      type: Number,\n      default: 0,\n    },\n    placeholder: {\n      type: String,\n    },\n    defaultFirstOption: Boolean,\n    reserveKeyword: Boolean,\n    valueKey: {\n      type: String,\n      default: 'value',\n    },\n    collapseTags: Boolean,\n    popperAppendToBody: {\n      type: Boolean,\n      default: true,\n    },\n    clearIcon: {\n      type: [String, Object] as PropType<string | Component>,\n      default: CircleClose,\n    },\n    fitInputWidth: {\n      type: Boolean,\n      default: false,\n    },\n    suffixIcon: {\n      type: [String, Object] as PropType<string | Component>,\n      default: ArrowUp,\n    },\n    tagType: {\n      type: String,\n      default: 'info',\n    },\n  },\n  emits: [\n    UPDATE_MODEL_EVENT,\n    CHANGE_EVENT,\n    'remove-tag',\n    'clear',\n    'visible-change',\n    'focus',\n    'blur',\n  ],\n\n  setup(props, ctx) {\n    const { t } = useLocale()\n    const states = useSelectStates(props)\n    const {\n      optionsArray,\n      selectSize,\n      readonly,\n      handleResize,\n      collapseTagSize,\n      debouncedOnInputChange,\n      debouncedQueryChange,\n      deletePrevTag,\n      deleteTag,\n      deleteSelected,\n      handleOptionSelect,\n      scrollToOption,\n      setSelected,\n      resetInputHeight,\n      managePlaceholder,\n      showClose,\n      selectDisabled,\n      iconComponent,\n      iconReverse,\n      showNewOption,\n      emptyText,\n      toggleLastOptionHitState,\n      resetInputState,\n      handleComposition,\n      onOptionCreate,\n      onOptionDestroy,\n      handleMenuEnter,\n      handleFocus,\n      blur,\n      handleBlur,\n      handleClearClick,\n      handleClose,\n      toggleMenu,\n      selectOption,\n      getValueKey,\n      navigateOptions,\n      dropMenuVisible,\n\n      reference,\n      input,\n      popper,\n      tags,\n      selectWrapper,\n      scrollbar,\n      queryChange,\n      groupQueryChange,\n    } = useSelect(props, states, ctx)\n\n    const { focus } = useFocus(reference)\n\n    const {\n      inputWidth,\n      selected,\n      inputLength,\n      filteredOptionsCount,\n      visible,\n      softFocus,\n      selectedLabel,\n      hoverIndex,\n      query,\n      inputHovering,\n      currentPlaceholder,\n      menuVisibleOnFocus,\n      isOnComposition,\n      isSilentBlur,\n      options,\n      cachedOptions,\n      optionsCount,\n      prefixWidth,\n      tagInMultiLine,\n    } = toRefs(states)\n\n    provide(\n      selectKey,\n      reactive({\n        props,\n        options,\n        optionsArray,\n        cachedOptions,\n        optionsCount,\n        filteredOptionsCount,\n        hoverIndex,\n        handleOptionSelect,\n        onOptionCreate,\n        onOptionDestroy,\n        selectWrapper,\n        selected,\n        setSelected,\n        queryChange,\n        groupQueryChange,\n      }) as unknown as SelectContext\n    )\n\n    onMounted(() => {\n      states.cachedPlaceHolder = currentPlaceholder.value =\n        props.placeholder || t('el.select.placeholder')\n      if (\n        props.multiple &&\n        Array.isArray(props.modelValue) &&\n        props.modelValue.length > 0\n      ) {\n        currentPlaceholder.value = ''\n      }\n      addResizeListener(selectWrapper.value as any, handleResize)\n      if (reference.value && reference.value.$el) {\n        const sizeMap = {\n          medium: 36,\n          small: 32,\n          mini: 28,\n        }\n        const input = reference.value.input\n        states.initialInputHeight =\n          input.getBoundingClientRect().height || sizeMap[selectSize.value]\n      }\n      if (props.remote && props.multiple) {\n        resetInputHeight()\n      }\n      nextTick(() => {\n        if (reference.value.$el) {\n          inputWidth.value = reference.value.$el.getBoundingClientRect().width\n        }\n        if (ctx.slots.prefix) {\n          const inputChildNodes = reference.value.$el.childNodes\n          const input = [].filter.call(\n            inputChildNodes,\n            (item) => item.tagName === 'INPUT'\n          )[0]\n          const prefix = reference.value.$el.querySelector('.el-input__prefix')\n          prefixWidth.value = Math.max(\n            prefix.getBoundingClientRect().width + 5,\n            30\n          )\n          if (states.prefixWidth) {\n            input.style.paddingLeft = `${Math.max(states.prefixWidth, 30)}px`\n          }\n        }\n      })\n      setSelected()\n    })\n\n    onBeforeUnmount(() => {\n      removeResizeListener(selectWrapper.value as any, handleResize)\n    })\n\n    if (props.multiple && !Array.isArray(props.modelValue)) {\n      ctx.emit(UPDATE_MODEL_EVENT, [])\n    }\n    if (!props.multiple && Array.isArray(props.modelValue)) {\n      ctx.emit(UPDATE_MODEL_EVENT, '')\n    }\n\n    const popperPaneRef = computed(() => {\n      return popper.value?.popperRef\n    })\n\n    return {\n      Effect,\n      tagInMultiLine,\n      prefixWidth,\n      selectSize,\n      readonly,\n      handleResize,\n      collapseTagSize,\n      debouncedOnInputChange,\n      debouncedQueryChange,\n      deletePrevTag,\n      deleteTag,\n      deleteSelected,\n      handleOptionSelect,\n      scrollToOption,\n      inputWidth,\n      selected,\n      inputLength,\n      filteredOptionsCount,\n      visible,\n      softFocus,\n      selectedLabel,\n      hoverIndex,\n      query,\n      inputHovering,\n      currentPlaceholder,\n      menuVisibleOnFocus,\n      isOnComposition,\n      isSilentBlur,\n      options,\n      resetInputHeight,\n      managePlaceholder,\n      showClose,\n      selectDisabled,\n      iconComponent,\n      iconReverse,\n      showNewOption,\n      emptyText,\n      toggleLastOptionHitState,\n      resetInputState,\n      handleComposition,\n      handleMenuEnter,\n      handleFocus,\n      blur,\n      handleBlur,\n      handleClearClick,\n      handleClose,\n      toggleMenu,\n      selectOption,\n      getValueKey,\n      navigateOptions,\n      dropMenuVisible,\n      focus,\n\n      reference,\n      input,\n      popper,\n      popperPaneRef,\n      tags,\n      selectWrapper,\n      scrollbar,\n    }\n  },\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}