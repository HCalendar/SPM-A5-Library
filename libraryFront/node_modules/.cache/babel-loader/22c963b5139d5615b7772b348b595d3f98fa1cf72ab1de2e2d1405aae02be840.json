{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport isEqual from 'lodash/isEqual';\nimport Node from './node.mjs';\nconst flatNodes = (nodes, leafOnly) => {\n  return nodes.reduce((res, node) => {\n    if (node.isLeaf) {\n      res.push(node);\n    } else {\n      !leafOnly && res.push(node);\n      res = res.concat(flatNodes(node.children, leafOnly));\n    }\n    return res;\n  }, []);\n};\nclass Store {\n  constructor(data, config) {\n    this.config = config;\n    const nodes = (data || []).map(nodeData => new Node(nodeData, this.config));\n    this.nodes = nodes;\n    this.allNodes = flatNodes(nodes, false);\n    this.leafNodes = flatNodes(nodes, true);\n  }\n  getNodes() {\n    return this.nodes;\n  }\n  getFlattedNodes(leafOnly) {\n    return leafOnly ? this.leafNodes : this.allNodes;\n  }\n  appendNode(nodeData, parentNode) {\n    const node = parentNode ? parentNode.appendChild(nodeData) : new Node(nodeData, this.config);\n    if (!parentNode) this.nodes.push(node);\n    this.allNodes.push(node);\n    node.isLeaf && this.leafNodes.push(node);\n  }\n  appendNodes(nodeDataList, parentNode) {\n    nodeDataList.forEach(nodeData => this.appendNode(nodeData, parentNode));\n  }\n  getNodeByValue(value, leafOnly = false) {\n    if (!value && value !== 0) return null;\n    const nodes = this.getFlattedNodes(leafOnly).filter(node => isEqual(node.value, value) || isEqual(node.pathValues, value));\n    return nodes[0] || null;\n  }\n  getSameNode(node) {\n    if (!node) return null;\n    const nodes = this.getFlattedNodes(false).filter(({\n      value,\n      level\n    }) => isEqual(node.value, value) && node.level === level);\n    return nodes[0] || null;\n  }\n}\nexport { Store as default };","map":{"version":3,"names":["flatNodes","nodes","leafOnly","reduce","res","node","isLeaf","push","concat","children","constructor","data","config","map","nodeData","Node","allNodes","leafNodes","getNodes","getFlattedNodes","appendNode","parentNode","appendChild","appendNodes","nodeDataList","forEach","getNodeByValue","value","filter","isEqual","pathValues","getSameNode","level"],"sources":["../../../../../../packages/components/cascader-panel/src/store.ts"],"sourcesContent":["import isEqual from 'lodash/isEqual'\nimport Node from './node'\n\nimport type { Nullable } from '@element-plus/utils/types'\nimport type {\n  CascaderNodeValue,\n  CascaderNodePathValue,\n  CascaderOption,\n  CascaderConfig,\n} from './node'\n\nconst flatNodes = (nodes: Node[], leafOnly: boolean) => {\n  return nodes.reduce((res, node) => {\n    if (node.isLeaf) {\n      res.push(node)\n    } else {\n      !leafOnly && res.push(node)\n      res = res.concat(flatNodes(node.children, leafOnly))\n    }\n    return res\n  }, [] as Node[])\n}\n\nexport default class Store {\n  readonly nodes: Node[]\n  readonly allNodes: Node[]\n  readonly leafNodes: Node[]\n\n  constructor(data: CascaderOption[], readonly config: CascaderConfig) {\n    const nodes = (data || []).map(\n      (nodeData) => new Node(nodeData, this.config)\n    )\n    this.nodes = nodes\n    this.allNodes = flatNodes(nodes, false)\n    this.leafNodes = flatNodes(nodes, true)\n  }\n\n  getNodes() {\n    return this.nodes\n  }\n\n  getFlattedNodes(leafOnly: boolean) {\n    return leafOnly ? this.leafNodes : this.allNodes\n  }\n\n  appendNode(nodeData: CascaderOption, parentNode?: Node) {\n    const node = parentNode\n      ? parentNode.appendChild(nodeData)\n      : new Node(nodeData, this.config)\n\n    if (!parentNode) this.nodes.push(node)\n\n    this.allNodes.push(node)\n    node.isLeaf && this.leafNodes.push(node)\n  }\n\n  appendNodes(nodeDataList: CascaderOption[], parentNode: Node) {\n    nodeDataList.forEach((nodeData) => this.appendNode(nodeData, parentNode))\n  }\n\n  // when checkStrictly, leaf node first\n  getNodeByValue(\n    value: CascaderNodeValue | CascaderNodePathValue,\n    leafOnly = false\n  ): Nullable<Node> {\n    if (!value && value !== 0) return null\n\n    const nodes = this.getFlattedNodes(leafOnly).filter(\n      (node) => isEqual(node.value, value) || isEqual(node.pathValues, value)\n    )\n\n    return nodes[0] || null\n  }\n\n  getSameNode(node: Node): Nullable<Node> {\n    if (!node) return null\n\n    const nodes = this.getFlattedNodes(false).filter(\n      ({ value, level }) => isEqual(node.value, value) && node.level === level\n    )\n\n    return nodes[0] || null\n  }\n}\n"],"mappings":";;;AAWA,MAAMA,SAAA,GAAYA,CAACC,KAAA,EAAeC,QAAA,KAAsB;EACtD,OAAOD,KAAA,CAAME,MAAA,CAAO,CAACC,GAAA,EAAKC,IAAA,KAAS;IACjC,IAAIA,IAAA,CAAKC,MAAA,EAAQ;MACfF,GAAA,CAAIG,IAAA,CAAKF,IAAA;IAAA,OACJ;MACL,CAACH,QAAA,IAAYE,GAAA,CAAIG,IAAA,CAAKF,IAAA;MACtBD,GAAA,GAAMA,GAAA,CAAII,MAAA,CAAOR,SAAA,CAAUK,IAAA,CAAKI,QAAA,EAAUP,QAAA;IAAA;IAE5C,OAAOE,GAAA;EAAA,GACN;AAAA;YAGsB;EAKzBM,YAAYC,IAAA,EAAiCC,MAAA,EAAwB;IAAxB,KAAAA,MAAA,GAAAA,MAAA;IAC3C,MAAMX,KAAA,GAAS,CAAAU,IAAA,IAAQ,IAAIE,GAAA,CACxBC,QAAA,IAAa,IAAIC,IAAA,CAAKD,QAAA,EAAU,KAAKF,MAAA;IAExC,KAAKX,KAAA,GAAQA,KAAA;IACb,KAAKe,QAAA,GAAWhB,SAAA,CAAUC,KAAA,EAAO;IACjC,KAAKgB,SAAA,GAAYjB,SAAA,CAAUC,KAAA,EAAO;EAAA;EAGpCiB,SAAA,EAAW;IACT,OAAO,KAAKjB,KAAA;EAAA;EAGdkB,gBAAgBjB,QAAA,EAAmB;IACjC,OAAOA,QAAA,GAAW,KAAKe,SAAA,GAAY,KAAKD,QAAA;EAAA;EAG1CI,WAAWN,QAAA,EAA0BO,UAAA,EAAmB;IACtD,MAAMhB,IAAA,GAAOgB,UAAA,GACTA,UAAA,CAAWC,WAAA,CAAYR,QAAA,IACvB,IAAIC,IAAA,CAAKD,QAAA,EAAU,KAAKF,MAAA;IAE5B,IAAI,CAACS,UAAA,EAAY,KAAKpB,KAAA,CAAMM,IAAA,CAAKF,IAAA;IAEjC,KAAKW,QAAA,CAAST,IAAA,CAAKF,IAAA;IACnBA,IAAA,CAAKC,MAAA,IAAU,KAAKW,SAAA,CAAUV,IAAA,CAAKF,IAAA;EAAA;EAGrCkB,YAAYC,YAAA,EAAgCH,UAAA,EAAkB;IAC5DG,YAAA,CAAaC,OAAA,CAASX,QAAA,IAAa,KAAKM,UAAA,CAAWN,QAAA,EAAUO,UAAA;EAAA;EAI/DK,eACEC,KAAA,EACAzB,QAAA,GAAW,OACK;IAChB,IAAI,CAACyB,KAAA,IAASA,KAAA,KAAU,GAAG,OAAO;IAElC,MAAM1B,KAAA,GAAQ,KAAKkB,eAAA,CAAgBjB,QAAA,EAAU0B,MAAA,CAC1CvB,IAAA,IAASwB,OAAA,CAAQxB,IAAA,CAAKsB,KAAA,EAAOA,KAAA,KAAUE,OAAA,CAAQxB,IAAA,CAAKyB,UAAA,EAAYH,KAAA;IAGnE,OAAO1B,KAAA,CAAM,MAAM;EAAA;EAGrB8B,YAAY1B,IAAA,EAA4B;IACtC,IAAI,CAACA,IAAA,EAAM,OAAO;IAElB,MAAMJ,KAAA,GAAQ,KAAKkB,eAAA,CAAgB,OAAOS,MAAA,CACxC,CAAC;MAAED,KAAA;MAAOK;IAAA,MAAYH,OAAA,CAAQxB,IAAA,CAAKsB,KAAA,EAAOA,KAAA,KAAUtB,IAAA,CAAK2B,KAAA,KAAUA,KAAA;IAGrE,OAAO/B,KAAA,CAAM,MAAM;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}