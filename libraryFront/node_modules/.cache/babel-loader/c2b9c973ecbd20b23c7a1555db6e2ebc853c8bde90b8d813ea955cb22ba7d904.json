{"ast":null,"code":"import { defineComponent, inject, reactive, ref, computed, watch, h, toRefs } from 'vue';\nimport { ElButton } from '../../button/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../utils/constants.mjs';\nimport { ArrowLeft, ArrowRight } from '@element-plus/icons-vue';\nimport './transfer-panel.mjs';\nimport { useComputedData } from './useComputedData.mjs';\nimport { LEFT_CHECK_CHANGE_EVENT, RIGHT_CHECK_CHANGE_EVENT, useCheckedChange } from './useCheckedChange.mjs';\nimport { useMove } from './useMove.mjs';\nimport './transfer.mjs';\nimport script$1 from './transfer-panel.vue_vue_type_script_lang.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { elFormItemKey } from '../../../tokens/form.mjs';\nvar script = defineComponent({\n  name: \"ElTransfer\",\n  components: {\n    TransferPanel: script$1,\n    ElButton,\n    ElIcon,\n    ArrowLeft,\n    ArrowRight\n  },\n  props: {\n    data: {\n      type: Array,\n      default: () => []\n    },\n    titles: {\n      type: Array,\n      default: () => []\n    },\n    buttonTexts: {\n      type: Array,\n      default: () => []\n    },\n    filterPlaceholder: {\n      type: String,\n      default: \"\"\n    },\n    filterMethod: Function,\n    leftDefaultChecked: {\n      type: Array,\n      default: () => []\n    },\n    rightDefaultChecked: {\n      type: Array,\n      default: () => []\n    },\n    renderContent: Function,\n    modelValue: {\n      type: Array,\n      default: () => []\n    },\n    format: {\n      type: Object,\n      default: () => ({})\n    },\n    filterable: {\n      type: Boolean,\n      default: false\n    },\n    props: {\n      type: Object,\n      default: () => ({\n        label: \"label\",\n        key: \"key\",\n        disabled: \"disabled\"\n      })\n    },\n    targetOrder: {\n      type: String,\n      default: \"original\",\n      validator: val => {\n        return [\"original\", \"push\", \"unshift\"].includes(val);\n      }\n    }\n  },\n  emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT, LEFT_CHECK_CHANGE_EVENT, RIGHT_CHECK_CHANGE_EVENT],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const {\n      t\n    } = useLocale();\n    const elFormItem = inject(elFormItemKey, {});\n    const checkedState = reactive({\n      leftChecked: [],\n      rightChecked: []\n    });\n    const {\n      propsKey,\n      sourceData,\n      targetData\n    } = useComputedData(props);\n    const {\n      onSourceCheckedChange,\n      onTargetCheckedChange\n    } = useCheckedChange(checkedState, emit);\n    const {\n      addToLeft,\n      addToRight\n    } = useMove(props, checkedState, propsKey, emit);\n    const leftPanel = ref(null);\n    const rightPanel = ref(null);\n    const clearQuery = which => {\n      if (which === \"left\") {\n        leftPanel.value.query = \"\";\n      } else if (which === \"right\") {\n        rightPanel.value.query = \"\";\n      }\n    };\n    const hasButtonTexts = computed(() => props.buttonTexts.length === 2);\n    const leftPanelTitle = computed(() => props.titles[0] || t(\"el.transfer.titles.0\"));\n    const rightPanelTitle = computed(() => props.titles[1] || t(\"el.transfer.titles.1\"));\n    const panelFilterPlaceholder = computed(() => props.filterPlaceholder || t(\"el.transfer.filterPlaceholder\"));\n    watch(() => props.modelValue, () => {\n      var _a;\n      (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\");\n    });\n    const optionRender = computed(() => option => {\n      if (props.renderContent) return props.renderContent(h, option);\n      if (slots.default) return slots.default({\n        option\n      });\n      return h(\"span\", option[props.props.label] || option[props.props.key]);\n    });\n    return {\n      sourceData,\n      targetData,\n      onSourceCheckedChange,\n      onTargetCheckedChange,\n      addToLeft,\n      addToRight,\n      ...toRefs(checkedState),\n      hasButtonTexts,\n      leftPanelTitle,\n      rightPanelTitle,\n      panelFilterPlaceholder,\n      clearQuery,\n      optionRender\n    };\n  }\n});\nexport { script as default };","map":{"version":3,"names":["script","defineComponent","name","components","TransferPanel","script$1","ElButton","ElIcon","ArrowLeft","ArrowRight","props","data","type","Array","default","titles","buttonTexts","filterPlaceholder","String","filterMethod","Function","leftDefaultChecked","rightDefaultChecked","renderContent","modelValue","format","Object","filterable","Boolean","label","key","disabled","targetOrder","validator","val","includes","emits","UPDATE_MODEL_EVENT","CHANGE_EVENT","LEFT_CHECK_CHANGE_EVENT","RIGHT_CHECK_CHANGE_EVENT","setup","emit","slots","t","useLocale","elFormItem","inject","elFormItemKey","checkedState","reactive","leftChecked","rightChecked","propsKey","sourceData","targetData","useComputedData","onSourceCheckedChange","onTargetCheckedChange","useCheckedChange","addToLeft","addToRight","useMove","leftPanel","ref","rightPanel","clearQuery","which","value","query","hasButtonTexts","computed","length","leftPanelTitle","rightPanelTitle","panelFilterPlaceholder","watch","_a","validate","call","optionRender","option","h","toRefs"],"sources":["../../../../../../packages/components/transfer/src/index.vue"],"sourcesContent":["<template>\n  <div class=\"el-transfer\">\n    <transfer-panel\n      ref=\"leftPanel\"\n      :data=\"sourceData\"\n      :option-render=\"optionRender\"\n      :placeholder=\"panelFilterPlaceholder\"\n      :title=\"leftPanelTitle\"\n      :filterable=\"filterable\"\n      :format=\"format\"\n      :filter-method=\"filterMethod\"\n      :default-checked=\"leftDefaultChecked\"\n      :props=\"props\"\n      @checked-change=\"onSourceCheckedChange\"\n    >\n      <slot name=\"left-footer\"></slot>\n    </transfer-panel>\n    <div class=\"el-transfer__buttons\">\n      <el-button\n        type=\"primary\"\n        :class=\"['el-transfer__button', hasButtonTexts ? 'is-with-texts' : '']\"\n        :disabled=\"rightChecked.length === 0\"\n        @click=\"addToLeft\"\n      >\n        <el-icon><arrow-left /></el-icon>\n        <span v-if=\"buttonTexts[0] !== undefined\">{{ buttonTexts[0] }}</span>\n      </el-button>\n      <el-button\n        type=\"primary\"\n        :class=\"['el-transfer__button', hasButtonTexts ? 'is-with-texts' : '']\"\n        :disabled=\"leftChecked.length === 0\"\n        @click=\"addToRight\"\n      >\n        <span v-if=\"buttonTexts[1] !== undefined\">{{ buttonTexts[1] }}</span>\n        <el-icon><arrow-right /></el-icon>\n      </el-button>\n    </div>\n    <transfer-panel\n      ref=\"rightPanel\"\n      :data=\"targetData\"\n      :option-render=\"optionRender\"\n      :placeholder=\"panelFilterPlaceholder\"\n      :filterable=\"filterable\"\n      :format=\"format\"\n      :filter-method=\"filterMethod\"\n      :title=\"rightPanelTitle\"\n      :default-checked=\"rightDefaultChecked\"\n      :props=\"props\"\n      @checked-change=\"onTargetCheckedChange\"\n    >\n      <slot name=\"right-footer\"></slot>\n    </transfer-panel>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  inject,\n  h,\n  reactive,\n  ref,\n  toRefs,\n  watch,\n} from 'vue'\nimport ElButton from '@element-plus/components/button'\nimport ElIcon from '@element-plus/components/icon'\nimport { elFormItemKey } from '@element-plus/tokens'\nimport { useLocale } from '@element-plus/hooks'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/utils/constants'\nimport { ArrowLeft, ArrowRight } from '@element-plus/icons-vue'\nimport TransferPanel from './transfer-panel.vue'\nimport { useComputedData } from './useComputedData'\nimport {\n  useCheckedChange,\n  LEFT_CHECK_CHANGE_EVENT,\n  RIGHT_CHECK_CHANGE_EVENT,\n} from './useCheckedChange'\nimport { useMove } from './useMove'\nimport { CHANGE_EVENT } from './transfer'\n\nimport type { PropType, VNode } from 'vue'\nimport type { ElFormItemContext } from '@element-plus/tokens'\nimport type { DataItem, Format, Key, Props, TargetOrder } from './transfer'\n\nexport default defineComponent({\n  name: 'ElTransfer',\n\n  components: {\n    TransferPanel,\n    ElButton,\n    ElIcon,\n    ArrowLeft,\n    ArrowRight,\n  },\n\n  props: {\n    data: {\n      type: Array as PropType<DataItem[]>,\n      default: () => [],\n    },\n    titles: {\n      type: Array as PropType<any> as PropType<[string, string]>,\n      default: () => [],\n    },\n    buttonTexts: {\n      type: Array as PropType<any> as PropType<[string, string]>,\n      default: () => [],\n    },\n    filterPlaceholder: {\n      type: String,\n      default: '',\n    },\n    filterMethod: Function as PropType<\n      (query: string, item: DataItem) => boolean\n    >,\n    leftDefaultChecked: {\n      type: Array as PropType<Key[]>,\n      default: () => [],\n    },\n    rightDefaultChecked: {\n      type: Array as PropType<Key[]>,\n      default: () => [],\n    },\n    renderContent: Function as PropType<(h, option) => VNode>,\n    modelValue: {\n      type: Array as PropType<Key[]>,\n      default: () => [],\n    },\n    format: {\n      type: Object as PropType<Format>,\n      default: () => ({}),\n    },\n    filterable: {\n      type: Boolean,\n      default: false,\n    },\n    props: {\n      type: Object as PropType<Props>,\n      default: () => ({\n        label: 'label',\n        key: 'key',\n        disabled: 'disabled',\n      }),\n    },\n    targetOrder: {\n      type: String as PropType<TargetOrder>,\n      default: 'original',\n      validator: (val: string) => {\n        return ['original', 'push', 'unshift'].includes(val)\n      },\n    },\n  },\n\n  emits: [\n    UPDATE_MODEL_EVENT,\n    CHANGE_EVENT,\n    LEFT_CHECK_CHANGE_EVENT,\n    RIGHT_CHECK_CHANGE_EVENT,\n  ],\n\n  setup(props, { emit, slots }) {\n    const { t } = useLocale()\n    const elFormItem = inject(elFormItemKey, {} as ElFormItemContext)\n\n    const checkedState = reactive({\n      leftChecked: [],\n      rightChecked: [],\n    })\n\n    const { propsKey, sourceData, targetData } = useComputedData(props)\n\n    const { onSourceCheckedChange, onTargetCheckedChange } = useCheckedChange(\n      checkedState,\n      emit\n    )\n\n    const { addToLeft, addToRight } = useMove(\n      props,\n      checkedState,\n      propsKey,\n      emit\n    )\n\n    const leftPanel = ref(null)\n    const rightPanel = ref(null)\n\n    const clearQuery = (which: 'left' | 'right') => {\n      if (which === 'left') {\n        leftPanel.value.query = ''\n      } else if (which === 'right') {\n        rightPanel.value.query = ''\n      }\n    }\n\n    const hasButtonTexts = computed(() => props.buttonTexts.length === 2)\n\n    const leftPanelTitle = computed(\n      () => props.titles[0] || t('el.transfer.titles.0')\n    )\n\n    const rightPanelTitle = computed(\n      () => props.titles[1] || t('el.transfer.titles.1')\n    )\n\n    const panelFilterPlaceholder = computed(\n      () => props.filterPlaceholder || t('el.transfer.filterPlaceholder')\n    )\n\n    watch(\n      () => props.modelValue,\n      () => {\n        elFormItem.validate?.('change')\n      }\n    )\n\n    const optionRender = computed(() => (option) => {\n      if (props.renderContent) return props.renderContent(h, option)\n\n      if (slots.default) return slots.default({ option })\n\n      return h('span', option[props.props.label] || option[props.props.key])\n    })\n\n    return {\n      sourceData,\n      targetData,\n      onSourceCheckedChange,\n      onTargetCheckedChange,\n      addToLeft,\n      addToRight,\n\n      ...toRefs(checkedState),\n\n      hasButtonTexts,\n      leftPanelTitle,\n      rightPanelTitle,\n      panelFilterPlaceholder,\n      clearQuery,\n\n      optionRender,\n    }\n  },\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}