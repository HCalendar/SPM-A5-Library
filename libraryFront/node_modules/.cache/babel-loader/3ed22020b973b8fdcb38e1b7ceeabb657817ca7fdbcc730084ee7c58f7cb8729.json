{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport { ref, computed } from 'vue';\nimport { isFunction } from '@vue/shared';\nfunction useFilter(props, tree) {\n  const hiddenNodeKeySet = ref( /* @__PURE__ */new Set([]));\n  const hiddenExpandIconKeySet = ref( /* @__PURE__ */new Set([]));\n  const filterable = computed(() => {\n    return isFunction(props.filterMethod);\n  });\n  function doFilter(query) {\n    var _a;\n    if (!filterable.value) {\n      return;\n    }\n    const expandKeySet = /* @__PURE__ */new Set();\n    const hiddenExpandIconKeys = hiddenExpandIconKeySet.value;\n    const hiddenKeys = hiddenNodeKeySet.value;\n    const family = [];\n    const nodes = ((_a = tree.value) == null ? void 0 : _a.treeNodes) || [];\n    const filter = props.filterMethod;\n    hiddenKeys.clear();\n    function traverse(nodes2) {\n      nodes2.forEach(node => {\n        family.push(node);\n        if (filter == null ? void 0 : filter(query, node.data)) {\n          family.forEach(member => {\n            expandKeySet.add(member.key);\n          });\n        } else if (node.isLeaf) {\n          hiddenKeys.add(node.key);\n        }\n        const children = node.children;\n        if (children) {\n          traverse(children);\n        }\n        if (!node.isLeaf) {\n          if (!expandKeySet.has(node.key)) {\n            hiddenKeys.add(node.key);\n          } else if (children) {\n            let allHidden = true;\n            for (let i = 0; i < children.length; ++i) {\n              const childNode = children[i];\n              if (!hiddenKeys.has(childNode.key)) {\n                allHidden = false;\n                break;\n              }\n            }\n            if (allHidden) {\n              hiddenExpandIconKeys.add(node.key);\n            } else {\n              hiddenExpandIconKeys.delete(node.key);\n            }\n          }\n        }\n        family.pop();\n      });\n    }\n    traverse(nodes);\n    return expandKeySet;\n  }\n  function isForceHiddenExpandIcon(node) {\n    return hiddenExpandIconKeySet.value.has(node.key);\n  }\n  return {\n    hiddenExpandIconKeySet,\n    hiddenNodeKeySet,\n    doFilter,\n    isForceHiddenExpandIcon\n  };\n}\nexport { useFilter };","map":{"version":3,"names":["props","tree","hiddenNodeKeySet","ref","Set","hiddenExpandIconKeySet","filterable","computed","isFunction","filterMethod","doFilter","query","_a","value","expandKeySet","hiddenExpandIconKeys","hiddenKeys","family","nodes","treeNodes","filter","clear","traverse","nodes2","forEach","node","push","data","member","add","key","isLeaf","children","has","allHidden","i","length","childNode","delete","pop","isForceHiddenExpandIcon"],"sources":["../../../../../../../packages/components/tree-v2/src/composables/useFilter.ts"],"sourcesContent":["import { computed, ref } from 'vue'\nimport { isFunction } from '@vue/shared'\nimport type { Ref } from 'vue'\nimport type { TreeProps, TreeKey, TreeNode, Tree } from '../types'\n\n// When the data volume is very large using filter will cause lag\n// I haven't found a better way to optimize it for now\n// Maybe this problem should be left to the server side\nexport function useFilter(props: TreeProps, tree: Ref<Tree | undefined>) {\n  const hiddenNodeKeySet = ref<Set<TreeKey>>(new Set([]))\n  const hiddenExpandIconKeySet = ref<Set<TreeKey>>(new Set([]))\n\n  const filterable = computed(() => {\n    return isFunction(props.filterMethod)\n  })\n\n  function doFilter(query: string) {\n    if (!filterable.value) {\n      return\n    }\n    const expandKeySet = new Set<TreeKey>()\n    const hiddenExpandIconKeys = hiddenExpandIconKeySet.value\n    const hiddenKeys = hiddenNodeKeySet.value\n    const family: TreeNode[] = []\n    const nodes = tree.value?.treeNodes || []\n    const filter = props.filterMethod\n    hiddenKeys.clear()\n    function traverse(nodes: TreeNode[]) {\n      nodes.forEach((node) => {\n        family.push(node)\n        if (filter?.(query, node.data)) {\n          family.forEach((member) => {\n            expandKeySet.add(member.key)\n          })\n        } else if (node.isLeaf) {\n          hiddenKeys.add(node.key)\n        }\n        const children = node.children\n        if (children) {\n          traverse(children)\n        }\n        if (!node.isLeaf) {\n          if (!expandKeySet.has(node.key)) {\n            hiddenKeys.add(node.key)\n          } else if (children) {\n            // If all child nodes are hidden, then the expand icon will be hidden\n            let allHidden = true\n            for (let i = 0; i < children.length; ++i) {\n              const childNode = children[i]\n              if (!hiddenKeys.has(childNode.key)) {\n                allHidden = false\n                break\n              }\n            }\n            if (allHidden) {\n              hiddenExpandIconKeys.add(node.key)\n            } else {\n              hiddenExpandIconKeys.delete(node.key)\n            }\n          }\n        }\n        family.pop()\n      })\n    }\n    traverse(nodes)\n    return expandKeySet\n  }\n\n  function isForceHiddenExpandIcon(node: TreeNode): boolean {\n    return hiddenExpandIconKeySet.value.has(node.key)\n  }\n\n  return {\n    hiddenExpandIconKeySet,\n    hiddenNodeKeySet,\n    doFilter,\n    isForceHiddenExpandIcon,\n  }\n}\n"],"mappings":";;;;;;;;;;mBAQ0BA,KAAA,EAAkBC,IAAA,EAA6B;EACvE,MAAMC,gBAAA,GAAmBC,GAAA,qBAAsBC,GAAA,CAAI;EACnD,MAAMC,sBAAA,GAAyBF,GAAA,qBAAsBC,GAAA,CAAI;EAEzD,MAAME,UAAA,GAAaC,QAAA,CAAS,MAAM;IAChC,OAAOC,UAAA,CAAWR,KAAA,CAAMS,YAAA;EAAA;EAG1B,SAAAC,SAAkBC,KAAA,EAAe;IAhBnC,IAAAC,EAAA;IAiBI,IAAI,CAACN,UAAA,CAAWO,KAAA,EAAO;MACrB;IAAA;IAEF,MAAMC,YAAA,sBAAmBV,GAAA;IACzB,MAAMW,oBAAA,GAAuBV,sBAAA,CAAuBQ,KAAA;IACpD,MAAMG,UAAA,GAAad,gBAAA,CAAiBW,KAAA;IACpC,MAAMI,MAAA,GAAqB;IAC3B,MAAMC,KAAA,GAAQ,EAAAN,EAAA,GAAAX,IAAA,CAAKY,KAAA,KAAL,gBAAAD,EAAA,CAAYO,SAAA,KAAa;IACvC,MAAMC,MAAA,GAASpB,KAAA,CAAMS,YAAA;IACrBO,UAAA,CAAWK,KAAA;IACX,SAAAC,SAAkBC,MAAA,EAAmB;MACnCA,MAAA,CAAMC,OAAA,CAASC,IAAA,IAAS;QACtBR,MAAA,CAAOS,IAAA,CAAKD,IAAA;QACZ,IAAIL,MAAA,oBAAAA,MAAA,CAAST,KAAA,EAAOc,IAAA,CAAKE,IAAA,GAAO;UAC9BV,MAAA,CAAOO,OAAA,CAASI,MAAA,IAAW;YACzBd,YAAA,CAAae,GAAA,CAAID,MAAA,CAAOE,GAAA;UAAA;QAAA,WAEjBL,IAAA,CAAKM,MAAA,EAAQ;UACtBf,UAAA,CAAWa,GAAA,CAAIJ,IAAA,CAAKK,GAAA;QAAA;QAEtB,MAAME,QAAA,GAAWP,IAAA,CAAKO,QAAA;QACtB,IAAIA,QAAA,EAAU;UACZV,QAAA,CAASU,QAAA;QAAA;QAEX,IAAI,CAACP,IAAA,CAAKM,MAAA,EAAQ;UAChB,IAAI,CAACjB,YAAA,CAAamB,GAAA,CAAIR,IAAA,CAAKK,GAAA,GAAM;YAC/Bd,UAAA,CAAWa,GAAA,CAAIJ,IAAA,CAAKK,GAAA;UAAA,WACXE,QAAA,EAAU;YAEnB,IAAIE,SAAA,GAAY;YAChB,SAASC,CAAA,GAAI,GAAGA,CAAA,GAAIH,QAAA,CAASI,MAAA,EAAQ,EAAED,CAAA,EAAG;cACxC,MAAME,SAAA,GAAYL,QAAA,CAASG,CAAA;cAC3B,IAAI,CAACnB,UAAA,CAAWiB,GAAA,CAAII,SAAA,CAAUP,GAAA,GAAM;gBAClCI,SAAA,GAAY;gBACZ;cAAA;YAAA;YAGJ,IAAIA,SAAA,EAAW;cACbnB,oBAAA,CAAqBc,GAAA,CAAIJ,IAAA,CAAKK,GAAA;YAAA,OACzB;cACLf,oBAAA,CAAqBuB,MAAA,CAAOb,IAAA,CAAKK,GAAA;YAAA;UAAA;QAAA;QAIvCb,MAAA,CAAOsB,GAAA;MAAA;IAAA;IAGXjB,QAAA,CAASJ,KAAA;IACT,OAAOJ,YAAA;EAAA;EAGT,SAAA0B,wBAAiCf,IAAA,EAAyB;IACxD,OAAOpB,sBAAA,CAAuBQ,KAAA,CAAMoB,GAAA,CAAIR,IAAA,CAAKK,GAAA;EAAA;EAG/C,OAAO;IACLzB,sBAAA;IACAH,gBAAA;IACAQ,QAAA;IACA8B;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}