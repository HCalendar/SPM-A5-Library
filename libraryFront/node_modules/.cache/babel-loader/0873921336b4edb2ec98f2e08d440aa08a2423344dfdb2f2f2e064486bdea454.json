{"ast":null,"code":"import { cAF, rAF } from '../../../../utils/raf.mjs';\nimport { isFF } from '../utils.mjs';\nimport { HORIZONTAL, VERTICAL } from '../defaults.mjs';\nconst LayoutKeys = {\n  [HORIZONTAL]: \"deltaX\",\n  [VERTICAL]: \"deltaY\"\n};\nconst useWheel = ({\n  atEndEdge,\n  atStartEdge,\n  layout\n}, onWheelDelta) => {\n  let frameHandle;\n  let offset = 0;\n  const hasReachedEdge = offset2 => {\n    const edgeReached = offset2 < 0 && atStartEdge.value || offset2 > 0 && atEndEdge.value;\n    return edgeReached;\n  };\n  const onWheel = e => {\n    cAF(frameHandle);\n    const newOffset = e[LayoutKeys[layout.value]];\n    if (hasReachedEdge(offset) && hasReachedEdge(offset + newOffset)) return;\n    offset += newOffset;\n    if (!isFF) {\n      e.preventDefault();\n    }\n    frameHandle = rAF(() => {\n      onWheelDelta(offset);\n      offset = 0;\n    });\n  };\n  return {\n    hasReachedEdge,\n    onWheel\n  };\n};\nexport { useWheel as default };","map":{"version":3,"names":["LayoutKeys","HORIZONTAL","VERTICAL","useWheel","atEndEdge","atStartEdge","layout","onWheelDelta","frameHandle","offset","hasReachedEdge","offset2","edgeReached","value","onWheel","e","cAF","newOffset","isFF","preventDefault","rAF"],"sources":["../../../../../../../packages/components/virtual-list/src/hooks/use-wheel.ts"],"sourcesContent":["import { rAF, cAF } from '@element-plus/utils/raf'\nimport { isFF } from '../utils'\nimport { HORIZONTAL, VERTICAL } from '../defaults'\n\nimport type { ComputedRef } from 'vue'\nimport type { LayoutDirection } from '../types'\n\nconst LayoutKeys = {\n  [HORIZONTAL]: 'deltaX',\n  [VERTICAL]: 'deltaY',\n}\n\ninterface ListWheelState {\n  atStartEdge: ComputedRef<boolean> // exclusive to reachEnd\n  atEndEdge: ComputedRef<boolean>\n  layout: ComputedRef<LayoutDirection>\n}\n\ntype ListWheelHandler = (offset: number) => void\n\nconst useWheel = (\n  { atEndEdge, atStartEdge, layout }: ListWheelState,\n  onWheelDelta: ListWheelHandler\n) => {\n  let frameHandle: number\n  let offset = 0\n\n  // let scrollLock = false\n  // let lockHandle = null\n\n  // const lockScroll = () => {\n  //   clearTimeout(lockHandle)\n  //   scrollLock = true\n  //   lockHandle = setTimeout(() => scrollLock = false, 50)\n  // }\n\n  const hasReachedEdge = (offset: number) => {\n    const edgeReached =\n      (offset < 0 && atStartEdge.value) || (offset > 0 && atEndEdge.value)\n\n    return edgeReached\n  }\n\n  const onWheel = (e: WheelEvent) => {\n    cAF(frameHandle)\n\n    const newOffset = e[LayoutKeys[layout.value]]\n\n    if (hasReachedEdge(offset) && hasReachedEdge(offset + newOffset)) return\n\n    offset += newOffset\n\n    if (!isFF) {\n      e.preventDefault()\n    }\n\n    frameHandle = rAF(() => {\n      onWheelDelta(offset)\n      offset = 0\n    })\n  }\n\n  return {\n    hasReachedEdge,\n    onWheel,\n  }\n}\n\nexport default useWheel\n"],"mappings":";;;AAOA,MAAMA,UAAA,GAAa;EAAA,CAChBC,UAAA,GAAa;EAAA,CACbC,QAAA,GAAW;AAAA;MAWRC,QAAA,GAAWA,CACf;EAAEC,SAAA;EAAWC,WAAA;EAAaC;AAAA,GAC1BC,YAAA,KACG;EACH,IAAIC,WAAA;EACJ,IAAIC,MAAA,GAAS;EAWb,MAAMC,cAAA,GAAkBC,OAAA,IAAmB;IACzC,MAAMC,WAAA,GACHD,OAAA,GAAS,KAAKN,WAAA,CAAYQ,KAAA,IAAWF,OAAA,GAAS,KAAKP,SAAA,CAAUS,KAAA;IAEhE,OAAOD,WAAA;EAAA;EAGT,MAAME,OAAA,GAAWC,CAAA,IAAkB;IACjCC,GAAA,CAAIR,WAAA;IAEJ,MAAMS,SAAA,GAAYF,CAAA,CAAEf,UAAA,CAAWM,MAAA,CAAOO,KAAA;IAEtC,IAAIH,cAAA,CAAeD,MAAA,KAAWC,cAAA,CAAeD,MAAA,GAASQ,SAAA,GAAY;IAElER,MAAA,IAAUQ,SAAA;IAEV,IAAI,CAACC,IAAA,EAAM;MACTH,CAAA,CAAEI,cAAA;IAAA;IAGJX,WAAA,GAAcY,GAAA,CAAI,MAAM;MACtBb,YAAA,CAAaE,MAAA;MACbA,MAAA,GAAS;IAAA;EAAA;EAIb,OAAO;IACLC,cAAA;IACAI;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}