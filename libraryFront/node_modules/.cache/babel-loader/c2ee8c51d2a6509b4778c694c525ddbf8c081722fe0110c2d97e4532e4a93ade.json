{"ast":null,"code":"import { defineComponent, inject, computed } from 'vue';\nimport { ElCheckbox } from '../../checkbox/index.mjs';\nimport { ElRadio } from '../../radio/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { Check, Loading, ArrowRight } from '@element-plus/icons-vue';\nimport NodeContent from './node-content.mjs';\nimport { CASCADER_PANEL_INJECTION_KEY } from './types.mjs';\nvar script = defineComponent({\n  name: \"ElCascaderNode\",\n  components: {\n    ElCheckbox,\n    ElRadio,\n    NodeContent,\n    ElIcon,\n    Check,\n    Loading,\n    ArrowRight\n  },\n  props: {\n    node: {\n      type: Object,\n      required: true\n    },\n    menuId: String\n  },\n  emits: [\"expand\"],\n  setup(props, {\n    emit\n  }) {\n    const panel = inject(CASCADER_PANEL_INJECTION_KEY);\n    const isHoverMenu = computed(() => panel.isHoverMenu);\n    const multiple = computed(() => panel.config.multiple);\n    const checkStrictly = computed(() => panel.config.checkStrictly);\n    const checkedNodeId = computed(() => {\n      var _a;\n      return (_a = panel.checkedNodes[0]) == null ? void 0 : _a.uid;\n    });\n    const isDisabled = computed(() => props.node.isDisabled);\n    const isLeaf = computed(() => props.node.isLeaf);\n    const expandable = computed(() => checkStrictly.value && !isLeaf.value || !isDisabled.value);\n    const inExpandingPath = computed(() => isInPath(panel.expandingNode));\n    const inCheckedPath = computed(() => checkStrictly.value && panel.checkedNodes.some(isInPath));\n    const isInPath = node => {\n      var _a;\n      const {\n        level,\n        uid\n      } = props.node;\n      return ((_a = node == null ? void 0 : node.pathNodes[level - 1]) == null ? void 0 : _a.uid) === uid;\n    };\n    const doExpand = () => {\n      if (inExpandingPath.value) return;\n      panel.expandNode(props.node);\n    };\n    const doCheck = checked => {\n      const {\n        node\n      } = props;\n      if (checked === node.checked) return;\n      panel.handleCheckChange(node, checked);\n    };\n    const doLoad = () => {\n      panel.lazyLoad(props.node, () => {\n        if (!isLeaf.value) doExpand();\n      });\n    };\n    const handleHoverExpand = e => {\n      if (!isHoverMenu.value) return;\n      handleExpand();\n      !isLeaf.value && emit(\"expand\", e);\n    };\n    const handleExpand = () => {\n      const {\n        node\n      } = props;\n      if (!expandable.value || node.loading) return;\n      node.loaded ? doExpand() : doLoad();\n    };\n    const handleClick = () => {\n      if (isHoverMenu.value && !isLeaf.value) return;\n      if (isLeaf.value && !isDisabled.value && !checkStrictly.value && !multiple.value) {\n        handleCheck(true);\n      } else {\n        handleExpand();\n      }\n    };\n    const handleCheck = checked => {\n      if (!props.node.loaded) {\n        doLoad();\n      } else {\n        doCheck(checked);\n        !checkStrictly.value && doExpand();\n      }\n    };\n    return {\n      panel,\n      isHoverMenu,\n      multiple,\n      checkStrictly,\n      checkedNodeId,\n      isDisabled,\n      isLeaf,\n      expandable,\n      inExpandingPath,\n      inCheckedPath,\n      handleHoverExpand,\n      handleExpand,\n      handleClick,\n      handleCheck\n    };\n  }\n});\nexport { script as default };","map":{"version":3,"names":["script","defineComponent","name","components","ElCheckbox","ElRadio","NodeContent","ElIcon","Check","Loading","ArrowRight","props","node","type","Object","required","menuId","String","emits","setup","emit","panel","inject","CASCADER_PANEL_INJECTION_KEY","isHoverMenu","computed","multiple","config","checkStrictly","checkedNodeId","_a","checkedNodes","uid","isDisabled","isLeaf","expandable","value","inExpandingPath","isInPath","expandingNode","inCheckedPath","some","level","pathNodes","doExpand","expandNode","doCheck","checked","handleCheckChange","doLoad","lazyLoad","handleHoverExpand","e","handleExpand","loading","loaded","handleClick","handleCheck"],"sources":["../../../../../../packages/components/cascader-panel/src/node.vue"],"sourcesContent":["<template>\n  <li\n    :id=\"`${menuId}-${node.uid}`\"\n    role=\"menuitem\"\n    :aria-haspopup=\"!isLeaf\"\n    :aria-owns=\"isLeaf ? null : menuId\"\n    :aria-expanded=\"inExpandingPath\"\n    :tabindex=\"expandable ? -1 : undefined\"\n    :class=\"[\n      'el-cascader-node',\n      checkStrictly && 'is-selectable',\n      inExpandingPath && 'in-active-path',\n      inCheckedPath && 'in-checked-path',\n      node.checked && 'is-active',\n      !expandable && 'is-disabled',\n    ]\"\n    @mouseenter=\"handleHoverExpand\"\n    @focus=\"handleHoverExpand\"\n    @click=\"handleClick\"\n  >\n    <!-- prefix -->\n    <el-checkbox\n      v-if=\"multiple\"\n      :model-value=\"node.checked\"\n      :indeterminate=\"node.indeterminate\"\n      :disabled=\"isDisabled\"\n      @click.stop\n      @update:model-value=\"handleCheck\"\n    />\n    <el-radio\n      v-else-if=\"checkStrictly\"\n      :model-value=\"checkedNodeId\"\n      :label=\"node.uid\"\n      :disabled=\"isDisabled\"\n      @update:model-value=\"handleCheck\"\n      @click.stop\n    >\n      <!--\n        Add an empty element to avoid render label,\n        do not use empty fragment here for https://github.com/vuejs/vue-next/pull/2485\n      -->\n      <span></span>\n    </el-radio>\n    <el-icon\n      v-else-if=\"isLeaf && node.checked\"\n      class=\"el-cascader-node__prefix\"\n    >\n      <check />\n    </el-icon>\n\n    <!-- content -->\n    <node-content />\n\n    <!-- postfix -->\n    <template v-if=\"!isLeaf\">\n      <el-icon v-if=\"node.loading\" class=\"is-loading el-cascader-node__postfix\">\n        <loading />\n      </el-icon>\n      <el-icon v-else class=\"arrow-right el-cascader-node__postfix\">\n        <arrow-right />\n      </el-icon>\n    </template>\n  </li>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, inject } from 'vue'\nimport ElCheckbox from '@element-plus/components/checkbox'\nimport ElRadio from '@element-plus/components/radio'\nimport ElIcon from '@element-plus/components/icon'\nimport { Check, Loading, ArrowRight } from '@element-plus/icons-vue'\nimport NodeContent from './node-content'\nimport { CASCADER_PANEL_INJECTION_KEY } from './types'\nimport type { default as CascaderNode } from './node'\n\nimport type { PropType } from 'vue'\n\nexport default defineComponent({\n  name: 'ElCascaderNode',\n\n  components: {\n    ElCheckbox,\n    ElRadio,\n    NodeContent,\n    ElIcon,\n    Check,\n    Loading,\n    ArrowRight,\n  },\n\n  props: {\n    node: {\n      type: Object as PropType<CascaderNode>,\n      required: true,\n    },\n    menuId: String,\n  },\n\n  emits: ['expand'],\n\n  setup(props, { emit }) {\n    const panel = inject(CASCADER_PANEL_INJECTION_KEY)!\n\n    const isHoverMenu = computed(() => panel.isHoverMenu)\n    const multiple = computed(() => panel.config.multiple)\n    const checkStrictly = computed(() => panel.config.checkStrictly)\n    const checkedNodeId = computed(() => panel.checkedNodes[0]?.uid)\n    const isDisabled = computed(() => props.node.isDisabled)\n    const isLeaf = computed(() => props.node.isLeaf)\n    const expandable = computed(\n      () => (checkStrictly.value && !isLeaf.value) || !isDisabled.value\n    )\n    const inExpandingPath = computed(() => isInPath(panel.expandingNode!))\n    // only useful in check-strictly mode\n    const inCheckedPath = computed(\n      () => checkStrictly.value && panel.checkedNodes.some(isInPath)\n    )\n\n    const isInPath = (node: CascaderNode) => {\n      const { level, uid } = props.node\n      return node?.pathNodes[level - 1]?.uid === uid\n    }\n\n    const doExpand = () => {\n      if (inExpandingPath.value) return\n      panel.expandNode(props.node)\n    }\n\n    const doCheck = (checked: boolean) => {\n      const { node } = props\n      if (checked === node.checked) return\n      panel.handleCheckChange(node, checked)\n    }\n\n    const doLoad = () => {\n      panel.lazyLoad(props.node, () => {\n        if (!isLeaf.value) doExpand()\n      })\n    }\n\n    const handleHoverExpand = (e: Event) => {\n      if (!isHoverMenu.value) return\n      handleExpand()\n      !isLeaf.value && emit('expand', e)\n    }\n\n    const handleExpand = () => {\n      const { node } = props\n      // do not exclude leaf node because the menus expanded might have to reset\n      if (!expandable.value || node.loading) return\n      node.loaded ? doExpand() : doLoad()\n    }\n\n    const handleClick = () => {\n      if (isHoverMenu.value && !isLeaf.value) return\n\n      if (\n        isLeaf.value &&\n        !isDisabled.value &&\n        !checkStrictly.value &&\n        !multiple.value\n      ) {\n        handleCheck(true)\n      } else {\n        handleExpand()\n      }\n    }\n\n    const handleCheck = (checked: boolean) => {\n      if (!props.node.loaded) {\n        doLoad()\n      } else {\n        doCheck(checked)\n        !checkStrictly.value && doExpand()\n      }\n    }\n\n    return {\n      panel,\n      isHoverMenu,\n      multiple,\n      checkStrictly,\n      checkedNodeId,\n      isDisabled,\n      isLeaf,\n      expandable,\n      inExpandingPath,\n      inCheckedPath,\n      handleHoverExpand,\n      handleExpand,\n      handleClick,\n      handleCheck,\n    }\n  },\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}