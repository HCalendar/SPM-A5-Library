{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { on } from '../../utils/dom.mjs';\nimport isServer from '../../utils/isServer.mjs';\nconst nodeList = /* @__PURE__ */new Map();\nlet startClick;\nif (!isServer) {\n  on(document, \"mousedown\", e => startClick = e);\n  on(document, \"mouseup\", e => {\n    for (const handlers of nodeList.values()) {\n      for (const {\n        documentHandler\n      } of handlers) {\n        documentHandler(e, startClick);\n      }\n    }\n  });\n}\nfunction createDocumentHandler(el, binding) {\n  let excludes = [];\n  if (Array.isArray(binding.arg)) {\n    excludes = binding.arg;\n  } else if (binding.arg instanceof HTMLElement) {\n    excludes.push(binding.arg);\n  }\n  return function (mouseup, mousedown) {\n    const popperRef = binding.instance.popperRef;\n    const mouseUpTarget = mouseup.target;\n    const mouseDownTarget = mousedown == null ? void 0 : mousedown.target;\n    const isBound = !binding || !binding.instance;\n    const isTargetExists = !mouseUpTarget || !mouseDownTarget;\n    const isContainedByEl = el.contains(mouseUpTarget) || el.contains(mouseDownTarget);\n    const isSelf = el === mouseUpTarget;\n    const isTargetExcluded = excludes.length && excludes.some(item => item == null ? void 0 : item.contains(mouseUpTarget)) || excludes.length && excludes.includes(mouseDownTarget);\n    const isContainedByPopper = popperRef && (popperRef.contains(mouseUpTarget) || popperRef.contains(mouseDownTarget));\n    if (isBound || isTargetExists || isContainedByEl || isSelf || isTargetExcluded || isContainedByPopper) {\n      return;\n    }\n    binding.value(mouseup, mousedown);\n  };\n}\nconst ClickOutside = {\n  beforeMount(el, binding) {\n    if (!nodeList.has(el)) {\n      nodeList.set(el, []);\n    }\n    nodeList.get(el).push({\n      documentHandler: createDocumentHandler(el, binding),\n      bindingFn: binding.value\n    });\n  },\n  updated(el, binding) {\n    if (!nodeList.has(el)) {\n      nodeList.set(el, []);\n    }\n    const handlers = nodeList.get(el);\n    const oldHandlerIndex = handlers.findIndex(item => item.bindingFn === binding.oldValue);\n    const newHandler = {\n      documentHandler: createDocumentHandler(el, binding),\n      bindingFn: binding.value\n    };\n    if (oldHandlerIndex >= 0) {\n      handlers.splice(oldHandlerIndex, 1, newHandler);\n    } else {\n      handlers.push(newHandler);\n    }\n  },\n  unmounted(el) {\n    nodeList.delete(el);\n  }\n};\nexport { ClickOutside as default };","map":{"version":3,"names":["nodeList","Map","startClick","isServer","on","document","e","handlers","values","documentHandler","createDocumentHandler","el","binding","excludes","Array","isArray","arg","HTMLElement","push","mouseup","mousedown","popperRef","instance","mouseUpTarget","target","mouseDownTarget","isBound","isTargetExists","isContainedByEl","contains","isSelf","isTargetExcluded","length","some","item","includes","isContainedByPopper","value","ClickOutside","beforeMount","has","set","get","bindingFn","updated","oldHandlerIndex","findIndex","oldValue","newHandler","splice","unmounted","delete"],"sources":["../../../../../packages/directives/click-outside/index.ts"],"sourcesContent":["import { on } from '@element-plus/utils/dom'\nimport isServer from '@element-plus/utils/isServer'\n\nimport type {\n  ComponentPublicInstance,\n  DirectiveBinding,\n  ObjectDirective,\n} from 'vue'\nimport type { Nullable } from '@element-plus/utils/types'\n\ntype DocumentHandler = <T extends MouseEvent>(mouseup: T, mousedown: T) => void\ntype FlushList = Map<\n  HTMLElement,\n  {\n    documentHandler: DocumentHandler\n    bindingFn: (...args: unknown[]) => unknown\n  }[]\n>\n\nconst nodeList: FlushList = new Map()\n\nlet startClick: MouseEvent\n\nif (!isServer) {\n  on(document, 'mousedown', (e: MouseEvent) => (startClick = e))\n  on(document, 'mouseup', (e: MouseEvent) => {\n    for (const handlers of nodeList.values()) {\n      for (const { documentHandler } of handlers) {\n        documentHandler(e, startClick)\n      }\n    }\n  })\n}\n\nfunction createDocumentHandler(\n  el: HTMLElement,\n  binding: DirectiveBinding\n): DocumentHandler {\n  let excludes: HTMLElement[] = []\n  if (Array.isArray(binding.arg)) {\n    excludes = binding.arg\n  } else if ((binding.arg as unknown) instanceof HTMLElement) {\n    // due to current implementation on binding type is wrong the type casting is necessary here\n    excludes.push(binding.arg as unknown as HTMLElement)\n  }\n  return function (mouseup, mousedown) {\n    const popperRef = (\n      binding.instance as ComponentPublicInstance<{\n        popperRef: Nullable<HTMLElement>\n      }>\n    ).popperRef\n    const mouseUpTarget = mouseup.target as Node\n    const mouseDownTarget = mousedown?.target as Node\n    const isBound = !binding || !binding.instance\n    const isTargetExists = !mouseUpTarget || !mouseDownTarget\n    const isContainedByEl =\n      el.contains(mouseUpTarget) || el.contains(mouseDownTarget)\n    const isSelf = el === mouseUpTarget\n\n    const isTargetExcluded =\n      (excludes.length &&\n        excludes.some((item) => item?.contains(mouseUpTarget))) ||\n      (excludes.length && excludes.includes(mouseDownTarget as HTMLElement))\n    const isContainedByPopper =\n      popperRef &&\n      (popperRef.contains(mouseUpTarget) || popperRef.contains(mouseDownTarget))\n    if (\n      isBound ||\n      isTargetExists ||\n      isContainedByEl ||\n      isSelf ||\n      isTargetExcluded ||\n      isContainedByPopper\n    ) {\n      return\n    }\n    binding.value(mouseup, mousedown)\n  }\n}\n\nconst ClickOutside: ObjectDirective = {\n  beforeMount(el: HTMLElement, binding: DirectiveBinding) {\n    // there could be multiple handlers on the element\n    if (!nodeList.has(el)) {\n      nodeList.set(el, [])\n    }\n\n    nodeList.get(el).push({\n      documentHandler: createDocumentHandler(el, binding),\n      bindingFn: binding.value,\n    })\n  },\n  updated(el: HTMLElement, binding: DirectiveBinding) {\n    if (!nodeList.has(el)) {\n      nodeList.set(el, [])\n    }\n\n    const handlers = nodeList.get(el)\n    const oldHandlerIndex = handlers.findIndex(\n      (item) => item.bindingFn === binding.oldValue\n    )\n    const newHandler = {\n      documentHandler: createDocumentHandler(el, binding),\n      bindingFn: binding.value,\n    }\n\n    if (oldHandlerIndex >= 0) {\n      // replace the old handler to the new handler\n      handlers.splice(oldHandlerIndex, 1, newHandler)\n    } else {\n      handlers.push(newHandler)\n    }\n  },\n  unmounted(el: HTMLElement) {\n    // remove all listeners when a component unmounted\n    nodeList.delete(el)\n  },\n}\n\nexport default ClickOutside\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}