{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { ref, watch } from 'vue';\nimport { NOOP } from '@vue/shared';\nimport cloneDeep from 'lodash/cloneDeep';\nfunction getFile(rawFile, uploadFiles) {\n  return uploadFiles.find(file => file.uid === rawFile.uid);\n}\nfunction genUid(seed) {\n  return Date.now() + seed;\n}\nvar useHandlers = props => {\n  const uploadFiles = ref([]);\n  const uploadRef = ref(null);\n  let tempIndex = 1;\n  function abort(file) {\n    uploadRef.value.abort(file);\n  }\n  function clearFiles(status = [\"success\", \"fail\"]) {\n    uploadFiles.value = uploadFiles.value.filter(row => {\n      return status.indexOf(row.status) === -1;\n    });\n  }\n  function handleError(err, rawFile) {\n    const file = getFile(rawFile, uploadFiles.value);\n    file.status = \"fail\";\n    uploadFiles.value.splice(uploadFiles.value.indexOf(file), 1);\n    props.onError(err, file, uploadFiles.value);\n    props.onChange(file, uploadFiles.value);\n  }\n  function handleProgress(ev, rawFile) {\n    const file = getFile(rawFile, uploadFiles.value);\n    props.onProgress(ev, file, uploadFiles.value);\n    file.status = \"uploading\";\n    file.percentage = ev.percent || 0;\n  }\n  function handleSuccess(res, rawFile) {\n    const file = getFile(rawFile, uploadFiles.value);\n    if (file) {\n      file.status = \"success\";\n      file.response = res;\n      props.onSuccess(res, file, uploadFiles.value);\n      props.onChange(file, uploadFiles.value);\n    }\n  }\n  function handleStart(rawFile) {\n    const uid = genUid(tempIndex++);\n    rawFile.uid = uid;\n    const file = {\n      name: rawFile.name,\n      percentage: 0,\n      status: \"ready\",\n      size: rawFile.size,\n      raw: rawFile,\n      uid\n    };\n    if (props.listType === \"picture-card\" || props.listType === \"picture\") {\n      try {\n        file.url = URL.createObjectURL(rawFile);\n      } catch (err) {\n        console.error(\"[Element Error][Upload]\", err);\n        props.onError(err, file, uploadFiles.value);\n      }\n    }\n    uploadFiles.value.push(file);\n    props.onChange(file, uploadFiles.value);\n  }\n  function handleRemove(file, raw) {\n    if (raw) {\n      file = getFile(raw, uploadFiles.value);\n    }\n    const revokeObjectURL = () => {\n      if (file.url && file.url.indexOf(\"blob:\") === 0) {\n        URL.revokeObjectURL(file.url);\n      }\n    };\n    const doRemove = () => {\n      abort(file);\n      const fileList = uploadFiles.value;\n      fileList.splice(fileList.indexOf(file), 1);\n      props.onRemove(file, fileList);\n      revokeObjectURL();\n    };\n    if (!props.beforeRemove) {\n      doRemove();\n    } else if (typeof props.beforeRemove === \"function\") {\n      const before = props.beforeRemove(file, uploadFiles.value);\n      if (before instanceof Promise) {\n        before.then(() => {\n          doRemove();\n        }).catch(NOOP);\n      } else if (before !== false) {\n        doRemove();\n      }\n    }\n  }\n  function submit() {\n    uploadFiles.value.filter(file => file.status === \"ready\").forEach(file => {\n      uploadRef.value.upload(file.raw);\n    });\n  }\n  watch(() => props.listType, val => {\n    if (val === \"picture-card\" || val === \"picture\") {\n      uploadFiles.value = uploadFiles.value.map(file => {\n        if (!file.url && file.raw) {\n          try {\n            file.url = URL.createObjectURL(file.raw);\n          } catch (err) {\n            props.onError(err, file, uploadFiles.value);\n          }\n        }\n        return file;\n      });\n    }\n  });\n  watch(() => props.fileList, fileList => {\n    uploadFiles.value = fileList.map(file => {\n      const cloneFile = cloneDeep(file);\n      return {\n        ...cloneFile,\n        uid: file.uid || genUid(tempIndex++),\n        status: file.status || \"success\"\n      };\n    });\n  }, {\n    immediate: true,\n    deep: true\n  });\n  return {\n    abort,\n    clearFiles,\n    handleError,\n    handleProgress,\n    handleStart,\n    handleSuccess,\n    handleRemove,\n    submit,\n    uploadFiles,\n    uploadRef\n  };\n};\nexport { useHandlers as default };","map":{"version":3,"names":["getFile","rawFile","uploadFiles","find","file","uid","genUid","seed","Date","now","useHandlers","props","ref","uploadRef","tempIndex","abort","value","clearFiles","status","filter","row","indexOf","handleError","err","splice","onError","onChange","handleProgress","ev","onProgress","percentage","percent","handleSuccess","res","response","onSuccess","handleStart","name","size","raw","listType","url","URL","createObjectURL","console","error","push","handleRemove","revokeObjectURL","doRemove","fileList","onRemove","beforeRemove","before","Promise","then","catch","NOOP","submit","forEach","upload","watch","val","map","cloneFile","cloneDeep","immediate","deep"],"sources":["../../../../../../packages/components/upload/src/useHandlers.ts"],"sourcesContent":["import { ref, watch } from 'vue'\nimport { NOOP } from '@vue/shared'\nimport cloneDeep from 'lodash/cloneDeep'\n\n// Inline types\nimport type {\n  ListType,\n  UploadFile,\n  UploadStatus,\n  ElFile,\n  ElUploadProgressEvent,\n  IUseHandlersProps,\n} from './upload.type'\ntype UploadRef = {\n  abort: (file: UploadFile) => void\n  upload: (file: ElFile) => void\n}\n// helpers\nfunction getFile(rawFile: ElFile, uploadFiles: UploadFile[]) {\n  return uploadFiles.find((file) => file.uid === rawFile.uid)\n}\n\nfunction genUid(seed: number) {\n  return Date.now() + seed\n}\n\nexport default (props: IUseHandlersProps) => {\n  const uploadFiles = ref<UploadFile[]>([])\n  const uploadRef = ref<UploadRef>(null)\n\n  let tempIndex = 1\n\n  function abort(file: UploadFile) {\n    uploadRef.value.abort(file)\n  }\n\n  function clearFiles(status: UploadStatus[] = ['success', 'fail']) {\n    uploadFiles.value = uploadFiles.value.filter((row) => {\n      return status.indexOf(row.status) === -1\n    })\n  }\n\n  function handleError(err: Error, rawFile: ElFile) {\n    const file = getFile(rawFile, uploadFiles.value)\n    file.status = 'fail'\n    uploadFiles.value.splice(uploadFiles.value.indexOf(file), 1)\n    props.onError(err, file, uploadFiles.value)\n    props.onChange(file, uploadFiles.value)\n  }\n\n  function handleProgress(ev: ElUploadProgressEvent, rawFile: ElFile) {\n    const file = getFile(rawFile, uploadFiles.value)\n    props.onProgress(ev, file, uploadFiles.value)\n    file.status = 'uploading'\n    file.percentage = ev.percent || 0\n  }\n\n  function handleSuccess(res: any, rawFile: ElFile) {\n    const file = getFile(rawFile, uploadFiles.value)\n    if (file) {\n      file.status = 'success'\n      file.response = res\n      props.onSuccess(res, file, uploadFiles.value)\n      props.onChange(file, uploadFiles.value)\n    }\n  }\n\n  function handleStart(rawFile: ElFile) {\n    const uid = genUid(tempIndex++)\n    rawFile.uid = uid\n    const file: UploadFile = {\n      name: rawFile.name,\n      percentage: 0,\n      status: 'ready',\n      size: rawFile.size,\n      raw: rawFile,\n      uid,\n    }\n    if (props.listType === 'picture-card' || props.listType === 'picture') {\n      try {\n        file.url = URL.createObjectURL(rawFile)\n      } catch (err) {\n        console.error('[Element Error][Upload]', err)\n        props.onError(err, file, uploadFiles.value)\n      }\n    }\n    uploadFiles.value.push(file)\n    props.onChange(file, uploadFiles.value)\n  }\n\n  function handleRemove(file: UploadFile, raw: ElFile) {\n    if (raw) {\n      file = getFile(raw, uploadFiles.value)\n    }\n    const revokeObjectURL = () => {\n      if (file.url && file.url.indexOf('blob:') === 0) {\n        URL.revokeObjectURL(file.url)\n      }\n    }\n    const doRemove = () => {\n      abort(file)\n      const fileList = uploadFiles.value\n      fileList.splice(fileList.indexOf(file), 1)\n      props.onRemove(file, fileList)\n      revokeObjectURL()\n    }\n    if (!props.beforeRemove) {\n      doRemove()\n    } else if (typeof props.beforeRemove === 'function') {\n      const before = props.beforeRemove(file, uploadFiles.value)\n      if (before instanceof Promise) {\n        before\n          .then(() => {\n            doRemove()\n          })\n          .catch(NOOP)\n      } else if (before !== false) {\n        doRemove()\n      }\n    }\n  }\n\n  function submit() {\n    uploadFiles.value\n      .filter((file) => file.status === 'ready')\n      .forEach((file) => {\n        uploadRef.value.upload(file.raw)\n      })\n  }\n\n  watch(\n    () => props.listType,\n    (val: ListType) => {\n      if (val === 'picture-card' || val === 'picture') {\n        uploadFiles.value = uploadFiles.value.map((file) => {\n          if (!file.url && file.raw) {\n            try {\n              file.url = URL.createObjectURL(file.raw)\n            } catch (err) {\n              props.onError(err, file, uploadFiles.value)\n            }\n          }\n          return file\n        })\n      }\n    }\n  )\n\n  watch(\n    () => props.fileList,\n    (fileList: UploadFile[]) => {\n      uploadFiles.value = fileList.map((file) => {\n        const cloneFile = cloneDeep(file)\n        return {\n          ...cloneFile,\n          uid: file.uid || genUid(tempIndex++),\n          status: file.status || 'success',\n        }\n      })\n    },\n    {\n      immediate: true,\n      deep: true,\n    }\n  )\n\n  return {\n    abort,\n    clearFiles,\n    handleError,\n    handleProgress,\n    handleStart,\n    handleSuccess,\n    handleRemove,\n    submit,\n    uploadFiles,\n    uploadRef,\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}