{"ast":null,"code":"import { defineComponent, inject } from 'vue';\nimport DescriptionsCell from './descriptions-cell.mjs';\nimport { elDescriptionsKey } from './token.mjs';\nvar script = defineComponent({\n  name: \"ElDescriptionsRow\",\n  components: {\n    [DescriptionsCell.name]: DescriptionsCell\n  },\n  props: {\n    row: {\n      type: Array\n    }\n  },\n  setup() {\n    const descriptions = inject(elDescriptionsKey, {});\n    return {\n      descriptions\n    };\n  }\n});\nexport { script as default };","map":{"version":3,"names":["script","defineComponent","name","components","DescriptionsCell","props","row","type","Array","setup","descriptions","inject","elDescriptionsKey"],"sources":["../../../../../../packages/components/descriptions/src/descriptions-row.vue"],"sourcesContent":["<template>\n  <template v-if=\"descriptions.direction === 'vertical'\">\n    <tr>\n      <template v-for=\"(cell, index) in row\" :key=\"`tr1-${index}`\">\n        <el-descriptions-cell :cell=\"cell\" tag=\"th\" type=\"label\" />\n      </template>\n    </tr>\n    <tr>\n      <template v-for=\"(cell, index) in row\" :key=\"`tr2-${index}`\">\n        <el-descriptions-cell :cell=\"cell\" tag=\"td\" type=\"content\" />\n      </template>\n    </tr>\n  </template>\n  <tr v-else>\n    <template v-for=\"(cell, index) in row\" :key=\"`tr3-${index}`\">\n      <template v-if=\"descriptions.border\">\n        <el-descriptions-cell :cell=\"cell\" tag=\"td\" type=\"label\" />\n        <el-descriptions-cell :cell=\"cell\" tag=\"td\" type=\"content\" />\n      </template>\n      <el-descriptions-cell v-else :cell=\"cell\" tag=\"td\" type=\"both\" />\n    </template>\n  </tr>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, inject } from 'vue'\nimport DescriptionsCell from './descriptions-cell'\nimport { elDescriptionsKey } from './token'\n\nimport type { IDescriptionsInject } from './descriptions.type'\n\nexport default defineComponent({\n  name: 'ElDescriptionsRow',\n  components: {\n    [DescriptionsCell.name]: DescriptionsCell,\n  },\n  props: {\n    row: {\n      type: Array,\n    },\n  },\n  setup() {\n    const descriptions = inject(elDescriptionsKey, {} as IDescriptionsInject)\n\n    return {\n      descriptions,\n    }\n  },\n})\n</script>\n"],"mappings":";;;AA+BA,IAAAA,MAAA,GAAeC,eAAA,CAAgB;EAC7BC,IAAA,EAAM;EACNC,UAAA,EAAY;IAAA,CACTC,gBAAA,CAAiBF,IAAA,GAAOE;EAAA;EAE3BC,KAAA,EAAO;IACLC,GAAA,EAAK;MACHC,IAAA,EAAMC;IAAA;EAAA;EAGVC,MAAA,EAAQ;IACN,MAAMC,YAAA,GAAeC,MAAA,CAAOC,iBAAA,EAAmB;IAE/C,OAAO;MACLF;IAAA;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}