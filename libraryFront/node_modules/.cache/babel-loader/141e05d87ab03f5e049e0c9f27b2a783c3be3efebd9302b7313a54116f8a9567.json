{"ast":null,"code":"import { defineComponent, provide, getCurrentInstance } from 'vue';\nimport '../../../hooks/index.mjs';\nimport '../../virtual-list/index.mjs';\nimport { useTree } from './composables/useTree.mjs';\nimport './tree-node.mjs';\nimport { treeProps, treeEmits, ROOT_TREE_INJECTION_KEY } from './virtual-tree.mjs';\nimport script$1 from './tree-node.vue_vue_type_script_lang.mjs';\nimport FixedSizeList from '../../virtual-list/src/components/fixed-size-list.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nvar script = defineComponent({\n  name: \"ElTreeV2\",\n  components: {\n    ElTreeNode: script$1,\n    FixedSizeList\n  },\n  props: treeProps,\n  emits: treeEmits,\n  setup(props, ctx) {\n    provide(ROOT_TREE_INJECTION_KEY, {\n      ctx,\n      props,\n      instance: getCurrentInstance()\n    });\n    const {\n      t\n    } = useLocale();\n    const {\n      flattenTree,\n      isNotEmpty,\n      toggleExpand,\n      isExpanded,\n      isIndeterminate,\n      isChecked,\n      isDisabled,\n      isCurrent,\n      isForceHiddenExpandIcon,\n      toggleCheckbox,\n      handleNodeClick,\n      handleNodeCheck,\n      getCurrentNode,\n      getCurrentKey,\n      setCurrentKey,\n      getCheckedKeys,\n      getCheckedNodes,\n      getHalfCheckedKeys,\n      getHalfCheckedNodes,\n      setChecked,\n      setCheckedKeys,\n      filter,\n      setData\n    } = useTree(props, ctx.emit);\n    ctx.expose({\n      getCurrentNode,\n      getCurrentKey,\n      setCurrentKey,\n      getCheckedKeys,\n      getCheckedNodes,\n      getHalfCheckedKeys,\n      getHalfCheckedNodes,\n      setChecked,\n      setCheckedKeys,\n      filter,\n      setData\n    });\n    return {\n      t,\n      flattenTree,\n      itemSize: 26,\n      isNotEmpty,\n      toggleExpand,\n      toggleCheckbox,\n      isExpanded,\n      isIndeterminate,\n      isChecked,\n      isDisabled,\n      isCurrent,\n      isForceHiddenExpandIcon,\n      handleNodeClick,\n      handleNodeCheck\n    };\n  }\n});\nexport { script as default };","map":{"version":3,"names":["script","defineComponent","name","components","ElTreeNode","script$1","FixedSizeList","props","treeProps","emits","treeEmits","setup","ctx","provide","ROOT_TREE_INJECTION_KEY","instance","getCurrentInstance","t","useLocale","flattenTree","isNotEmpty","toggleExpand","isExpanded","isIndeterminate","isChecked","isDisabled","isCurrent","isForceHiddenExpandIcon","toggleCheckbox","handleNodeClick","handleNodeCheck","getCurrentNode","getCurrentKey","setCurrentKey","getCheckedKeys","getCheckedNodes","getHalfCheckedKeys","getHalfCheckedNodes","setChecked","setCheckedKeys","filter","setData","useTree","emit","expose","itemSize"],"sources":["../../../../../../packages/components/tree-v2/src/tree.vue"],"sourcesContent":["<template>\n  <div\n    class=\"el-tree\"\n    :class=\"{\n      'el-tree--highlight-current': highlightCurrent,\n    }\"\n    role=\"tree\"\n  >\n    <fixed-size-list\n      v-if=\"isNotEmpty\"\n      class-name=\"el-tree-virtual-list\"\n      :data=\"flattenTree\"\n      :total=\"flattenTree.length\"\n      :height=\"height\"\n      :item-size=\"itemSize\"\n      :perf-mode=\"perfMode\"\n    >\n      <template #default=\"{ data, index, style }\">\n        <el-tree-node\n          :key=\"data[index].key\"\n          :style=\"style\"\n          :node=\"data[index]\"\n          :expanded=\"isExpanded(data[index])\"\n          :show-checkbox=\"showCheckbox\"\n          :checked=\"isChecked(data[index])\"\n          :indeterminate=\"isIndeterminate(data[index])\"\n          :disabled=\"isDisabled(data[index])\"\n          :current=\"isCurrent(data[index])\"\n          :hidden-expand-icon=\"isForceHiddenExpandIcon(data[index])\"\n          @click=\"handleNodeClick\"\n          @toggle=\"toggleExpand\"\n          @check=\"handleNodeCheck\"\n        ></el-tree-node>\n      </template>\n    </fixed-size-list>\n    <div v-else class=\"el-tree__empty-block\">\n      <span class=\"el-tree__empty-text\">{{\n        emptyText ?? t('el.tree.emptyText')\n      }}</span>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, getCurrentInstance, provide } from 'vue'\nimport { useLocale } from '@element-plus/hooks'\nimport { FixedSizeList } from '@element-plus/components/virtual-list'\nimport { useTree } from './composables/useTree'\nimport ElTreeNode from './tree-node.vue'\nimport { ROOT_TREE_INJECTION_KEY, treeEmits, treeProps } from './virtual-tree'\nimport type { TreeProps } from './types'\n\nexport default defineComponent({\n  name: 'ElTreeV2',\n  components: {\n    ElTreeNode,\n    FixedSizeList,\n  },\n  props: treeProps,\n  emits: treeEmits,\n  setup(props: TreeProps, ctx) {\n    provide(ROOT_TREE_INJECTION_KEY, {\n      ctx,\n      props,\n      instance: getCurrentInstance(),\n    })\n    const { t } = useLocale()\n    const {\n      flattenTree,\n      isNotEmpty,\n      toggleExpand,\n      isExpanded,\n      isIndeterminate,\n      isChecked,\n      isDisabled,\n      isCurrent,\n      isForceHiddenExpandIcon,\n      toggleCheckbox,\n      handleNodeClick,\n      handleNodeCheck,\n      // expose\n      getCurrentNode,\n      getCurrentKey,\n      setCurrentKey,\n      getCheckedKeys,\n      getCheckedNodes,\n      getHalfCheckedKeys,\n      getHalfCheckedNodes,\n      setChecked,\n      setCheckedKeys,\n      filter,\n      setData,\n    } = useTree(props, ctx.emit)\n\n    ctx.expose({\n      getCurrentNode,\n      getCurrentKey,\n      setCurrentKey,\n      getCheckedKeys,\n      getCheckedNodes,\n      getHalfCheckedKeys,\n      getHalfCheckedNodes,\n      setChecked,\n      setCheckedKeys,\n      filter,\n      setData,\n    })\n\n    return {\n      t,\n      flattenTree,\n      itemSize: 26,\n      isNotEmpty,\n      toggleExpand,\n      toggleCheckbox,\n      isExpanded,\n      isIndeterminate,\n      isChecked,\n      isDisabled,\n      isCurrent,\n      isForceHiddenExpandIcon,\n      handleNodeClick,\n      handleNodeCheck,\n    }\n  },\n})\n</script>\n"],"mappings":";;;;;;;;;AAoDA,IAAAA,MAAA,GAAeC,eAAA,CAAgB;EAC7BC,IAAA,EAAM;EACNC,UAAA,EAAY;IAAAC,UAAA,EACVC,QAAA;IACAC;EAAA;EAEFC,KAAA,EAAOC,SAAA;EACPC,KAAA,EAAOC,SAAA;EACPC,MAAMJ,KAAA,EAAkBK,GAAA,EAAK;IAC3BC,OAAA,CAAQC,uBAAA,EAAyB;MAC/BF,GAAA;MACAL,KAAA;MACAQ,QAAA,EAAUC,kBAAA;IAAA;IAEZ,MAAM;MAAEC;IAAA,IAAMC,SAAA;IACd,MAAM;MACJC,WAAA;MACAC,UAAA;MACAC,YAAA;MACAC,UAAA;MACAC,eAAA;MACAC,SAAA;MACAC,UAAA;MACAC,SAAA;MACAC,uBAAA;MACAC,cAAA;MACAC,eAAA;MACAC,eAAA;MAEAC,cAAA;MACAC,aAAA;MACAC,aAAA;MACAC,cAAA;MACAC,eAAA;MACAC,kBAAA;MACAC,mBAAA;MACAC,UAAA;MACAC,cAAA;MACAC,MAAA;MACAC;IAAA,IACEC,OAAA,CAAQnC,KAAA,EAAOK,GAAA,CAAI+B,IAAA;IAEvB/B,GAAA,CAAIgC,MAAA,CAAO;MACTb,cAAA;MACAC,aAAA;MACAC,aAAA;MACAC,cAAA;MACAC,eAAA;MACAC,kBAAA;MACAC,mBAAA;MACAC,UAAA;MACAC,cAAA;MACAC,MAAA;MACAC;IAAA;IAGF,OAAO;MACLxB,CAAA;MACAE,WAAA;MACA0B,QAAA,EAAU;MACVzB,UAAA;MACAC,YAAA;MACAO,cAAA;MACAN,UAAA;MACAC,eAAA;MACAC,SAAA;MACAC,UAAA;MACAC,SAAA;MACAC,uBAAA;MACAE,eAAA;MACAC;IAAA;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}