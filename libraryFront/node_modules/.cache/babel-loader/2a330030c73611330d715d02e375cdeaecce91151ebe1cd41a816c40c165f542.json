{"ast":null,"code":"import { defineComponent, getCurrentInstance, ref, shallowRef, computed, nextTick, watch, onMounted, onUpdated } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { CircleClose, View } from '@element-plus/icons-vue';\nimport { ValidateComponentsMap } from '../../../utils/icon.mjs';\nimport '../../../hooks/index.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../utils/constants.mjs';\nimport '../../../utils/util.mjs';\nimport isServer from '../../../utils/isServer.mjs';\nimport { isKorean } from '../../../utils/isDef.mjs';\nimport { calcTextareaHeight } from './calc-textarea-height.mjs';\nimport { inputProps, inputEmits } from './input.mjs';\nimport { useAttrs } from '../../../hooks/use-attrs/index.mjs';\nimport { useFormItem } from '../../../hooks/use-form-item/index.mjs';\nimport { useSize, useDisabled } from '../../../hooks/use-common-props/index.mjs';\nimport { isObject } from '@vue/shared';\nconst PENDANT_MAP = {\n  suffix: \"append\",\n  prefix: \"prepend\"\n};\nvar script = defineComponent({\n  name: \"ElInput\",\n  components: {\n    ElIcon,\n    CircleClose,\n    IconView: View\n  },\n  inheritAttrs: false,\n  props: inputProps,\n  emits: inputEmits,\n  setup(props, {\n    slots,\n    emit,\n    attrs: rawAttrs\n  }) {\n    const instance = getCurrentInstance();\n    const attrs = useAttrs();\n    const {\n      form,\n      formItem\n    } = useFormItem();\n    const inputSize = useSize();\n    const inputDisabled = useDisabled();\n    const input = ref();\n    const textarea = ref();\n    const focused = ref(false);\n    const hovering = ref(false);\n    const isComposing = ref(false);\n    const passwordVisible = ref(false);\n    const _textareaCalcStyle = shallowRef(props.inputStyle);\n    const inputOrTextarea = computed(() => input.value || textarea.value);\n    const needStatusIcon = computed(() => {\n      var _a;\n      return (_a = form == null ? void 0 : form.statusIcon) != null ? _a : false;\n    });\n    const validateState = computed(() => (formItem == null ? void 0 : formItem.validateState) || \"\");\n    const validateIcon = computed(() => ValidateComponentsMap[validateState.value]);\n    const containerStyle = computed(() => rawAttrs.style);\n    const computedTextareaStyle = computed(() => [props.inputStyle, _textareaCalcStyle.value, {\n      resize: props.resize\n    }]);\n    const nativeInputValue = computed(() => props.modelValue === null || props.modelValue === void 0 ? \"\" : String(props.modelValue));\n    const showClear = computed(() => props.clearable && !inputDisabled.value && !props.readonly && !!nativeInputValue.value && (focused.value || hovering.value));\n    const showPwdVisible = computed(() => props.showPassword && !inputDisabled.value && !props.readonly && (!!nativeInputValue.value || focused.value));\n    const isWordLimitVisible = computed(() => props.showWordLimit && !!attrs.value.maxlength && (props.type === \"text\" || props.type === \"textarea\") && !inputDisabled.value && !props.readonly && !props.showPassword);\n    const textLength = computed(() => Array.from(nativeInputValue.value).length);\n    const inputExceed = computed(() => !!isWordLimitVisible.value && textLength.value > Number(attrs.value.maxlength));\n    const resizeTextarea = () => {\n      const {\n        type,\n        autosize\n      } = props;\n      if (isServer || type !== \"textarea\") return;\n      if (autosize) {\n        const minRows = isObject(autosize) ? autosize.minRows : void 0;\n        const maxRows = isObject(autosize) ? autosize.maxRows : void 0;\n        _textareaCalcStyle.value = {\n          ...calcTextareaHeight(textarea.value, minRows, maxRows)\n        };\n      } else {\n        _textareaCalcStyle.value = {\n          minHeight: calcTextareaHeight(textarea.value).minHeight\n        };\n      }\n    };\n    const setNativeInputValue = () => {\n      const input2 = inputOrTextarea.value;\n      if (!input2 || input2.value === nativeInputValue.value) return;\n      input2.value = nativeInputValue.value;\n    };\n    const calcIconOffset = place => {\n      const {\n        el\n      } = instance.vnode;\n      if (!el) return;\n      const elList = Array.from(el.querySelectorAll(`.el-input__${place}`));\n      const target = elList.find(item => item.parentNode === el);\n      if (!target) return;\n      const pendant = PENDANT_MAP[place];\n      if (slots[pendant]) {\n        target.style.transform = `translateX(${place === \"suffix\" ? \"-\" : \"\"}${el.querySelector(`.el-input-group__${pendant}`).offsetWidth}px)`;\n      } else {\n        target.removeAttribute(\"style\");\n      }\n    };\n    const updateIconOffset = () => {\n      calcIconOffset(\"prefix\");\n      calcIconOffset(\"suffix\");\n    };\n    const handleInput = event => {\n      const {\n        value\n      } = event.target;\n      if (isComposing.value) return;\n      if (value === nativeInputValue.value) return;\n      emit(UPDATE_MODEL_EVENT, value);\n      emit(\"input\", value);\n      nextTick(setNativeInputValue);\n    };\n    const handleChange = event => {\n      emit(\"change\", event.target.value);\n    };\n    const focus = () => {\n      nextTick(() => {\n        var _a;\n        (_a = inputOrTextarea.value) == null ? void 0 : _a.focus();\n      });\n    };\n    const blur = () => {\n      var _a;\n      (_a = inputOrTextarea.value) == null ? void 0 : _a.blur();\n    };\n    const handleFocus = event => {\n      focused.value = true;\n      emit(\"focus\", event);\n    };\n    const handleBlur = event => {\n      var _a;\n      focused.value = false;\n      emit(\"blur\", event);\n      if (props.validateEvent) {\n        (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"blur\");\n      }\n    };\n    const select = () => {\n      var _a;\n      (_a = inputOrTextarea.value) == null ? void 0 : _a.select();\n    };\n    const handleCompositionStart = event => {\n      emit(\"compositionstart\", event);\n      isComposing.value = true;\n    };\n    const handleCompositionUpdate = event => {\n      var _a;\n      emit(\"compositionupdate\", event);\n      const text = (_a = event.target) == null ? void 0 : _a.value;\n      const lastCharacter = text[text.length - 1] || \"\";\n      isComposing.value = !isKorean(lastCharacter);\n    };\n    const handleCompositionEnd = event => {\n      emit(\"compositionend\", event);\n      if (isComposing.value) {\n        isComposing.value = false;\n        handleInput(event);\n      }\n    };\n    const clear = () => {\n      emit(UPDATE_MODEL_EVENT, \"\");\n      emit(\"change\", \"\");\n      emit(\"clear\");\n      emit(\"input\", \"\");\n    };\n    const handlePasswordVisible = () => {\n      passwordVisible.value = !passwordVisible.value;\n      focus();\n    };\n    const suffixVisible = computed(() => !!slots.suffix || !!props.suffixIcon || showClear.value || props.showPassword || isWordLimitVisible.value || !!validateState.value && needStatusIcon.value);\n    watch(() => props.modelValue, () => {\n      var _a;\n      nextTick(resizeTextarea);\n      if (props.validateEvent) {\n        (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"change\");\n      }\n    });\n    watch(nativeInputValue, () => setNativeInputValue());\n    watch(() => props.type, () => {\n      nextTick(() => {\n        setNativeInputValue();\n        resizeTextarea();\n        updateIconOffset();\n      });\n    });\n    onMounted(() => {\n      setNativeInputValue();\n      updateIconOffset();\n      nextTick(resizeTextarea);\n    });\n    onUpdated(() => {\n      nextTick(updateIconOffset);\n    });\n    const onMouseLeave = evt => {\n      hovering.value = false;\n      emit(\"mouseleave\", evt);\n    };\n    const onMouseEnter = evt => {\n      hovering.value = true;\n      emit(\"mouseenter\", evt);\n    };\n    const handleKeydown = evt => {\n      emit(\"keydown\", evt);\n    };\n    return {\n      input,\n      textarea,\n      attrs,\n      inputSize,\n      validateState,\n      validateIcon,\n      containerStyle,\n      computedTextareaStyle,\n      inputDisabled,\n      showClear,\n      showPwdVisible,\n      isWordLimitVisible,\n      textLength,\n      hovering,\n      inputExceed,\n      passwordVisible,\n      inputOrTextarea,\n      suffixVisible,\n      resizeTextarea,\n      handleInput,\n      handleChange,\n      handleFocus,\n      handleBlur,\n      handleCompositionStart,\n      handleCompositionUpdate,\n      handleCompositionEnd,\n      handlePasswordVisible,\n      clear,\n      select,\n      focus,\n      blur,\n      onMouseLeave,\n      onMouseEnter,\n      handleKeydown\n    };\n  }\n});\nexport { script as default };","map":{"version":3,"names":["PENDANT_MAP","suffix","prefix","script","defineComponent","name","components","ElIcon","CircleClose","IconView","View","inheritAttrs","props","inputProps","emits","inputEmits","setup","slots","emit","attrs","rawAttrs","instance","getCurrentInstance","useAttrs","form","formItem","useFormItem","inputSize","useSize","inputDisabled","useDisabled","input","ref","textarea","focused","hovering","isComposing","passwordVisible","_textareaCalcStyle","shallowRef","inputStyle","inputOrTextarea","computed","value","needStatusIcon","_a","statusIcon","validateState","validateIcon","ValidateComponentsMap","containerStyle","style","computedTextareaStyle","resize","nativeInputValue","modelValue","String","showClear","clearable","readonly","showPwdVisible","showPassword","isWordLimitVisible","showWordLimit","maxlength","type","textLength","Array","from","length","inputExceed","Number","resizeTextarea","autosize","isServer","minRows","isObject","maxRows","calcTextareaHeight","minHeight","setNativeInputValue","input2","calcIconOffset","place","el","vnode","elList","querySelectorAll","target","find","item","parentNode","pendant","transform","querySelector","offsetWidth","removeAttribute","updateIconOffset","handleInput","event","UPDATE_MODEL_EVENT","nextTick","handleChange","focus","blur","handleFocus","handleBlur","validateEvent","validate","call","select","handleCompositionStart","handleCompositionUpdate","text","lastCharacter","isKorean","handleCompositionEnd","clear","handlePasswordVisible","suffixVisible","suffixIcon","watch","onMounted","onUpdated","onMouseLeave","evt","onMouseEnter","handleKeydown"],"sources":["../../../../../../packages/components/input/src/input.vue"],"sourcesContent":["<template>\n  <div\n    v-show=\"type !== 'hidden'\"\n    :class=\"[\n      type === 'textarea' ? 'el-textarea' : 'el-input',\n      inputSize ? 'el-input--' + inputSize : '',\n      {\n        'is-disabled': inputDisabled,\n        'is-exceed': inputExceed,\n        'el-input-group': $slots.prepend || $slots.append,\n        'el-input-group--append': $slots.append,\n        'el-input-group--prepend': $slots.prepend,\n        'el-input--prefix': $slots.prefix || prefixIcon,\n        'el-input--suffix':\n          $slots.suffix || suffixIcon || clearable || showPassword,\n        'el-input--suffix--password-clear': clearable && showPassword,\n      },\n      $attrs.class,\n    ]\"\n    :style=\"containerStyle\"\n    @mouseenter=\"onMouseEnter\"\n    @mouseleave=\"onMouseLeave\"\n  >\n    <!-- input -->\n    <template v-if=\"type !== 'textarea'\">\n      <!-- prepend slot -->\n      <div v-if=\"$slots.prepend\" class=\"el-input-group__prepend\">\n        <slot name=\"prepend\" />\n      </div>\n\n      <input\n        ref=\"input\"\n        class=\"el-input__inner\"\n        v-bind=\"attrs\"\n        :type=\"showPassword ? (passwordVisible ? 'text' : 'password') : type\"\n        :disabled=\"inputDisabled\"\n        :readonly=\"readonly\"\n        :autocomplete=\"autocomplete\"\n        :tabindex=\"tabindex\"\n        :aria-label=\"label\"\n        :placeholder=\"placeholder\"\n        :style=\"inputStyle\"\n        @compositionstart=\"handleCompositionStart\"\n        @compositionupdate=\"handleCompositionUpdate\"\n        @compositionend=\"handleCompositionEnd\"\n        @input=\"handleInput\"\n        @focus=\"handleFocus\"\n        @blur=\"handleBlur\"\n        @change=\"handleChange\"\n        @keydown=\"handleKeydown\"\n      />\n\n      <!-- prefix slot -->\n      <span v-if=\"$slots.prefix || prefixIcon\" class=\"el-input__prefix\">\n        <span class=\"el-input__prefix-inner\">\n          <slot name=\"prefix\"></slot>\n          <el-icon v-if=\"prefixIcon\" class=\"el-input__icon\">\n            <component :is=\"prefixIcon\" />\n          </el-icon>\n        </span>\n      </span>\n\n      <!-- suffix slot -->\n      <span v-if=\"suffixVisible\" class=\"el-input__suffix\">\n        <span class=\"el-input__suffix-inner\">\n          <template v-if=\"!showClear || !showPwdVisible || !isWordLimitVisible\">\n            <slot name=\"suffix\"></slot>\n            <el-icon v-if=\"suffixIcon\" class=\"el-input__icon\">\n              <component :is=\"suffixIcon\" />\n            </el-icon>\n          </template>\n          <el-icon\n            v-if=\"showClear\"\n            class=\"el-input__icon el-input__clear\"\n            @mousedown.prevent\n            @click=\"clear\"\n          >\n            <circle-close />\n          </el-icon>\n          <el-icon\n            v-if=\"showPwdVisible\"\n            class=\"el-input__icon el-input__clear\"\n            @click=\"handlePasswordVisible\"\n          >\n            <icon-view />\n          </el-icon>\n          <span v-if=\"isWordLimitVisible\" class=\"el-input__count\">\n            <span class=\"el-input__count-inner\">\n              {{ textLength }} / {{ attrs.maxlength }}\n            </span>\n          </span>\n        </span>\n        <el-icon\n          v-if=\"validateState && validateIcon\"\n          class=\"el-input__icon el-input__validateIcon\"\n        >\n          <component :is=\"validateIcon\" />\n        </el-icon>\n      </span>\n\n      <!-- append slot -->\n      <div v-if=\"$slots.append\" class=\"el-input-group__append\">\n        <slot name=\"append\" />\n      </div>\n    </template>\n\n    <!-- textarea -->\n    <template v-else>\n      <textarea\n        ref=\"textarea\"\n        class=\"el-textarea__inner\"\n        v-bind=\"attrs\"\n        :tabindex=\"tabindex\"\n        :disabled=\"inputDisabled\"\n        :readonly=\"readonly\"\n        :autocomplete=\"autocomplete\"\n        :style=\"computedTextareaStyle\"\n        :aria-label=\"label\"\n        :placeholder=\"placeholder\"\n        @compositionstart=\"handleCompositionStart\"\n        @compositionupdate=\"handleCompositionUpdate\"\n        @compositionend=\"handleCompositionEnd\"\n        @input=\"handleInput\"\n        @focus=\"handleFocus\"\n        @blur=\"handleBlur\"\n        @change=\"handleChange\"\n        @keydown=\"handleKeydown\"\n      />\n      <span v-if=\"isWordLimitVisible\" class=\"el-input__count\">\n        {{ textLength }} / {{ attrs.maxlength }}\n      </span>\n    </template>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  computed,\n  watch,\n  nextTick,\n  getCurrentInstance,\n  ref,\n  shallowRef,\n  onMounted,\n  onUpdated,\n} from 'vue'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { CircleClose, View as IconView } from '@element-plus/icons-vue'\nimport { ValidateComponentsMap } from '@element-plus/utils/icon'\nimport {\n  useAttrs,\n  useDisabled,\n  useFormItem,\n  useSize,\n} from '@element-plus/hooks'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/utils/constants'\nimport { isObject } from '@element-plus/utils/util'\nimport isServer from '@element-plus/utils/isServer'\nimport { isKorean } from '@element-plus/utils/isDef'\nimport { calcTextareaHeight } from './calc-textarea-height'\nimport { inputProps, inputEmits } from './input'\n\nimport type { StyleValue } from '@element-plus/utils/types'\n\ntype TargetElement = HTMLInputElement | HTMLTextAreaElement\n\nconst PENDANT_MAP = {\n  suffix: 'append',\n  prefix: 'prepend',\n} as const\n\nexport default defineComponent({\n  name: 'ElInput',\n\n  components: { ElIcon, CircleClose, IconView },\n\n  inheritAttrs: false,\n\n  props: inputProps,\n  emits: inputEmits,\n\n  setup(props, { slots, emit, attrs: rawAttrs }) {\n    const instance = getCurrentInstance()!\n    const attrs = useAttrs()\n\n    const { form, formItem } = useFormItem()\n    const inputSize = useSize()\n    const inputDisabled = useDisabled()\n\n    const input = ref<HTMLInputElement>()\n    const textarea = ref<HTMLTextAreaElement>()\n    const focused = ref(false)\n    const hovering = ref(false)\n    const isComposing = ref(false)\n    const passwordVisible = ref(false)\n    const _textareaCalcStyle = shallowRef(props.inputStyle)\n\n    const inputOrTextarea = computed(() => input.value || textarea.value)\n\n    const needStatusIcon = computed(() => form?.statusIcon ?? false)\n    const validateState = computed(() => formItem?.validateState || '')\n    const validateIcon = computed(\n      () => ValidateComponentsMap[validateState.value]\n    )\n    const containerStyle = computed(() => rawAttrs.style as StyleValue)\n    const computedTextareaStyle = computed<StyleValue>(() => [\n      props.inputStyle,\n      _textareaCalcStyle.value,\n      { resize: props.resize },\n    ])\n    const nativeInputValue = computed(() =>\n      props.modelValue === null || props.modelValue === undefined\n        ? ''\n        : String(props.modelValue)\n    )\n    const showClear = computed(\n      () =>\n        props.clearable &&\n        !inputDisabled.value &&\n        !props.readonly &&\n        !!nativeInputValue.value &&\n        (focused.value || hovering.value)\n    )\n    const showPwdVisible = computed(\n      () =>\n        props.showPassword &&\n        !inputDisabled.value &&\n        !props.readonly &&\n        (!!nativeInputValue.value || focused.value)\n    )\n    const isWordLimitVisible = computed(\n      () =>\n        props.showWordLimit &&\n        !!attrs.value.maxlength &&\n        (props.type === 'text' || props.type === 'textarea') &&\n        !inputDisabled.value &&\n        !props.readonly &&\n        !props.showPassword\n    )\n    const textLength = computed(() => Array.from(nativeInputValue.value).length)\n    const inputExceed = computed(\n      () =>\n        // show exceed style if length of initial value greater then maxlength\n        !!isWordLimitVisible.value &&\n        textLength.value > Number(attrs.value.maxlength)\n    )\n\n    const resizeTextarea = () => {\n      const { type, autosize } = props\n\n      if (isServer || type !== 'textarea') return\n\n      if (autosize) {\n        const minRows = isObject(autosize) ? autosize.minRows : undefined\n        const maxRows = isObject(autosize) ? autosize.maxRows : undefined\n        _textareaCalcStyle.value = {\n          ...calcTextareaHeight(textarea.value!, minRows, maxRows),\n        }\n      } else {\n        _textareaCalcStyle.value = {\n          minHeight: calcTextareaHeight(textarea.value!).minHeight,\n        }\n      }\n    }\n\n    const setNativeInputValue = () => {\n      const input = inputOrTextarea.value\n      if (!input || input.value === nativeInputValue.value) return\n      input.value = nativeInputValue.value\n    }\n\n    const calcIconOffset = (place: 'prefix' | 'suffix') => {\n      const { el } = instance.vnode\n      if (!el) return\n      const elList: HTMLSpanElement[] = Array.from(\n        el.querySelectorAll(`.el-input__${place}`)\n      )\n      const target = elList.find((item) => item.parentNode === el)\n\n      if (!target) return\n\n      const pendant = PENDANT_MAP[place]\n\n      if (slots[pendant]) {\n        target.style.transform = `translateX(${place === 'suffix' ? '-' : ''}${\n          el.querySelector(`.el-input-group__${pendant}`).offsetWidth\n        }px)`\n      } else {\n        target.removeAttribute('style')\n      }\n    }\n\n    const updateIconOffset = () => {\n      calcIconOffset('prefix')\n      calcIconOffset('suffix')\n    }\n\n    const handleInput = (event: Event) => {\n      const { value } = event.target as TargetElement\n\n      // should not emit input during composition\n      // see: https://github.com/ElemeFE/element/issues/10516\n      if (isComposing.value) return\n\n      // hack for https://github.com/ElemeFE/element/issues/8548\n      // should remove the following line when we don't support IE\n      if (value === nativeInputValue.value) return\n\n      emit(UPDATE_MODEL_EVENT, value)\n      emit('input', value)\n\n      // ensure native input value is controlled\n      // see: https://github.com/ElemeFE/element/issues/12850\n      nextTick(setNativeInputValue)\n    }\n\n    const handleChange = (event: Event) => {\n      emit('change', (event.target as TargetElement).value)\n    }\n\n    const focus = () => {\n      // see: https://github.com/ElemeFE/element/issues/18573\n      nextTick(() => {\n        inputOrTextarea.value?.focus()\n      })\n    }\n\n    const blur = () => {\n      inputOrTextarea.value?.blur()\n    }\n\n    const handleFocus = (event: FocusEvent) => {\n      focused.value = true\n      emit('focus', event)\n    }\n\n    const handleBlur = (event: FocusEvent) => {\n      focused.value = false\n      emit('blur', event)\n      if (props.validateEvent) {\n        formItem?.validate?.('blur')\n      }\n    }\n\n    const select = () => {\n      inputOrTextarea.value?.select()\n    }\n\n    const handleCompositionStart = (event: CompositionEvent) => {\n      emit('compositionstart', event)\n      isComposing.value = true\n    }\n\n    const handleCompositionUpdate = (event: CompositionEvent) => {\n      emit('compositionupdate', event)\n      const text = (event.target as HTMLInputElement)?.value\n      const lastCharacter = text[text.length - 1] || ''\n      isComposing.value = !isKorean(lastCharacter)\n    }\n\n    const handleCompositionEnd = (event: CompositionEvent) => {\n      emit('compositionend', event)\n      if (isComposing.value) {\n        isComposing.value = false\n        handleInput(event)\n      }\n    }\n\n    const clear = () => {\n      emit(UPDATE_MODEL_EVENT, '')\n      emit('change', '')\n      emit('clear')\n      emit('input', '')\n    }\n\n    const handlePasswordVisible = () => {\n      passwordVisible.value = !passwordVisible.value\n      focus()\n    }\n\n    const suffixVisible = computed(\n      () =>\n        !!slots.suffix ||\n        !!props.suffixIcon ||\n        showClear.value ||\n        props.showPassword ||\n        isWordLimitVisible.value ||\n        (!!validateState.value && needStatusIcon.value)\n    )\n\n    watch(\n      () => props.modelValue,\n      () => {\n        nextTick(resizeTextarea)\n        if (props.validateEvent) {\n          formItem?.validate?.('change')\n        }\n      }\n    )\n\n    // native input value is set explicitly\n    // do not use v-model / :value in template\n    // see: https://github.com/ElemeFE/element/issues/14521\n    watch(nativeInputValue, () => setNativeInputValue())\n\n    // when change between <input> and <textarea>,\n    // update DOM dependent value and styles\n    // https://github.com/ElemeFE/element/issues/14857\n    watch(\n      () => props.type,\n      () => {\n        nextTick(() => {\n          setNativeInputValue()\n          resizeTextarea()\n          updateIconOffset()\n        })\n      }\n    )\n\n    onMounted(() => {\n      setNativeInputValue()\n      updateIconOffset()\n      nextTick(resizeTextarea)\n    })\n\n    onUpdated(() => {\n      nextTick(updateIconOffset)\n    })\n\n    const onMouseLeave = (evt: MouseEvent) => {\n      hovering.value = false\n      emit('mouseleave', evt)\n    }\n\n    const onMouseEnter = (evt: MouseEvent) => {\n      hovering.value = true\n      emit('mouseenter', evt)\n    }\n\n    const handleKeydown = (evt: KeyboardEvent) => {\n      emit('keydown', evt)\n    }\n\n    return {\n      input,\n      textarea,\n      attrs,\n      inputSize,\n      validateState,\n      validateIcon,\n      containerStyle,\n      computedTextareaStyle,\n      inputDisabled,\n      showClear,\n      showPwdVisible,\n      isWordLimitVisible,\n      textLength,\n      hovering,\n      inputExceed,\n      passwordVisible,\n      inputOrTextarea,\n      suffixVisible,\n\n      resizeTextarea,\n      handleInput,\n      handleChange,\n      handleFocus,\n      handleBlur,\n      handleCompositionStart,\n      handleCompositionUpdate,\n      handleCompositionEnd,\n      handlePasswordVisible,\n      clear,\n      select,\n      focus,\n      blur,\n      onMouseLeave,\n      onMouseEnter,\n      handleKeydown,\n    }\n  },\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}