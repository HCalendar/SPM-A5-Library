{"ast":null,"code":"import { isNumber } from '../../../../utils/util.mjs';\nimport { throwError } from '../../../../utils/error.mjs';\nimport createGrid from '../builders/build-grid.mjs';\nimport { AUTO_ALIGNMENT, CENTERED_ALIGNMENT, END_ALIGNMENT, START_ALIGNMENT, SMART_ALIGNMENT } from '../defaults.mjs';\nconst SCOPE = \"ElFixedSizeGrid\";\nconst FixedSizeGrid = createGrid({\n  name: \"ElFixedSizeGrid\",\n  getColumnPosition: ({\n    columnWidth\n  }, index) => [columnWidth, index * columnWidth],\n  getRowPosition: ({\n    rowHeight\n  }, index) => [rowHeight, index * rowHeight],\n  getEstimatedTotalHeight: ({\n    totalRow,\n    rowHeight\n  }) => rowHeight * totalRow,\n  getEstimatedTotalWidth: ({\n    totalColumn,\n    columnWidth\n  }) => columnWidth * totalColumn,\n  getColumnOffset: ({\n    totalColumn,\n    columnWidth,\n    width\n  }, columnIndex, alignment, scrollLeft, _, scrollBarWidth) => {\n    width = Number(width);\n    const lastColumnOffset = Math.max(0, totalColumn * columnWidth - width);\n    const maxOffset = Math.min(lastColumnOffset, columnIndex * columnWidth);\n    const minOffset = Math.max(0, columnIndex * columnWidth - width + scrollBarWidth + columnWidth);\n    if (alignment === \"smart\") {\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\n        alignment = AUTO_ALIGNMENT;\n      } else {\n        alignment = CENTERED_ALIGNMENT;\n      }\n    }\n    switch (alignment) {\n      case START_ALIGNMENT:\n        return maxOffset;\n      case END_ALIGNMENT:\n        return minOffset;\n      case CENTERED_ALIGNMENT:\n        {\n          const middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n          if (middleOffset < Math.ceil(width / 2)) {\n            return 0;\n          } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\n            return lastColumnOffset;\n          } else {\n            return middleOffset;\n          }\n        }\n      case AUTO_ALIGNMENT:\n      default:\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n          return scrollLeft;\n        } else if (minOffset > maxOffset) {\n          return minOffset;\n        } else if (scrollLeft < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n  getRowOffset: ({\n    rowHeight,\n    height,\n    totalRow\n  }, rowIndex, align, scrollTop, _, scrollBarWidth) => {\n    height = Number(height);\n    const lastRowOffset = Math.max(0, totalRow * rowHeight - height);\n    const maxOffset = Math.min(lastRowOffset, rowIndex * rowHeight);\n    const minOffset = Math.max(0, rowIndex * rowHeight - height + scrollBarWidth + rowHeight);\n    if (align === SMART_ALIGNMENT) {\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\n        align = AUTO_ALIGNMENT;\n      } else {\n        align = CENTERED_ALIGNMENT;\n      }\n    }\n    switch (align) {\n      case START_ALIGNMENT:\n        return maxOffset;\n      case END_ALIGNMENT:\n        return minOffset;\n      case CENTERED_ALIGNMENT:\n        {\n          const middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n          if (middleOffset < Math.ceil(height / 2)) {\n            return 0;\n          } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\n            return lastRowOffset;\n          } else {\n            return middleOffset;\n          }\n        }\n      case AUTO_ALIGNMENT:\n      default:\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n          return scrollTop;\n        } else if (minOffset > maxOffset) {\n          return minOffset;\n        } else if (scrollTop < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n  getColumnStartIndexForOffset: ({\n    columnWidth,\n    totalColumn\n  }, scrollLeft) => Math.max(0, Math.min(totalColumn - 1, Math.floor(scrollLeft / columnWidth))),\n  getColumnStopIndexForStartIndex: ({\n    columnWidth,\n    totalColumn,\n    width\n  }, startIndex, scrollLeft) => {\n    const left = startIndex * columnWidth;\n    const visibleColumnsCount = Math.ceil((width + scrollLeft - left) / columnWidth);\n    return Math.max(0, Math.min(totalColumn - 1, startIndex + visibleColumnsCount - 1));\n  },\n  getRowStartIndexForOffset: ({\n    rowHeight,\n    totalRow\n  }, scrollTop) => Math.max(0, Math.min(totalRow - 1, Math.floor(scrollTop / rowHeight))),\n  getRowStopIndexForStartIndex: ({\n    rowHeight,\n    totalRow,\n    height\n  }, startIndex, scrollTop) => {\n    const top = startIndex * rowHeight;\n    const numVisibleRows = Math.ceil((height + scrollTop - top) / rowHeight);\n    return Math.max(0, Math.min(totalRow - 1, startIndex + numVisibleRows - 1));\n  },\n  initCache: () => void 0,\n  clearCache: true,\n  validateProps: ({\n    columnWidth,\n    rowHeight\n  }) => {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (!isNumber(columnWidth)) {\n        throwError(SCOPE, `\n          \"columnWidth\" must be passed as number,\n            instead ${typeof columnWidth} was given.\n        `);\n      }\n      if (!isNumber(rowHeight)) {\n        throwError(SCOPE, `\n          \"columnWidth\" must be passed as number,\n            instead ${typeof rowHeight} was given.\n        `);\n      }\n    }\n  }\n});\nexport { FixedSizeGrid as default };","map":{"version":3,"names":["SCOPE","FixedSizeGrid","createGrid","name","getColumnPosition","columnWidth","index","getRowPosition","rowHeight","getEstimatedTotalHeight","totalRow","getEstimatedTotalWidth","totalColumn","getColumnOffset","width","columnIndex","alignment","scrollLeft","_","scrollBarWidth","Number","lastColumnOffset","Math","max","maxOffset","min","minOffset","AUTO_ALIGNMENT","CENTERED_ALIGNMENT","START_ALIGNMENT","END_ALIGNMENT","middleOffset","round","ceil","floor","getRowOffset","height","rowIndex","align","scrollTop","lastRowOffset","SMART_ALIGNMENT","getColumnStartIndexForOffset","getColumnStopIndexForStartIndex","startIndex","left","visibleColumnsCount","getRowStartIndexForOffset","getRowStopIndexForStartIndex","top","numVisibleRows","initCache","clearCache","validateProps","process","env","NODE_ENV","isNumber","throwError"],"sources":["../../../../../../../packages/components/virtual-list/src/components/fixed-size-grid.ts"],"sourcesContent":["import { isNumber } from '@element-plus/utils/util'\nimport { throwError } from '@element-plus/utils/error'\nimport createGrid from '../builders/build-grid'\n\nimport {\n  AUTO_ALIGNMENT,\n  SMART_ALIGNMENT,\n  START_ALIGNMENT,\n  CENTERED_ALIGNMENT,\n  END_ALIGNMENT,\n} from '../defaults'\n\nconst SCOPE = 'ElFixedSizeGrid'\n\nconst FixedSizeGrid = createGrid({\n  name: 'ElFixedSizeGrid',\n  getColumnPosition: ({ columnWidth }, index) => [\n    columnWidth as number,\n    index * (columnWidth as number),\n  ],\n\n  getRowPosition: ({ rowHeight }, index) => [\n    rowHeight as number,\n    index * (rowHeight as number),\n  ],\n\n  getEstimatedTotalHeight: ({ totalRow, rowHeight }) =>\n    (rowHeight as number) * totalRow,\n\n  getEstimatedTotalWidth: ({ totalColumn, columnWidth }) =>\n    (columnWidth as number) * totalColumn,\n\n  getColumnOffset: (\n    { totalColumn, columnWidth, width },\n    columnIndex,\n    alignment,\n    scrollLeft,\n    _,\n    scrollBarWidth\n  ) => {\n    width = Number(width)\n    const lastColumnOffset = Math.max(\n      0,\n      totalColumn * (columnWidth as number) - width\n    )\n    const maxOffset = Math.min(\n      lastColumnOffset,\n      columnIndex * (columnWidth as number)\n    )\n    const minOffset = Math.max(\n      0,\n      columnIndex * (columnWidth as number) -\n        width +\n        scrollBarWidth +\n        (columnWidth as number)\n    )\n\n    if (alignment === 'smart') {\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\n        alignment = AUTO_ALIGNMENT\n      } else {\n        alignment = CENTERED_ALIGNMENT\n      }\n    }\n\n    switch (alignment) {\n      case START_ALIGNMENT:\n        return maxOffset\n      case END_ALIGNMENT:\n        return minOffset\n      case CENTERED_ALIGNMENT: {\n        const middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2)\n        if (middleOffset < Math.ceil(width / 2)) {\n          return 0\n        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\n          return lastColumnOffset\n        } else {\n          return middleOffset\n        }\n      }\n      case AUTO_ALIGNMENT:\n      default:\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n          return scrollLeft\n        } else if (minOffset > maxOffset) {\n          return minOffset\n        } else if (scrollLeft < minOffset) {\n          return minOffset\n        } else {\n          return maxOffset\n        }\n    }\n  },\n\n  getRowOffset: (\n    { rowHeight, height, totalRow },\n    rowIndex,\n    align,\n    scrollTop,\n    _,\n    scrollBarWidth\n  ): number => {\n    height = Number(height)\n    const lastRowOffset = Math.max(0, totalRow * (rowHeight as number) - height)\n    const maxOffset = Math.min(lastRowOffset, rowIndex * (rowHeight as number))\n    const minOffset = Math.max(\n      0,\n      rowIndex * (rowHeight as number) -\n        height +\n        scrollBarWidth +\n        (rowHeight as number)\n    )\n\n    if (align === SMART_ALIGNMENT) {\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\n        align = AUTO_ALIGNMENT\n      } else {\n        align = CENTERED_ALIGNMENT\n      }\n    }\n\n    switch (align) {\n      case START_ALIGNMENT:\n        return maxOffset\n      case END_ALIGNMENT:\n        return minOffset\n      case CENTERED_ALIGNMENT: {\n        const middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2)\n        if (middleOffset < Math.ceil(height / 2)) {\n          return 0\n        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\n          return lastRowOffset\n        } else {\n          return middleOffset\n        }\n      }\n      case AUTO_ALIGNMENT:\n      default:\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n          return scrollTop\n        } else if (minOffset > maxOffset) {\n          return minOffset\n        } else if (scrollTop < minOffset) {\n          return minOffset\n        } else {\n          return maxOffset\n        }\n    }\n  },\n\n  getColumnStartIndexForOffset: ({ columnWidth, totalColumn }, scrollLeft) =>\n    Math.max(\n      0,\n      Math.min(\n        totalColumn - 1,\n        Math.floor(scrollLeft / (columnWidth as number))\n      )\n    ),\n\n  getColumnStopIndexForStartIndex: (\n    { columnWidth, totalColumn, width },\n    startIndex: number,\n    scrollLeft: number\n  ): number => {\n    const left = startIndex * (columnWidth as number)\n    const visibleColumnsCount = Math.ceil(\n      ((width as number) + scrollLeft - left) / (columnWidth as number)\n    )\n    return Math.max(\n      0,\n      Math.min(totalColumn - 1, startIndex + visibleColumnsCount - 1)\n    )\n  },\n\n  getRowStartIndexForOffset: (\n    { rowHeight, totalRow },\n    scrollTop: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(totalRow - 1, Math.floor(scrollTop / (rowHeight as number)))\n    ),\n\n  getRowStopIndexForStartIndex: (\n    { rowHeight, totalRow, height },\n    startIndex: number,\n    scrollTop: number\n  ): number => {\n    const top = startIndex * (rowHeight as number)\n    const numVisibleRows = Math.ceil(\n      ((height as number) + scrollTop - top) / (rowHeight as number)\n    )\n    return Math.max(\n      0,\n      Math.min(\n        totalRow - 1,\n        startIndex + numVisibleRows - 1 // -1 is because stop index is inclusive\n      )\n    )\n  },\n  /**\n   * Fixed size grid does not need this cache\n   * Using any to bypass it, TODO: Using type inference to fix this.\n   */\n  initCache: () => undefined as any,\n\n  clearCache: true,\n\n  validateProps: ({ columnWidth, rowHeight }) => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!isNumber(columnWidth)) {\n        throwError(\n          SCOPE,\n          `\n          \"columnWidth\" must be passed as number,\n            instead ${typeof columnWidth} was given.\n        `\n        )\n      }\n\n      if (!isNumber(rowHeight)) {\n        throwError(\n          SCOPE,\n          `\n          \"columnWidth\" must be passed as number,\n            instead ${typeof rowHeight} was given.\n        `\n        )\n      }\n    }\n  },\n})\n\nexport default FixedSizeGrid\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}