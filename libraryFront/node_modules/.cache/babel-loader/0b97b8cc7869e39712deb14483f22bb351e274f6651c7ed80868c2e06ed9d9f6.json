{"ast":null,"code":"import { resolveComponent, resolveDirective, openBlock, createBlock, mergeProps, withCtx, withDirectives, normalizeClass, resolveDynamicComponent, createCommentVNode, createElementBlock, createElementVNode, renderSlot, toDisplayString, withModifiers } from 'vue';\nconst _hoisted_1 = [\"name\", \"placeholder\", \"value\", \"disabled\", \"readonly\"];\nconst _hoisted_2 = {\n  class: \"el-range-separator\"\n};\nconst _hoisted_3 = [\"name\", \"placeholder\", \"value\", \"disabled\", \"readonly\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_el_input = resolveComponent(\"el-input\");\n  const _component_el_popper = resolveComponent(\"el-popper\");\n  const _directive_clickoutside = resolveDirective(\"clickoutside\");\n  return openBlock(), createBlock(_component_el_popper, mergeProps({\n    ref: \"refPopper\",\n    visible: _ctx.pickerVisible,\n    \"onUpdate:visible\": _cache[15] || (_cache[15] = $event => _ctx.pickerVisible = $event),\n    \"manual-mode\": \"\",\n    effect: _ctx.Effect.LIGHT,\n    pure: \"\",\n    trigger: \"click\"\n  }, _ctx.$attrs, {\n    \"popper-class\": `el-picker__popper ${_ctx.popperClass}`,\n    \"popper-options\": _ctx.elPopperOptions,\n    \"fallback-placements\": [\"bottom\", \"top\", \"right\", \"left\"],\n    transition: \"el-zoom-in-top\",\n    \"gpu-acceleration\": false,\n    \"stop-popper-mouse-event\": false,\n    \"append-to-body\": \"\",\n    onBeforeEnter: _cache[16] || (_cache[16] = $event => _ctx.pickerActualVisible = true),\n    onAfterLeave: _cache[17] || (_cache[17] = $event => _ctx.pickerActualVisible = false)\n  }), {\n    trigger: withCtx(() => [!_ctx.isRangeInput ? withDirectives((openBlock(), createBlock(_component_el_input, {\n      key: 0,\n      \"model-value\": _ctx.displayValue,\n      name: _ctx.name,\n      size: _ctx.pickerSize,\n      disabled: _ctx.pickerDisabled,\n      placeholder: _ctx.placeholder,\n      class: normalizeClass([\"el-date-editor\", \"el-date-editor--\" + _ctx.type]),\n      readonly: !_ctx.editable || _ctx.readonly || _ctx.isDatesPicker || _ctx.type === \"week\",\n      onInput: _ctx.onUserInput,\n      onFocus: _ctx.handleFocus,\n      onKeydown: _ctx.handleKeydown,\n      onChange: _ctx.handleChange,\n      onMouseenter: _ctx.onMouseEnter,\n      onMouseleave: _ctx.onMouseLeave\n    }, {\n      prefix: withCtx(() => [_ctx.triggerIcon ? (openBlock(), createBlock(_component_el_icon, {\n        key: 0,\n        class: \"el-input__icon\",\n        onClick: _ctx.handleFocus\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.triggerIcon)))]),\n        _: 1\n      }, 8, [\"onClick\"])) : createCommentVNode(\"v-if\", true)]),\n      suffix: withCtx(() => [_ctx.showClose && _ctx.clearIcon ? (openBlock(), createBlock(_component_el_icon, {\n        key: 0,\n        class: \"el-input__icon clear-icon\",\n        onClick: _ctx.onClearIconClick\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.clearIcon)))]),\n        _: 1\n      }, 8, [\"onClick\"])) : createCommentVNode(\"v-if\", true)]),\n      _: 1\n    }, 8, [\"model-value\", \"name\", \"size\", \"disabled\", \"placeholder\", \"class\", \"readonly\", \"onInput\", \"onFocus\", \"onKeydown\", \"onChange\", \"onMouseenter\", \"onMouseleave\"])), [[_directive_clickoutside, _ctx.onClickOutside, _ctx.popperPaneRef]]) : withDirectives((openBlock(), createElementBlock(\"div\", {\n      key: 1,\n      class: normalizeClass([\"el-date-editor el-range-editor el-input__inner\", [\"el-date-editor--\" + _ctx.type, _ctx.pickerSize ? `el-range-editor--${_ctx.pickerSize}` : \"\", _ctx.pickerDisabled ? \"is-disabled\" : \"\", _ctx.pickerVisible ? \"is-active\" : \"\"]]),\n      onClick: _cache[6] || (_cache[6] = (...args) => _ctx.handleFocus && _ctx.handleFocus(...args)),\n      onMouseenter: _cache[7] || (_cache[7] = (...args) => _ctx.onMouseEnter && _ctx.onMouseEnter(...args)),\n      onMouseleave: _cache[8] || (_cache[8] = (...args) => _ctx.onMouseLeave && _ctx.onMouseLeave(...args)),\n      onKeydown: _cache[9] || (_cache[9] = (...args) => _ctx.handleKeydown && _ctx.handleKeydown(...args))\n    }, [_ctx.triggerIcon ? (openBlock(), createBlock(_component_el_icon, {\n      key: 0,\n      class: \"el-input__icon el-range__icon\",\n      onClick: _ctx.handleFocus\n    }, {\n      default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.triggerIcon)))]),\n      _: 1\n    }, 8, [\"onClick\"])) : createCommentVNode(\"v-if\", true), createElementVNode(\"input\", {\n      autocomplete: \"off\",\n      name: _ctx.name && _ctx.name[0],\n      placeholder: _ctx.startPlaceholder,\n      value: _ctx.displayValue && _ctx.displayValue[0],\n      disabled: _ctx.pickerDisabled,\n      readonly: !_ctx.editable || _ctx.readonly,\n      class: \"el-range-input\",\n      onInput: _cache[0] || (_cache[0] = (...args) => _ctx.handleStartInput && _ctx.handleStartInput(...args)),\n      onChange: _cache[1] || (_cache[1] = (...args) => _ctx.handleStartChange && _ctx.handleStartChange(...args)),\n      onFocus: _cache[2] || (_cache[2] = (...args) => _ctx.handleFocus && _ctx.handleFocus(...args))\n    }, null, 40, _hoisted_1), renderSlot(_ctx.$slots, \"range-separator\", {}, () => [createElementVNode(\"span\", _hoisted_2, toDisplayString(_ctx.rangeSeparator), 1)]), createElementVNode(\"input\", {\n      autocomplete: \"off\",\n      name: _ctx.name && _ctx.name[1],\n      placeholder: _ctx.endPlaceholder,\n      value: _ctx.displayValue && _ctx.displayValue[1],\n      disabled: _ctx.pickerDisabled,\n      readonly: !_ctx.editable || _ctx.readonly,\n      class: \"el-range-input\",\n      onFocus: _cache[3] || (_cache[3] = (...args) => _ctx.handleFocus && _ctx.handleFocus(...args)),\n      onInput: _cache[4] || (_cache[4] = (...args) => _ctx.handleEndInput && _ctx.handleEndInput(...args)),\n      onChange: _cache[5] || (_cache[5] = (...args) => _ctx.handleEndChange && _ctx.handleEndChange(...args))\n    }, null, 40, _hoisted_3), _ctx.clearIcon ? (openBlock(), createBlock(_component_el_icon, {\n      key: 1,\n      class: normalizeClass([\"el-input__icon el-range__close-icon\", {\n        \"el-range__close-icon--hidden\": !_ctx.showClose\n      }]),\n      onClick: _ctx.onClearIconClick\n    }, {\n      default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.clearIcon)))]),\n      _: 1\n    }, 8, [\"class\", \"onClick\"])) : createCommentVNode(\"v-if\", true)], 34)), [[_directive_clickoutside, _ctx.onClickOutside, _ctx.popperPaneRef]])]),\n    default: withCtx(() => [renderSlot(_ctx.$slots, \"default\", {\n      visible: _ctx.pickerVisible,\n      actualVisible: _ctx.pickerActualVisible,\n      parsedValue: _ctx.parsedValue,\n      format: _ctx.format,\n      unlinkPanels: _ctx.unlinkPanels,\n      type: _ctx.type,\n      defaultValue: _ctx.defaultValue,\n      onPick: _cache[10] || (_cache[10] = (...args) => _ctx.onPick && _ctx.onPick(...args)),\n      onSelectRange: _cache[11] || (_cache[11] = (...args) => _ctx.setSelectionRange && _ctx.setSelectionRange(...args)),\n      onSetPickerOption: _cache[12] || (_cache[12] = (...args) => _ctx.onSetPickerOption && _ctx.onSetPickerOption(...args)),\n      onCalendarChange: _cache[13] || (_cache[13] = (...args) => _ctx.onCalendarChange && _ctx.onCalendarChange(...args)),\n      onMousedown: _cache[14] || (_cache[14] = withModifiers(() => {}, [\"stop\"]))\n    })]),\n    _: 3\n  }, 16, [\"visible\", \"effect\", \"popper-class\", \"popper-options\"]);\n}\nexport { render };","map":{"version":3,"names":["class","createBlock","_component_el_popper","mergeProps","ref","visible","_ctx","pickerVisible","$event","effect","Effect","LIGHT","pure","trigger","$attrs","popperClass","elPopperOptions","transition","onBeforeEnter","_cache","pickerActualVisible","onAfterLeave","withCtx","isRangeInput","withDirectives","openBlock","_component_el_input","displayValue","name","size","pickerSize","disabled","pickerDisabled","placeholder","normalizeClass","type","readonly","editable","isDatesPicker","onInput","onUserInput","onFocus","handleFocus","onKeydown","handleKeydown","onChange","handleChange","onMouseenter","onMouseEnter","onMouseleave","onMouseLeave","prefix","triggerIcon","_component_el_icon","onClick","resolveDynamicComponent","suffix","showClose","clearIcon","onClearIconClick","onClickOutside","popperPaneRef","createElementBlock","args","createElementVNode","autocomplete","startPlaceholder","value","handleStartInput","handleStartChange","renderSlot","$slots","_hoisted_2","toDisplayString","rangeSeparator","endPlaceholder","handleEndInput","handleEndChange","default","actualVisible","parsedValue","format","unlinkPanels","defaultValue","onPick","onSelectRange","setSelectionRange","onSetPickerOption","onCalendarChange","onMousedown","withModifiers"],"sources":["../../../../../../../packages/components/time-picker/src/common/picker.vue?vue&type=template&id=1d54be91&lang.js"],"sourcesContent":["<template>\n  <el-popper\n    ref=\"refPopper\"\n    v-model:visible=\"pickerVisible\"\n    manual-mode\n    :effect=\"Effect.LIGHT\"\n    pure\n    trigger=\"click\"\n    v-bind=\"$attrs\"\n    :popper-class=\"`el-picker__popper ${popperClass}`\"\n    :popper-options=\"elPopperOptions\"\n    :fallback-placements=\"['bottom', 'top', 'right', 'left']\"\n    transition=\"el-zoom-in-top\"\n    :gpu-acceleration=\"false\"\n    :stop-popper-mouse-event=\"false\"\n    append-to-body\n    @before-enter=\"pickerActualVisible = true\"\n    @after-leave=\"pickerActualVisible = false\"\n  >\n    <template #trigger>\n      <el-input\n        v-if=\"!isRangeInput\"\n        v-clickoutside:[popperPaneRef]=\"onClickOutside\"\n        :model-value=\"displayValue\"\n        :name=\"name\"\n        :size=\"pickerSize\"\n        :disabled=\"pickerDisabled\"\n        :placeholder=\"placeholder\"\n        class=\"el-date-editor\"\n        :class=\"'el-date-editor--' + type\"\n        :readonly=\"!editable || readonly || isDatesPicker || type === 'week'\"\n        @input=\"onUserInput\"\n        @focus=\"handleFocus\"\n        @keydown=\"handleKeydown\"\n        @change=\"handleChange\"\n        @mouseenter=\"onMouseEnter\"\n        @mouseleave=\"onMouseLeave\"\n      >\n        <template #prefix>\n          <el-icon\n            v-if=\"triggerIcon\"\n            class=\"el-input__icon\"\n            @click=\"handleFocus\"\n          >\n            <component :is=\"triggerIcon\"></component>\n          </el-icon>\n        </template>\n        <template #suffix>\n          <el-icon\n            v-if=\"showClose && clearIcon\"\n            class=\"el-input__icon clear-icon\"\n            @click=\"onClearIconClick\"\n          >\n            <component :is=\"clearIcon\" />\n          </el-icon>\n        </template>\n      </el-input>\n      <div\n        v-else\n        v-clickoutside:[popperPaneRef]=\"onClickOutside\"\n        class=\"el-date-editor el-range-editor el-input__inner\"\n        :class=\"[\n          'el-date-editor--' + type,\n          pickerSize ? `el-range-editor--${pickerSize}` : '',\n          pickerDisabled ? 'is-disabled' : '',\n          pickerVisible ? 'is-active' : '',\n        ]\"\n        @click=\"handleFocus\"\n        @mouseenter=\"onMouseEnter\"\n        @mouseleave=\"onMouseLeave\"\n        @keydown=\"handleKeydown\"\n      >\n        <el-icon\n          v-if=\"triggerIcon\"\n          class=\"el-input__icon el-range__icon\"\n          @click=\"handleFocus\"\n        >\n          <component :is=\"triggerIcon\"></component>\n        </el-icon>\n        <input\n          autocomplete=\"off\"\n          :name=\"name && name[0]\"\n          :placeholder=\"startPlaceholder\"\n          :value=\"displayValue && displayValue[0]\"\n          :disabled=\"pickerDisabled\"\n          :readonly=\"!editable || readonly\"\n          class=\"el-range-input\"\n          @input=\"handleStartInput\"\n          @change=\"handleStartChange\"\n          @focus=\"handleFocus\"\n        />\n        <slot name=\"range-separator\">\n          <span class=\"el-range-separator\">{{ rangeSeparator }}</span>\n        </slot>\n        <input\n          autocomplete=\"off\"\n          :name=\"name && name[1]\"\n          :placeholder=\"endPlaceholder\"\n          :value=\"displayValue && displayValue[1]\"\n          :disabled=\"pickerDisabled\"\n          :readonly=\"!editable || readonly\"\n          class=\"el-range-input\"\n          @focus=\"handleFocus\"\n          @input=\"handleEndInput\"\n          @change=\"handleEndChange\"\n        />\n        <el-icon\n          v-if=\"clearIcon\"\n          class=\"el-input__icon el-range__close-icon\"\n          :class=\"{\n            'el-range__close-icon--hidden': !showClose,\n          }\"\n          @click=\"onClearIconClick\"\n        >\n          <component :is=\"clearIcon\" />\n        </el-icon>\n      </div>\n    </template>\n    <template #default>\n      <slot\n        :visible=\"pickerVisible\"\n        :actual-visible=\"pickerActualVisible\"\n        :parsed-value=\"parsedValue\"\n        :format=\"format\"\n        :unlink-panels=\"unlinkPanels\"\n        :type=\"type\"\n        :default-value=\"defaultValue\"\n        @pick=\"onPick\"\n        @select-range=\"setSelectionRange\"\n        @set-picker-option=\"onSetPickerOption\"\n        @calendar-change=\"onCalendarChange\"\n        @mousedown.stop\n      ></slot>\n    </template>\n  </el-popper>\n</template>\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  ref,\n  computed,\n  nextTick,\n  inject,\n  watch,\n  provide,\n} from 'vue'\nimport dayjs from 'dayjs'\nimport isEqual from 'lodash/isEqual'\nimport { useLocale, useSize } from '@element-plus/hooks'\nimport { ClickOutside } from '@element-plus/directives'\nimport { elFormKey, elFormItemKey } from '@element-plus/tokens'\nimport ElInput from '@element-plus/components/input'\nimport ElIcon from '@element-plus/components/icon'\nimport ElPopper, { Effect } from '@element-plus/components/popper'\nimport { EVENT_CODE } from '@element-plus/utils/aria'\nimport { isEmpty } from '@element-plus/utils/util'\nimport { Clock, Calendar } from '@element-plus/icons-vue'\nimport { timePickerDefaultProps } from './props'\n\nimport type { Dayjs } from 'dayjs'\nimport type { ElFormContext, ElFormItemContext } from '@element-plus/tokens'\nimport type { Options } from '@popperjs/core'\n\ninterface PickerOptions {\n  isValidValue: (date: Dayjs) => boolean\n  handleKeydown: (event: KeyboardEvent) => void\n  parseUserInput: (value: Dayjs) => dayjs.Dayjs\n  formatToString: (value: Dayjs) => string | string[]\n  getRangeAvailableTime: (date: Dayjs) => dayjs.Dayjs\n  getDefaultValue: () => Dayjs\n  panelReady: boolean\n  handleClear: () => void\n}\n\n// Date object and string\nconst dateEquals = function (a: Date | any, b: Date | any) {\n  const aIsDate = a instanceof Date\n  const bIsDate = b instanceof Date\n  if (aIsDate && bIsDate) {\n    return a.getTime() === b.getTime()\n  }\n  if (!aIsDate && !bIsDate) {\n    return a === b\n  }\n  return false\n}\n\nconst valueEquals = function (a: Array<Date> | any, b: Array<Date> | any) {\n  const aIsArray = a instanceof Array\n  const bIsArray = b instanceof Array\n  if (aIsArray && bIsArray) {\n    if (a.length !== b.length) {\n      return false\n    }\n    return (a as Array<Date>).every((item, index) => dateEquals(item, b[index]))\n  }\n  if (!aIsArray && !bIsArray) {\n    return dateEquals(a, b)\n  }\n  return false\n}\n\nconst parser = function (\n  date: Date | string,\n  format: string,\n  lang: string\n): Dayjs {\n  const day = isEmpty(format)\n    ? dayjs(date).locale(lang)\n    : dayjs(date, format).locale(lang)\n  return day.isValid() ? day : undefined\n}\n\nconst formatter = function (date: number | Date, format: string, lang: string) {\n  return isEmpty(format) ? date : dayjs(date).locale(lang).format(format)\n}\n\nexport default defineComponent({\n  name: 'Picker',\n  components: {\n    ElInput,\n    ElPopper,\n    ElIcon,\n  },\n  directives: { clickoutside: ClickOutside },\n  props: timePickerDefaultProps,\n  emits: ['update:modelValue', 'change', 'focus', 'blur', 'calendar-change'],\n  setup(props, ctx) {\n    const { lang } = useLocale()\n\n    const elForm = inject(elFormKey, {} as ElFormContext)\n    const elFormItem = inject(elFormItemKey, {} as ElFormItemContext)\n    const elPopperOptions = inject('ElPopperOptions', {} as Options)\n\n    const refPopper = ref(null)\n    const pickerVisible = ref(false)\n    const pickerActualVisible = ref(false)\n    const valueOnOpen = ref(null)\n\n    watch(pickerVisible, (val) => {\n      if (!val) {\n        userInput.value = null\n        nextTick(() => {\n          emitChange(props.modelValue)\n        })\n        ctx.emit('blur')\n        blurInput()\n        props.validateEvent && elFormItem.validate?.('blur')\n      } else {\n        valueOnOpen.value = props.modelValue\n      }\n    })\n    const emitChange = (val, isClear?: boolean) => {\n      // determine user real change only\n      if (isClear || !valueEquals(val, valueOnOpen.value)) {\n        ctx.emit('change', val)\n        props.validateEvent && elFormItem.validate?.('change')\n      }\n    }\n    const emitInput = (val) => {\n      if (!valueEquals(props.modelValue, val)) {\n        let formatValue\n        if (Array.isArray(val)) {\n          formatValue = val.map((_) =>\n            formatter(_, props.valueFormat, lang.value)\n          )\n        } else if (val) {\n          formatValue = formatter(val, props.valueFormat, lang.value)\n        }\n        ctx.emit('update:modelValue', val ? formatValue : val, lang.value)\n      }\n    }\n    const refInput = computed(() => {\n      if (refPopper.value.triggerRef) {\n        const _r = isRangeInput.value\n          ? refPopper.value.triggerRef\n          : refPopper.value.triggerRef.$el\n        return [].slice.call(_r.querySelectorAll('input'))\n      }\n      return []\n    })\n    const setSelectionRange = (start, end, pos) => {\n      const _inputs = refInput.value\n      if (!_inputs.length) return\n      if (!pos || pos === 'min') {\n        _inputs[0].setSelectionRange(start, end)\n        _inputs[0].focus()\n      } else if (pos === 'max') {\n        _inputs[1].setSelectionRange(start, end)\n        _inputs[1].focus()\n      }\n    }\n    const onPick = (date: any = '', visible = false) => {\n      pickerVisible.value = visible\n      let result\n      if (Array.isArray(date)) {\n        result = date.map((_) => _.toDate())\n      } else {\n        // clear btn emit null\n        result = date ? date.toDate() : date\n      }\n      userInput.value = null\n      emitInput(result)\n    }\n    const handleFocus = (e) => {\n      if (props.readonly || pickerDisabled.value || pickerVisible.value) return\n      pickerVisible.value = true\n      ctx.emit('focus', e)\n    }\n\n    const handleBlur = () => {\n      pickerVisible.value = false\n      blurInput()\n    }\n\n    const pickerDisabled = computed(() => {\n      return props.disabled || elForm.disabled\n    })\n\n    const parsedValue = computed(() => {\n      let result\n      if (valueIsEmpty.value) {\n        if (pickerOptions.value.getDefaultValue) {\n          result = pickerOptions.value.getDefaultValue()\n        }\n      } else {\n        if (Array.isArray(props.modelValue)) {\n          result = props.modelValue.map((_) =>\n            parser(_, props.valueFormat, lang.value)\n          )\n        } else {\n          result = parser(props.modelValue, props.valueFormat, lang.value)\n        }\n      }\n\n      if (pickerOptions.value.getRangeAvailableTime) {\n        const availableResult =\n          pickerOptions.value.getRangeAvailableTime(result)\n        if (!isEqual(availableResult, result)) {\n          result = availableResult\n          emitInput(\n            Array.isArray(result)\n              ? result.map((_) => _.toDate())\n              : result.toDate()\n          )\n        }\n      }\n      if (Array.isArray(result) && result.some((_) => !_)) {\n        result = []\n      }\n      return result\n    })\n\n    const displayValue = computed(() => {\n      if (!pickerOptions.value.panelReady) return\n      const formattedValue = formatDayjsToString(parsedValue.value)\n      if (Array.isArray(userInput.value)) {\n        return [\n          userInput.value[0] || (formattedValue && formattedValue[0]) || '',\n          userInput.value[1] || (formattedValue && formattedValue[1]) || '',\n        ]\n      } else if (userInput.value !== null) {\n        return userInput.value\n      }\n      if (!isTimePicker.value && valueIsEmpty.value) return\n      if (!pickerVisible.value && valueIsEmpty.value) return\n      if (formattedValue) {\n        return isDatesPicker.value\n          ? (formattedValue as Array<string>).join(', ')\n          : formattedValue\n      }\n      return ''\n    })\n\n    const isTimeLikePicker = computed(() => props.type.includes('time'))\n\n    const isTimePicker = computed(() => props.type.startsWith('time'))\n\n    const isDatesPicker = computed(() => props.type === 'dates')\n\n    const triggerIcon = computed(\n      () => props.prefixIcon || (isTimeLikePicker.value ? Clock : Calendar)\n    )\n\n    const showClose = ref(false)\n\n    const onClearIconClick = (event) => {\n      if (props.readonly || pickerDisabled.value) return\n      if (showClose.value) {\n        event.stopPropagation()\n        emitInput(null)\n        emitChange(null, true)\n        showClose.value = false\n        pickerVisible.value = false\n        pickerOptions.value.handleClear && pickerOptions.value.handleClear()\n      }\n    }\n    const valueIsEmpty = computed(() => {\n      return (\n        !props.modelValue ||\n        (Array.isArray(props.modelValue) && !props.modelValue.length)\n      )\n    })\n    const onMouseEnter = () => {\n      if (props.readonly || pickerDisabled.value) return\n      if (!valueIsEmpty.value && props.clearable) {\n        showClose.value = true\n      }\n    }\n    const onMouseLeave = () => {\n      showClose.value = false\n    }\n    const isRangeInput = computed(() => {\n      return props.type.indexOf('range') > -1\n    })\n\n    const pickerSize = useSize()\n\n    const popperPaneRef = computed(() => {\n      return refPopper.value?.popperRef\n    })\n\n    const onClickOutside = () => {\n      if (!pickerVisible.value) return\n      pickerVisible.value = false\n    }\n\n    const userInput = ref(null)\n\n    const handleChange = () => {\n      if (userInput.value) {\n        const value = parseUserInputToDayjs(displayValue.value)\n        if (value) {\n          if (isValidValue(value)) {\n            emitInput(\n              Array.isArray(value)\n                ? value.map((_) => _.toDate())\n                : value.toDate()\n            )\n            userInput.value = null\n          }\n        }\n      }\n      if (userInput.value === '') {\n        emitInput(null)\n        emitChange(null)\n        userInput.value = null\n      }\n    }\n\n    const blurInput = () => {\n      refInput.value.forEach((input) => input.blur())\n    }\n\n    const parseUserInputToDayjs = (value) => {\n      if (!value) return null\n      return pickerOptions.value.parseUserInput(value)\n    }\n\n    const formatDayjsToString = (value) => {\n      if (!value) return null\n      return pickerOptions.value.formatToString(value)\n    }\n\n    const isValidValue = (value) => {\n      return pickerOptions.value.isValidValue(value)\n    }\n\n    const handleKeydown = (event) => {\n      const code = event.code\n\n      if (code === EVENT_CODE.esc) {\n        pickerVisible.value = false\n        event.stopPropagation()\n        return\n      }\n\n      if (code === EVENT_CODE.tab) {\n        if (!isRangeInput.value) {\n          handleChange()\n          pickerVisible.value = false\n          event.stopPropagation()\n        } else {\n          // user may change focus between two input\n          setTimeout(() => {\n            if (refInput.value.indexOf(document.activeElement) === -1) {\n              pickerVisible.value = false\n              blurInput()\n            }\n          }, 0)\n        }\n        return\n      }\n\n      if (code === EVENT_CODE.enter || code === EVENT_CODE.numpadEnter) {\n        if (\n          userInput.value === null ||\n          userInput.value === '' ||\n          isValidValue(parseUserInputToDayjs(displayValue.value))\n        ) {\n          handleChange()\n          pickerVisible.value = false\n        }\n        event.stopPropagation()\n        return\n      }\n\n      // if user is typing, do not let picker handle key input\n      if (userInput.value) {\n        event.stopPropagation()\n        return\n      }\n\n      if (pickerOptions.value.handleKeydown) {\n        pickerOptions.value.handleKeydown(event)\n      }\n    }\n    const onUserInput = (e) => {\n      userInput.value = e\n    }\n\n    const handleStartInput = (event) => {\n      if (userInput.value) {\n        userInput.value = [event.target.value, userInput.value[1]]\n      } else {\n        userInput.value = [event.target.value, null]\n      }\n    }\n\n    const handleEndInput = (event) => {\n      if (userInput.value) {\n        userInput.value = [userInput.value[0], event.target.value]\n      } else {\n        userInput.value = [null, event.target.value]\n      }\n    }\n\n    const handleStartChange = () => {\n      const value = parseUserInputToDayjs(userInput.value && userInput.value[0])\n      if (value && value.isValid()) {\n        userInput.value = [formatDayjsToString(value), displayValue.value[1]]\n        const newValue = [value, parsedValue.value && parsedValue.value[1]]\n        if (isValidValue(newValue)) {\n          emitInput(newValue)\n          userInput.value = null\n        }\n      }\n    }\n\n    const handleEndChange = () => {\n      const value = parseUserInputToDayjs(userInput.value && userInput.value[1])\n      if (value && value.isValid()) {\n        userInput.value = [displayValue.value[0], formatDayjsToString(value)]\n        const newValue = [parsedValue.value && parsedValue.value[0], value]\n        if (isValidValue(newValue)) {\n          emitInput(newValue)\n          userInput.value = null\n        }\n      }\n    }\n\n    const pickerOptions = ref<Partial<PickerOptions>>({})\n    const onSetPickerOption = <T extends keyof PickerOptions>(\n      e: [T, PickerOptions[T]]\n    ) => {\n      pickerOptions.value[e[0]] = e[1]\n      pickerOptions.value.panelReady = true\n    }\n\n    const onCalendarChange = (e) => {\n      ctx.emit('calendar-change', e)\n    }\n\n    provide('EP_PICKER_BASE', {\n      props,\n    })\n\n    return {\n      Effect,\n\n      // injected popper options\n      elPopperOptions,\n\n      isDatesPicker,\n      handleEndChange,\n      handleStartChange,\n      handleStartInput,\n      handleEndInput,\n      onUserInput,\n      handleChange,\n      handleKeydown,\n      popperPaneRef,\n      onClickOutside,\n      pickerSize,\n      isRangeInput,\n      onMouseLeave,\n      onMouseEnter,\n      onClearIconClick,\n      showClose,\n      triggerIcon,\n      onPick,\n      handleFocus,\n      handleBlur,\n      pickerVisible,\n      pickerActualVisible,\n      displayValue,\n      parsedValue,\n      setSelectionRange,\n      refPopper,\n      pickerDisabled,\n      onSetPickerOption,\n      onCalendarChange,\n    }\n  },\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}