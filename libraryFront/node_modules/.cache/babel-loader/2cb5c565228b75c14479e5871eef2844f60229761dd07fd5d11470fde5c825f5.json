{"ast":null,"code":"import { defineComponent, nextTick, computed, provide, toRefs, watch } from 'vue';\nimport { UPDATE_MODEL_EVENT } from '../../../utils/constants.mjs';\nimport { isValidComponentSize } from '../../../utils/validators.mjs';\nimport '../../../hooks/index.mjs';\nimport { useCheckboxGroup } from './useCheckbox.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nvar script = defineComponent({\n  name: \"ElCheckboxGroup\",\n  props: {\n    modelValue: {\n      type: [Object, Boolean, Array],\n      default: () => void 0\n    },\n    disabled: Boolean,\n    min: {\n      type: Number,\n      default: void 0\n    },\n    max: {\n      type: Number,\n      default: void 0\n    },\n    size: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    fill: {\n      type: String,\n      default: void 0\n    },\n    textColor: {\n      type: String,\n      default: void 0\n    }\n  },\n  emits: [UPDATE_MODEL_EVENT, \"change\"],\n  setup(props, ctx) {\n    const {\n      elFormItem\n    } = useCheckboxGroup();\n    const checkboxGroupSize = useSize();\n    const changeEvent = value => {\n      ctx.emit(UPDATE_MODEL_EVENT, value);\n      nextTick(() => {\n        ctx.emit(\"change\", value);\n      });\n    };\n    const modelValue = computed({\n      get() {\n        return props.modelValue;\n      },\n      set(val) {\n        changeEvent(val);\n      }\n    });\n    provide(\"CheckboxGroup\", {\n      name: \"ElCheckboxGroup\",\n      modelValue,\n      ...toRefs(props),\n      checkboxGroupSize,\n      changeEvent\n    });\n    watch(() => props.modelValue, () => {\n      var _a;\n      (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\");\n    });\n  }\n});\nexport { script as default };","map":{"version":3,"names":["script","defineComponent","name","props","modelValue","type","Object","Boolean","Array","default","disabled","min","Number","max","size","String","validator","isValidComponentSize","fill","textColor","emits","UPDATE_MODEL_EVENT","setup","ctx","elFormItem","useCheckboxGroup","checkboxGroupSize","useSize","changeEvent","value","emit","nextTick","computed","get","set","val","provide","toRefs","watch","_a","validate","call"],"sources":["../../../../../../packages/components/checkbox/src/checkbox-group.vue"],"sourcesContent":["<template>\n  <div class=\"el-checkbox-group\" role=\"group\" aria-label=\"checkbox-group\">\n    <slot></slot>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  computed,\n  watch,\n  provide,\n  nextTick,\n  toRefs,\n} from 'vue'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/utils/constants'\nimport { isValidComponentSize } from '@element-plus/utils/validators'\nimport { useSize } from '@element-plus/hooks'\nimport { useCheckboxGroup } from './useCheckbox'\n\nimport type { PropType } from 'vue'\nimport type { ComponentSize } from '@element-plus/utils/types'\n\nexport default defineComponent({\n  name: 'ElCheckboxGroup',\n\n  props: {\n    modelValue: {\n      type: [Object, Boolean, Array],\n      default: () => undefined,\n    },\n    disabled: Boolean,\n    min: {\n      type: Number,\n      default: undefined,\n    },\n    max: {\n      type: Number,\n      default: undefined,\n    },\n    size: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    fill: {\n      type: String,\n      default: undefined,\n    },\n    textColor: {\n      type: String,\n      default: undefined,\n    },\n  },\n\n  emits: [UPDATE_MODEL_EVENT, 'change'],\n\n  setup(props, ctx) {\n    const { elFormItem } = useCheckboxGroup()\n    const checkboxGroupSize = useSize()\n\n    const changeEvent = (value) => {\n      ctx.emit(UPDATE_MODEL_EVENT, value)\n      nextTick(() => {\n        ctx.emit('change', value)\n      })\n    }\n\n    const modelValue = computed({\n      get() {\n        return props.modelValue\n      },\n      set(val) {\n        changeEvent(val)\n      },\n    })\n\n    provide('CheckboxGroup', {\n      name: 'ElCheckboxGroup',\n      modelValue,\n      ...toRefs(props),\n      checkboxGroupSize,\n      changeEvent,\n    })\n\n    watch(\n      () => props.modelValue,\n      () => {\n        elFormItem.validate?.('change')\n      }\n    )\n  },\n})\n</script>\n"],"mappings":";;;;;;AAuBA,IAAAA,MAAA,GAAeC,eAAA,CAAgB;EAC7BC,IAAA,EAAM;EAENC,KAAA,EAAO;IACLC,UAAA,EAAY;MACVC,IAAA,EAAM,CAACC,MAAA,EAAQC,OAAA,EAASC,KAAA;MACxBC,OAAA,EAASA,CAAA,KAAM;IAAA;IAEjBC,QAAA,EAAUH,OAAA;IACVI,GAAA,EAAK;MACHN,IAAA,EAAMO,MAAA;MACNH,OAAA,EAAS;IAAA;IAEXI,GAAA,EAAK;MACHR,IAAA,EAAMO,MAAA;MACNH,OAAA,EAAS;IAAA;IAEXK,IAAA,EAAM;MACJT,IAAA,EAAMU,MAAA;MACNC,SAAA,EAAWC;IAAA;IAEbC,IAAA,EAAM;MACJb,IAAA,EAAMU,MAAA;MACNN,OAAA,EAAS;IAAA;IAEXU,SAAA,EAAW;MACTd,IAAA,EAAMU,MAAA;MACNN,OAAA,EAAS;IAAA;EAAA;EAIbW,KAAA,EAAO,CAACC,kBAAA,EAAoB;EAE5BC,MAAMnB,KAAA,EAAOoB,GAAA,EAAK;IAChB,MAAM;MAAEC;IAAA,IAAeC,gBAAA;IACvB,MAAMC,iBAAA,GAAoBC,OAAA;IAE1B,MAAMC,WAAA,GAAeC,KAAA,IAAU;MAC7BN,GAAA,CAAIO,IAAA,CAAKT,kBAAA,EAAoBQ,KAAA;MAC7BE,QAAA,CAAS,MAAM;QACbR,GAAA,CAAIO,IAAA,CAAK,UAAUD,KAAA;MAAA;IAAA;IAIvB,MAAMzB,UAAA,GAAa4B,QAAA,CAAS;MAC1BC,IAAA,EAAM;QACJ,OAAO9B,KAAA,CAAMC,UAAA;MAAA;MAEf8B,IAAIC,GAAA,EAAK;QACPP,WAAA,CAAYO,GAAA;MAAA;IAAA;IAIhBC,OAAA,CAAQ,iBAAiB;MACvBlC,IAAA,EAAM;MACNE,UAAA;MAAA,GACGiC,MAAA,CAAOlC,KAAA;MACVuB,iBAAA;MACAE;IAAA;IAGFU,KAAA,CACE,MAAMnC,KAAA,CAAMC,UAAA,EACZ,MAAM;;MACJ,CAAAmC,EAAA,GAAAf,UAAA,CAAWgB,QAAA,KAAX,gBAAAD,EAAA,CAAAE,IAAA,CAAAjB,UAAA,EAAsB;IAAA;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}