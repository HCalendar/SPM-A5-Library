{"ast":null,"code":"import { resolveComponent, openBlock, createElementBlock, createElementVNode, toDisplayString, normalizeClass, createVNode, createCommentVNode } from 'vue';\nconst _hoisted_1 = {\n  key: 0,\n  class: \"el-time-range-picker el-picker-panel\"\n};\nconst _hoisted_2 = {\n  class: \"el-time-range-picker__content\"\n};\nconst _hoisted_3 = {\n  class: \"el-time-range-picker__cell\"\n};\nconst _hoisted_4 = {\n  class: \"el-time-range-picker__header\"\n};\nconst _hoisted_5 = {\n  class: \"el-time-range-picker__cell\"\n};\nconst _hoisted_6 = {\n  class: \"el-time-range-picker__header\"\n};\nconst _hoisted_7 = {\n  class: \"el-time-panel__footer\"\n};\nconst _hoisted_8 = [\"disabled\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_time_spinner = resolveComponent(\"time-spinner\");\n  return _ctx.actualVisible ? (openBlock(), createElementBlock(\"div\", _hoisted_1, [createElementVNode(\"div\", _hoisted_2, [createElementVNode(\"div\", _hoisted_3, [createElementVNode(\"div\", _hoisted_4, toDisplayString(_ctx.t(\"el.datepicker.startTime\")), 1), createElementVNode(\"div\", {\n    class: normalizeClass([{\n      \"has-seconds\": _ctx.showSeconds,\n      \"is-arrow\": _ctx.arrowControl\n    }, \"el-time-range-picker__body el-time-panel__content\"])\n  }, [createVNode(_component_time_spinner, {\n    ref: \"minSpinner\",\n    role: \"start\",\n    \"show-seconds\": _ctx.showSeconds,\n    \"am-pm-mode\": _ctx.amPmMode,\n    \"arrow-control\": _ctx.arrowControl,\n    \"spinner-date\": _ctx.minDate,\n    \"disabled-hours\": _ctx.disabledHours_,\n    \"disabled-minutes\": _ctx.disabledMinutes_,\n    \"disabled-seconds\": _ctx.disabledSeconds_,\n    onChange: _ctx.handleMinChange,\n    onSetOption: _ctx.onSetOption,\n    onSelectRange: _ctx.setMinSelectionRange\n  }, null, 8, [\"show-seconds\", \"am-pm-mode\", \"arrow-control\", \"spinner-date\", \"disabled-hours\", \"disabled-minutes\", \"disabled-seconds\", \"onChange\", \"onSetOption\", \"onSelectRange\"])], 2)]), createElementVNode(\"div\", _hoisted_5, [createElementVNode(\"div\", _hoisted_6, toDisplayString(_ctx.t(\"el.datepicker.endTime\")), 1), createElementVNode(\"div\", {\n    class: normalizeClass([{\n      \"has-seconds\": _ctx.showSeconds,\n      \"is-arrow\": _ctx.arrowControl\n    }, \"el-time-range-picker__body el-time-panel__content\"])\n  }, [createVNode(_component_time_spinner, {\n    ref: \"maxSpinner\",\n    role: \"end\",\n    \"show-seconds\": _ctx.showSeconds,\n    \"am-pm-mode\": _ctx.amPmMode,\n    \"arrow-control\": _ctx.arrowControl,\n    \"spinner-date\": _ctx.maxDate,\n    \"disabled-hours\": _ctx.disabledHours_,\n    \"disabled-minutes\": _ctx.disabledMinutes_,\n    \"disabled-seconds\": _ctx.disabledSeconds_,\n    onChange: _ctx.handleMaxChange,\n    onSetOption: _ctx.onSetOption,\n    onSelectRange: _ctx.setMaxSelectionRange\n  }, null, 8, [\"show-seconds\", \"am-pm-mode\", \"arrow-control\", \"spinner-date\", \"disabled-hours\", \"disabled-minutes\", \"disabled-seconds\", \"onChange\", \"onSetOption\", \"onSelectRange\"])], 2)])]), createElementVNode(\"div\", _hoisted_7, [createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"el-time-panel__btn cancel\",\n    onClick: _cache[0] || (_cache[0] = $event => _ctx.handleCancel())\n  }, toDisplayString(_ctx.t(\"el.datepicker.cancel\")), 1), createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"el-time-panel__btn confirm\",\n    disabled: _ctx.btnConfirmDisabled,\n    onClick: _cache[1] || (_cache[1] = $event => _ctx.handleConfirm())\n  }, toDisplayString(_ctx.t(\"el.datepicker.confirm\")), 9, _hoisted_8)])])) : createCommentVNode(\"v-if\", true);\n}\nexport { render };","map":{"version":3,"names":["class","_ctx","actualVisible","openBlock","createElementBlock","_hoisted_1","createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","toDisplayString","t","normalizeClass","showSeconds","arrowControl","createVNode","_component_time_spinner","ref","role","amPmMode","minDate","disabledHours_","disabledMinutes_","disabledSeconds_","onChange","handleMinChange","onSetOption","onSelectRange","setMinSelectionRange","_hoisted_5","_hoisted_6","maxDate","handleMaxChange","setMaxSelectionRange","_hoisted_7","type","onClick","_cache","$event","handleCancel","disabled","btnConfirmDisabled","handleConfirm","_hoisted_8"],"sources":["../../../../../../../packages/components/time-picker/src/time-picker-com/panel-time-range.vue?vue&type=template&id=57d94b44&lang.js"],"sourcesContent":["<template>\n  <div v-if=\"actualVisible\" class=\"el-time-range-picker el-picker-panel\">\n    <div class=\"el-time-range-picker__content\">\n      <div class=\"el-time-range-picker__cell\">\n        <div class=\"el-time-range-picker__header\">\n          {{ t('el.datepicker.startTime') }}\n        </div>\n        <div\n          :class=\"{ 'has-seconds': showSeconds, 'is-arrow': arrowControl }\"\n          class=\"el-time-range-picker__body el-time-panel__content\"\n        >\n          <time-spinner\n            ref=\"minSpinner\"\n            role=\"start\"\n            :show-seconds=\"showSeconds\"\n            :am-pm-mode=\"amPmMode\"\n            :arrow-control=\"arrowControl\"\n            :spinner-date=\"minDate\"\n            :disabled-hours=\"disabledHours_\"\n            :disabled-minutes=\"disabledMinutes_\"\n            :disabled-seconds=\"disabledSeconds_\"\n            @change=\"handleMinChange\"\n            @set-option=\"onSetOption\"\n            @select-range=\"setMinSelectionRange\"\n          />\n        </div>\n      </div>\n      <div class=\"el-time-range-picker__cell\">\n        <div class=\"el-time-range-picker__header\">\n          {{ t('el.datepicker.endTime') }}\n        </div>\n        <div\n          :class=\"{ 'has-seconds': showSeconds, 'is-arrow': arrowControl }\"\n          class=\"el-time-range-picker__body el-time-panel__content\"\n        >\n          <time-spinner\n            ref=\"maxSpinner\"\n            role=\"end\"\n            :show-seconds=\"showSeconds\"\n            :am-pm-mode=\"amPmMode\"\n            :arrow-control=\"arrowControl\"\n            :spinner-date=\"maxDate\"\n            :disabled-hours=\"disabledHours_\"\n            :disabled-minutes=\"disabledMinutes_\"\n            :disabled-seconds=\"disabledSeconds_\"\n            @change=\"handleMaxChange\"\n            @set-option=\"onSetOption\"\n            @select-range=\"setMaxSelectionRange\"\n          />\n        </div>\n      </div>\n    </div>\n    <div class=\"el-time-panel__footer\">\n      <button\n        type=\"button\"\n        class=\"el-time-panel__btn cancel\"\n        @click=\"handleCancel()\"\n      >\n        {{ t('el.datepicker.cancel') }}\n      </button>\n      <button\n        type=\"button\"\n        class=\"el-time-panel__btn confirm\"\n        :disabled=\"btnConfirmDisabled\"\n        @click=\"handleConfirm()\"\n      >\n        {{ t('el.datepicker.confirm') }}\n      </button>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, ref, computed, inject } from 'vue'\nimport dayjs from 'dayjs'\nimport union from 'lodash/union'\nimport { useLocale } from '@element-plus/hooks'\nimport { EVENT_CODE } from '@element-plus/utils/aria'\nimport TimeSpinner from './basic-time-spinner.vue'\nimport { getAvailableArrs, useOldValue } from './useTimePicker'\n\nimport type { PropType } from 'vue'\nimport type { Dayjs } from 'dayjs'\n\nconst makeSelectRange = (start: number, end: number) => {\n  const result = []\n  for (let i = start; i <= end; i++) {\n    result.push(i)\n  }\n  return result\n}\nexport default defineComponent({\n  components: { TimeSpinner },\n\n  props: {\n    visible: Boolean,\n    actualVisible: Boolean,\n    parsedValue: {\n      type: [Array] as PropType<Array<Dayjs>>,\n    },\n    format: {\n      type: String,\n      default: '',\n    },\n  },\n\n  emits: ['pick', 'select-range', 'set-picker-option'],\n\n  setup(props, ctx) {\n    const { t, lang } = useLocale()\n    const minDate = computed(() => props.parsedValue[0])\n    const maxDate = computed(() => props.parsedValue[1])\n    const oldValue = useOldValue(props)\n    const handleCancel = () => {\n      ctx.emit('pick', oldValue.value, null)\n    }\n    const showSeconds = computed(() => {\n      return props.format.includes('ss')\n    })\n    const amPmMode = computed(() => {\n      if (props.format.includes('A')) return 'A'\n      if (props.format.includes('a')) return 'a'\n      return ''\n    })\n\n    const minSelectableRange = ref([])\n    const maxSelectableRange = ref([])\n\n    const handleConfirm = (visible = false) => {\n      ctx.emit('pick', [minDate.value, maxDate.value], visible)\n    }\n\n    const handleMinChange = (date) => {\n      handleChange(date.millisecond(0), maxDate.value)\n    }\n    const handleMaxChange = (date) => {\n      handleChange(minDate.value, date.millisecond(0))\n    }\n\n    const isValidValue = (_date: Dayjs[]) => {\n      const parsedDate = _date.map((_) => dayjs(_).locale(lang.value))\n      const result = getRangeAvailableTime(parsedDate)\n      return parsedDate[0].isSame(result[0]) && parsedDate[1].isSame(result[1])\n    }\n\n    const handleChange = (_minDate, _maxDate) => {\n      // todo getRangeAvailableTime(_date).millisecond(0)\n      ctx.emit('pick', [_minDate, _maxDate], true)\n    }\n    const btnConfirmDisabled = computed(() => {\n      return minDate.value > maxDate.value\n    })\n\n    const selectionRange = ref([0, 2])\n    const setMinSelectionRange = (start, end) => {\n      ctx.emit('select-range', start, end, 'min')\n      selectionRange.value = [start, end]\n    }\n\n    const offset = computed(() => (showSeconds.value ? 11 : 8))\n    const setMaxSelectionRange = (start, end) => {\n      ctx.emit('select-range', start, end, 'max')\n      selectionRange.value = [start + offset.value, end + offset.value]\n    }\n\n    const changeSelectionRange = (step) => {\n      const list = showSeconds.value ? [0, 3, 6, 11, 14, 17] : [0, 3, 8, 11]\n      const mapping = ['hours', 'minutes'].concat(\n        showSeconds.value ? ['seconds'] : []\n      )\n      const index = list.indexOf(selectionRange.value[0])\n      const next = (index + step + list.length) % list.length\n      const half = list.length / 2\n      if (next < half) {\n        timePickerOptions['start_emitSelectRange'](mapping[next])\n      } else {\n        timePickerOptions['end_emitSelectRange'](mapping[next - half])\n      }\n    }\n\n    const handleKeydown = (event: KeyboardEvent) => {\n      const code = event.code\n\n      if (code === EVENT_CODE.left || code === EVENT_CODE.right) {\n        const step = code === EVENT_CODE.left ? -1 : 1\n        changeSelectionRange(step)\n        event.preventDefault()\n        return\n      }\n\n      if (code === EVENT_CODE.up || code === EVENT_CODE.down) {\n        const step = code === EVENT_CODE.up ? -1 : 1\n        const role = selectionRange.value[0] < offset.value ? 'start' : 'end'\n        timePickerOptions[`${role}_scrollDown`](step)\n        event.preventDefault()\n        return\n      }\n    }\n\n    const disabledHours_ = (role, compare) => {\n      const defaultDisable = disabledHours ? disabledHours(role) : []\n      const isStart = role === 'start'\n      const compareDate = compare || (isStart ? maxDate.value : minDate.value)\n      const compareHour = compareDate.hour()\n      const nextDisable = isStart\n        ? makeSelectRange(compareHour + 1, 23)\n        : makeSelectRange(0, compareHour - 1)\n      return union(defaultDisable, nextDisable)\n    }\n    const disabledMinutes_ = (hour, role, compare) => {\n      const defaultDisable = disabledMinutes ? disabledMinutes(hour, role) : []\n      const isStart = role === 'start'\n      const compareDate = compare || (isStart ? maxDate.value : minDate.value)\n      const compareHour = compareDate.hour()\n      if (hour !== compareHour) {\n        return defaultDisable\n      }\n      const compareMinute = compareDate.minute()\n      const nextDisable = isStart\n        ? makeSelectRange(compareMinute + 1, 59)\n        : makeSelectRange(0, compareMinute - 1)\n      return union(defaultDisable, nextDisable)\n    }\n    const disabledSeconds_ = (hour, minute, role, compare) => {\n      const defaultDisable = disabledSeconds\n        ? disabledSeconds(hour, minute, role)\n        : []\n      const isStart = role === 'start'\n      const compareDate = compare || (isStart ? maxDate.value : minDate.value)\n      const compareHour = compareDate.hour()\n      const compareMinute = compareDate.minute()\n      if (hour !== compareHour || minute !== compareMinute) {\n        return defaultDisable\n      }\n      const compareSecond = compareDate.second()\n      const nextDisable = isStart\n        ? makeSelectRange(compareSecond + 1, 59)\n        : makeSelectRange(0, compareSecond - 1)\n      return union(defaultDisable, nextDisable)\n    }\n\n    const getRangeAvailableTime = (dates: Array<Dayjs>) => {\n      return dates.map((_, index) =>\n        getRangeAvailableTimeEach(\n          dates[0],\n          dates[1],\n          index === 0 ? 'start' : 'end'\n        )\n      )\n    }\n\n    const { getAvailableHours, getAvailableMinutes, getAvailableSeconds } =\n      getAvailableArrs(disabledHours_, disabledMinutes_, disabledSeconds_)\n\n    const getRangeAvailableTimeEach = (\n      startDate: Dayjs,\n      endDate: Dayjs,\n      role\n    ) => {\n      const availableMap = {\n        hour: getAvailableHours,\n        minute: getAvailableMinutes,\n        second: getAvailableSeconds,\n      }\n      const isStart = role === 'start'\n      let result = isStart ? startDate : endDate\n      const compareDate = isStart ? endDate : startDate\n      ;['hour', 'minute', 'second'].forEach((_) => {\n        if (availableMap[_]) {\n          let availableArr\n          const method = availableMap[_]\n          if (_ === 'minute') {\n            availableArr = method(result.hour(), role, compareDate)\n          } else if (_ === 'second') {\n            availableArr = method(\n              result.hour(),\n              result.minute(),\n              role,\n              compareDate\n            )\n          } else {\n            availableArr = method(role, compareDate)\n          }\n          if (\n            availableArr &&\n            availableArr.length &&\n            !availableArr.includes(result[_]())\n          ) {\n            const pos = isStart ? 0 : availableArr.length - 1\n            result = result[_](availableArr[pos])\n          }\n        }\n      })\n      return result\n    }\n\n    const parseUserInput = (value: Dayjs[] | Dayjs) => {\n      if (!value) return null\n      if (Array.isArray(value)) {\n        return value.map((_) => dayjs(_, props.format).locale(lang.value))\n      }\n      return dayjs(value, props.format).locale(lang.value)\n    }\n\n    const formatToString = (value: Dayjs[] | Dayjs) => {\n      if (!value) return null\n      if (Array.isArray(value)) {\n        return value.map((_) => _.format(props.format))\n      }\n      return value.format(props.format)\n    }\n\n    const getDefaultValue = () => {\n      if (Array.isArray(defaultValue)) {\n        return defaultValue.map((_) => dayjs(_).locale(lang.value))\n      }\n      const defaultDay = dayjs(defaultValue).locale(lang.value)\n      return [defaultDay, defaultDay.add(60, 'm')]\n    }\n\n    ctx.emit('set-picker-option', ['formatToString', formatToString])\n    ctx.emit('set-picker-option', ['parseUserInput', parseUserInput])\n    ctx.emit('set-picker-option', ['isValidValue', isValidValue])\n    ctx.emit('set-picker-option', ['handleKeydown', handleKeydown])\n    ctx.emit('set-picker-option', ['getDefaultValue', getDefaultValue])\n    ctx.emit('set-picker-option', [\n      'getRangeAvailableTime',\n      getRangeAvailableTime,\n    ])\n\n    const timePickerOptions = {} as any\n    const onSetOption = (e) => {\n      timePickerOptions[e[0]] = e[1]\n    }\n\n    const pickerBase = inject('EP_PICKER_BASE') as any\n    const {\n      arrowControl,\n      disabledHours,\n      disabledMinutes,\n      disabledSeconds,\n      defaultValue,\n    } = pickerBase.props\n\n    return {\n      arrowControl,\n      onSetOption,\n      setMaxSelectionRange,\n      setMinSelectionRange,\n      btnConfirmDisabled,\n      handleCancel,\n      handleConfirm,\n      t,\n      showSeconds,\n      minDate,\n      maxDate,\n      amPmMode,\n      handleMinChange,\n      handleMaxChange,\n      minSelectableRange,\n      maxSelectableRange,\n      disabledHours_,\n      disabledMinutes_,\n      disabledSeconds_,\n    }\n  },\n})\n</script>\n"],"mappings":";;;EAC4BA,KAAA,EAAM;AAAA;;EACzBA,KAAA,EAAM;AAAA;;EACJA,KAAA,EAAM;AAAA;;EACJA,KAAA,EAAM;AAAA;;EAuBRA,KAAA,EAAM;AAAA;;EACJA,KAAA,EAAM;AAAA;;EAwBVA,KAAA,EAAM;AAAA;;;;SAnDFC,IAAA,CAAAC,aAAA,IAAAC,SAAA,IAAXC,kBAAA,QAAAC,UAAA,GACEC,kBAAA,QAAAC,UAAA,GACED,kBAAA,QAAAE,UAAA,GACEF,kBAAA,QAAAG,UAAA,EAAAC,eAAA,CACKT,IAAA,CAAAU,CAAA,kCAELL,kBAAA;IACGN,KAAA,EAAAY,cAAA;MAAA,eAAwBX,IAAA,CAAAY,WAAA;MAAA,YAAyBZ,IAAA,CAAAa;IAAA,GAC5C;EAAA,IAENC,WAAA,CAAAC,uBAAA;IACEC,GAAA,EAAI;IACJC,IAAA,EAAK;IACJ,gBAAcjB,IAAA,CAAAY,WAAA;IACd,cAAYZ,IAAA,CAAAkB,QAAA;IACZ,iBAAelB,IAAA,CAAAa,YAAA;IACf,gBAAcb,IAAA,CAAAmB,OAAA;IACd,kBAAgBnB,IAAA,CAAAoB,cAAA;IAChB,oBAAkBpB,IAAA,CAAAqB,gBAAA;IAClB,oBAAkBrB,IAAA,CAAAsB,gBAAA;IAClBC,QAAA,EAAQvB,IAAA,CAAAwB,eAAA;IACRC,WAAA,EAAYzB,IAAA,CAAAyB,WAAA;IACZC,aAAA,EAAc1B,IAAA,CAAA2B;6LAIrBtB,kBAAA,QAAAuB,UAAA,GACEvB,kBAAA,QAAAwB,UAAA,EAAApB,eAAA,CACKT,IAAA,CAAAU,CAAA,gCAELL,kBAAA;IACGN,KAAA,EAAAY,cAAA;MAAA,eAAwBX,IAAA,CAAAY,WAAA;MAAA,YAAyBZ,IAAA,CAAAa;IAAA,GAC5C;EAAA,IAENC,WAAA,CAAAC,uBAAA;IACEC,GAAA,EAAI;IACJC,IAAA,EAAK;IACJ,gBAAcjB,IAAA,CAAAY,WAAA;IACd,cAAYZ,IAAA,CAAAkB,QAAA;IACZ,iBAAelB,IAAA,CAAAa,YAAA;IACf,gBAAcb,IAAA,CAAA8B,OAAA;IACd,kBAAgB9B,IAAA,CAAAoB,cAAA;IAChB,oBAAkBpB,IAAA,CAAAqB,gBAAA;IAClB,oBAAkBrB,IAAA,CAAAsB,gBAAA;IAClBC,QAAA,EAAQvB,IAAA,CAAA+B,eAAA;IACRN,WAAA,EAAYzB,IAAA,CAAAyB,WAAA;IACZC,aAAA,EAAc1B,IAAA,CAAAgC;+LAKvB3B,kBAAA,QAAA4B,UAAA,GACE5B,kBAAA;IACE6B,IAAA,EAAK;IACLnC,KAAA,EAAM;IACLoC,OAAA,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAOrC,IAAA,CAAAsC,YAAA;qBAELtC,IAAA,CAAAU,CAAA,+BAELL,kBAAA;IACE6B,IAAA,EAAK;IACLnC,KAAA,EAAM;IACLwC,QAAA,EAAUvC,IAAA,CAAAwC,kBAAA;IACVL,OAAA,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAOrC,IAAA,CAAAyC,aAAA;qBAELzC,IAAA,CAAAU,CAAA,+BAAAgC,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}