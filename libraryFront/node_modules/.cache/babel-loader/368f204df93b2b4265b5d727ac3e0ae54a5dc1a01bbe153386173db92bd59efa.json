{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getCurrentInstance, computed, h } from 'vue';\nimport { getRowIdentity } from '../util.mjs';\nimport useEvents from './events-helper.mjs';\nimport useStyles from './styles-helper.mjs';\nfunction useRender(props) {\n  const instance = getCurrentInstance();\n  const parent = instance.parent;\n  const {\n    handleDoubleClick,\n    handleClick,\n    handleContextMenu,\n    handleMouseEnter,\n    handleMouseLeave,\n    handleCellMouseEnter,\n    handleCellMouseLeave,\n    tooltipContent,\n    tooltipTrigger\n  } = useEvents(props);\n  const {\n    getRowStyle,\n    getRowClass,\n    getCellStyle,\n    getCellClass,\n    getSpan,\n    getColspanRealWidth\n  } = useStyles(props);\n  const firstDefaultColumnIndex = computed(() => {\n    return props.store.states.columns.value.findIndex(({\n      type\n    }) => type === \"default\");\n  });\n  const getKeyOfRow = (row, index) => {\n    const rowKey = parent.props.rowKey;\n    if (rowKey) {\n      return getRowIdentity(row, rowKey);\n    }\n    return index;\n  };\n  const rowRender = (row, $index, treeRowData) => {\n    const {\n      tooltipEffect,\n      store\n    } = props;\n    const {\n      indent,\n      columns\n    } = store.states;\n    const rowClasses = getRowClass(row, $index);\n    let display = true;\n    if (treeRowData) {\n      rowClasses.push(`el-table__row--level-${treeRowData.level}`);\n      display = treeRowData.display;\n    }\n    const displayStyle = display ? null : {\n      display: \"none\"\n    };\n    return h(\"tr\", {\n      style: [displayStyle, getRowStyle(row, $index)],\n      class: rowClasses,\n      key: getKeyOfRow(row, $index),\n      onDblclick: $event => handleDoubleClick($event, row),\n      onClick: $event => handleClick($event, row),\n      onContextmenu: $event => handleContextMenu($event, row),\n      onMouseenter: () => handleMouseEnter($index),\n      onMouseleave: handleMouseLeave\n    }, columns.value.map((column, cellIndex) => {\n      const {\n        rowspan,\n        colspan\n      } = getSpan(row, column, $index, cellIndex);\n      if (!rowspan || !colspan) {\n        return null;\n      }\n      const columnData = {\n        ...column\n      };\n      columnData.realWidth = getColspanRealWidth(columns.value, colspan, cellIndex);\n      const data = {\n        store: props.store,\n        _self: props.context || parent,\n        column: columnData,\n        row,\n        $index\n      };\n      if (cellIndex === firstDefaultColumnIndex.value && treeRowData) {\n        data.treeNode = {\n          indent: treeRowData.level * indent.value,\n          level: treeRowData.level\n        };\n        if (typeof treeRowData.expanded === \"boolean\") {\n          data.treeNode.expanded = treeRowData.expanded;\n          if (\"loading\" in treeRowData) {\n            data.treeNode.loading = treeRowData.loading;\n          }\n          if (\"noLazyChildren\" in treeRowData) {\n            data.treeNode.noLazyChildren = treeRowData.noLazyChildren;\n          }\n        }\n      }\n      const baseKey = `${$index},${cellIndex}`;\n      const patchKey = columnData.columnKey || columnData.rawColumnKey || \"\";\n      const tdChildren = cellChildren(cellIndex, column, data);\n      return h(\"td\", {\n        style: getCellStyle($index, cellIndex, row, column),\n        class: getCellClass($index, cellIndex, row, column),\n        key: `${patchKey}${baseKey}`,\n        rowspan,\n        colspan,\n        onMouseenter: $event => handleCellMouseEnter($event, {\n          ...row,\n          tooltipEffect\n        }),\n        onMouseleave: handleCellMouseLeave\n      }, [tdChildren]);\n    }));\n  };\n  const cellChildren = (cellIndex, column, data) => {\n    return column.renderCell(data);\n  };\n  const wrappedRowRender = (row, $index) => {\n    const store = props.store;\n    const {\n      isRowExpanded,\n      assertRowKey\n    } = store;\n    const {\n      treeData,\n      lazyTreeNodeMap,\n      childrenColumnName,\n      rowKey\n    } = store.states;\n    const hasExpandColumn = store.states.columns.value.some(({\n      type\n    }) => type === \"expand\");\n    if (hasExpandColumn && isRowExpanded(row)) {\n      const renderExpanded = parent.renderExpanded;\n      const tr = rowRender(row, $index, void 0);\n      if (!renderExpanded) {\n        console.error(\"[Element Error]renderExpanded is required.\");\n        return tr;\n      }\n      return [[tr, h(\"tr\", {\n        key: `expanded-row__${tr.key}`\n      }, [h(\"td\", {\n        colspan: store.states.columns.value.length,\n        class: \"el-table__cell el-table__expanded-cell\"\n      }, [renderExpanded({\n        row,\n        $index,\n        store\n      })])])]];\n    } else if (Object.keys(treeData.value).length) {\n      assertRowKey();\n      const key = getRowIdentity(row, rowKey.value);\n      let cur = treeData.value[key];\n      let treeRowData = null;\n      if (cur) {\n        treeRowData = {\n          expanded: cur.expanded,\n          level: cur.level,\n          display: true\n        };\n        if (typeof cur.lazy === \"boolean\") {\n          if (typeof cur.loaded === \"boolean\" && cur.loaded) {\n            treeRowData.noLazyChildren = !(cur.children && cur.children.length);\n          }\n          treeRowData.loading = cur.loading;\n        }\n      }\n      const tmp = [rowRender(row, $index, treeRowData)];\n      if (cur) {\n        let i = 0;\n        const traverse = (children, parent2) => {\n          if (!(children && children.length && parent2)) return;\n          children.forEach(node => {\n            const innerTreeRowData = {\n              display: parent2.display && parent2.expanded,\n              level: parent2.level + 1,\n              expanded: false,\n              noLazyChildren: false,\n              loading: false\n            };\n            const childKey = getRowIdentity(node, rowKey.value);\n            if (childKey === void 0 || childKey === null) {\n              throw new Error(\"For nested data item, row-key is required.\");\n            }\n            cur = {\n              ...treeData.value[childKey]\n            };\n            if (cur) {\n              innerTreeRowData.expanded = cur.expanded;\n              cur.level = cur.level || innerTreeRowData.level;\n              cur.display = !!(cur.expanded && innerTreeRowData.display);\n              if (typeof cur.lazy === \"boolean\") {\n                if (typeof cur.loaded === \"boolean\" && cur.loaded) {\n                  innerTreeRowData.noLazyChildren = !(cur.children && cur.children.length);\n                }\n                innerTreeRowData.loading = cur.loading;\n              }\n            }\n            i++;\n            tmp.push(rowRender(node, $index + i, innerTreeRowData));\n            if (cur) {\n              const nodes2 = lazyTreeNodeMap.value[childKey] || node[childrenColumnName.value];\n              traverse(nodes2, cur);\n            }\n          });\n        };\n        cur.display = true;\n        const nodes = lazyTreeNodeMap.value[key] || row[childrenColumnName.value];\n        traverse(nodes, cur);\n      }\n      return tmp;\n    } else {\n      return rowRender(row, $index, void 0);\n    }\n  };\n  return {\n    wrappedRowRender,\n    tooltipContent,\n    tooltipTrigger\n  };\n}\nexport { useRender as default };","map":{"version":3,"names":["useRender","props","instance","getCurrentInstance","parent","handleDoubleClick","handleClick","handleContextMenu","handleMouseEnter","handleMouseLeave","handleCellMouseEnter","handleCellMouseLeave","tooltipContent","tooltipTrigger","useEvents","getRowStyle","getRowClass","getCellStyle","getCellClass","getSpan","getColspanRealWidth","useStyles","firstDefaultColumnIndex","computed","store","states","columns","value","findIndex","type","getKeyOfRow","row","index","rowKey","getRowIdentity","rowRender","$index","treeRowData","tooltipEffect","indent","rowClasses","display","push","level","displayStyle","h","style","class","key","onDblclick","$event","onClick","onContextmenu","onMouseenter","onMouseleave","map","column","cellIndex","rowspan","colspan","columnData","realWidth","data","_self","context","treeNode","expanded","loading","noLazyChildren","baseKey","patchKey","columnKey","rawColumnKey","tdChildren","cellChildren","renderCell","wrappedRowRender","isRowExpanded","assertRowKey","treeData","lazyTreeNodeMap","childrenColumnName","hasExpandColumn","some","renderExpanded","tr","console","error","length","Object","keys","cur","lazy","loaded","children","tmp","i","traverse","parent2","forEach","node","innerTreeRowData","childKey","Error","nodes2","nodes"],"sources":["../../../../../../../packages/components/table/src/table-body/render-helper.ts"],"sourcesContent":["import { h, getCurrentInstance, computed } from 'vue'\nimport { getRowIdentity } from '../util'\nimport useEvents from './events-helper'\nimport useStyles from './styles-helper'\n\nimport type { TableBodyProps } from './defaults'\nimport type {\n  RenderRowData,\n  Table,\n  TreeNode,\n  TableProps,\n} from '../table/defaults'\n\nfunction useRender<T>(props: Partial<TableBodyProps<T>>) {\n  const instance = getCurrentInstance()\n  const parent = instance.parent as Table<T>\n  const {\n    handleDoubleClick,\n    handleClick,\n    handleContextMenu,\n    handleMouseEnter,\n    handleMouseLeave,\n    handleCellMouseEnter,\n    handleCellMouseLeave,\n    tooltipContent,\n    tooltipTrigger,\n  } = useEvents(props)\n  const {\n    getRowStyle,\n    getRowClass,\n    getCellStyle,\n    getCellClass,\n    getSpan,\n    getColspanRealWidth,\n  } = useStyles(props)\n  const firstDefaultColumnIndex = computed(() => {\n    return props.store.states.columns.value.findIndex(\n      ({ type }) => type === 'default'\n    )\n  })\n  const getKeyOfRow = (row: T, index: number) => {\n    const rowKey = (parent.props as Partial<TableProps<T>>).rowKey\n    if (rowKey) {\n      return getRowIdentity(row, rowKey)\n    }\n    return index\n  }\n  const rowRender = (row: T, $index: number, treeRowData?: TreeNode) => {\n    const { tooltipEffect, store } = props\n    const { indent, columns } = store.states\n    const rowClasses = getRowClass(row, $index)\n    let display = true\n    if (treeRowData) {\n      rowClasses.push(`el-table__row--level-${treeRowData.level}`)\n      display = treeRowData.display\n    }\n    const displayStyle = display\n      ? null\n      : {\n          display: 'none',\n        }\n    return h(\n      'tr',\n      {\n        style: [displayStyle, getRowStyle(row, $index)],\n        class: rowClasses,\n        key: getKeyOfRow(row, $index),\n        onDblclick: ($event) => handleDoubleClick($event, row),\n        onClick: ($event) => handleClick($event, row),\n        onContextmenu: ($event) => handleContextMenu($event, row),\n        onMouseenter: () => handleMouseEnter($index),\n        onMouseleave: handleMouseLeave,\n      },\n      columns.value.map((column, cellIndex) => {\n        const { rowspan, colspan } = getSpan(row, column, $index, cellIndex)\n        if (!rowspan || !colspan) {\n          return null\n        }\n        const columnData = { ...column }\n        columnData.realWidth = getColspanRealWidth(\n          columns.value,\n          colspan,\n          cellIndex\n        )\n        const data: RenderRowData<T> = {\n          store: props.store,\n          _self: props.context || parent,\n          column: columnData,\n          row,\n          $index,\n        }\n        if (cellIndex === firstDefaultColumnIndex.value && treeRowData) {\n          data.treeNode = {\n            indent: treeRowData.level * indent.value,\n            level: treeRowData.level,\n          }\n          if (typeof treeRowData.expanded === 'boolean') {\n            data.treeNode.expanded = treeRowData.expanded\n            // 表明是懒加载\n            if ('loading' in treeRowData) {\n              data.treeNode.loading = treeRowData.loading\n            }\n            if ('noLazyChildren' in treeRowData) {\n              data.treeNode.noLazyChildren = treeRowData.noLazyChildren\n            }\n          }\n        }\n        const baseKey = `${$index},${cellIndex}`\n        const patchKey = columnData.columnKey || columnData.rawColumnKey || ''\n        const tdChildren = cellChildren(cellIndex, column, data)\n        return h(\n          'td',\n          {\n            style: getCellStyle($index, cellIndex, row, column),\n            class: getCellClass($index, cellIndex, row, column),\n            key: `${patchKey}${baseKey}`,\n            rowspan,\n            colspan,\n            onMouseenter: ($event) =>\n              handleCellMouseEnter($event, { ...row, tooltipEffect }),\n            onMouseleave: handleCellMouseLeave,\n          },\n          [tdChildren]\n        )\n      })\n    )\n  }\n  const cellChildren = (cellIndex, column, data) => {\n    return column.renderCell(data)\n  }\n  const wrappedRowRender = (row: T, $index: number) => {\n    const store = props.store\n    const { isRowExpanded, assertRowKey } = store\n    const { treeData, lazyTreeNodeMap, childrenColumnName, rowKey } =\n      store.states\n    const hasExpandColumn = store.states.columns.value.some(\n      ({ type }) => type === 'expand'\n    )\n    if (hasExpandColumn && isRowExpanded(row)) {\n      const renderExpanded = parent.renderExpanded\n      const tr = rowRender(row, $index, undefined)\n      if (!renderExpanded) {\n        console.error('[Element Error]renderExpanded is required.')\n        return tr\n      }\n      // 使用二维数组，避免修改 $index\n      // Use a two dimensional array avoid modifying $index\n      return [\n        [\n          tr,\n          h(\n            'tr',\n            {\n              key: `expanded-row__${tr.key as string}`,\n            },\n            [\n              h(\n                'td',\n                {\n                  colspan: store.states.columns.value.length,\n                  class: 'el-table__cell el-table__expanded-cell',\n                },\n                [renderExpanded({ row, $index, store })]\n              ),\n            ]\n          ),\n        ],\n      ]\n    } else if (Object.keys(treeData.value).length) {\n      assertRowKey()\n      // TreeTable 时，rowKey 必须由用户设定，不使用 getKeyOfRow 计算\n      // 在调用 rowRender 函数时，仍然会计算 rowKey，不太好的操作\n      const key = getRowIdentity(row, rowKey.value)\n      let cur = treeData.value[key]\n      let treeRowData = null\n      if (cur) {\n        treeRowData = {\n          expanded: cur.expanded,\n          level: cur.level,\n          display: true,\n        }\n        if (typeof cur.lazy === 'boolean') {\n          if (typeof cur.loaded === 'boolean' && cur.loaded) {\n            treeRowData.noLazyChildren = !(cur.children && cur.children.length)\n          }\n          treeRowData.loading = cur.loading\n        }\n      }\n      const tmp = [rowRender(row, $index, treeRowData)]\n      // 渲染嵌套数据\n      if (cur) {\n        // currentRow 记录的是 index，所以还需主动增加 TreeTable 的 index\n        let i = 0\n        const traverse = (children, parent) => {\n          if (!(children && children.length && parent)) return\n          children.forEach((node) => {\n            // 父节点的 display 状态影响子节点的显示状态\n            const innerTreeRowData = {\n              display: parent.display && parent.expanded,\n              level: parent.level + 1,\n              expanded: false,\n              noLazyChildren: false,\n              loading: false,\n            }\n            const childKey = getRowIdentity(node, rowKey.value)\n            if (childKey === undefined || childKey === null) {\n              throw new Error('For nested data item, row-key is required.')\n            }\n            cur = { ...treeData.value[childKey] }\n            // 对于当前节点，分成有无子节点两种情况。\n            // 如果包含子节点的，设置 expanded 属性。\n            // 对于它子节点的 display 属性由它本身的 expanded 与 display 共同决定。\n            if (cur) {\n              innerTreeRowData.expanded = cur.expanded\n              // 懒加载的某些节点，level 未知\n              cur.level = cur.level || innerTreeRowData.level\n              cur.display = !!(cur.expanded && innerTreeRowData.display)\n              if (typeof cur.lazy === 'boolean') {\n                if (typeof cur.loaded === 'boolean' && cur.loaded) {\n                  innerTreeRowData.noLazyChildren = !(\n                    cur.children && cur.children.length\n                  )\n                }\n                innerTreeRowData.loading = cur.loading\n              }\n            }\n            i++\n            tmp.push(rowRender(node, $index + i, innerTreeRowData))\n            if (cur) {\n              const nodes =\n                lazyTreeNodeMap.value[childKey] ||\n                node[childrenColumnName.value]\n              traverse(nodes, cur)\n            }\n          })\n        }\n        // 对于 root 节点，display 一定为 true\n        cur.display = true\n        const nodes =\n          lazyTreeNodeMap.value[key] || row[childrenColumnName.value]\n        traverse(nodes, cur)\n      }\n      return tmp\n    } else {\n      return rowRender(row, $index, undefined)\n    }\n  }\n\n  return {\n    wrappedRowRender,\n    tooltipContent,\n    tooltipTrigger,\n  }\n}\n\nexport default useRender\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}