{"ast":null,"code":"import { openBlock, createElementBlock, createElementVNode, Fragment, renderList, normalizeClass, normalizeStyle } from 'vue';\nconst _hoisted_1 = {\n  class: \"el-color-predefine\"\n};\nconst _hoisted_2 = {\n  class: \"el-color-predefine__colors\"\n};\nconst _hoisted_3 = [\"onClick\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", _hoisted_1, [createElementVNode(\"div\", _hoisted_2, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.rgbaColors, (item, index) => {\n    return openBlock(), createElementBlock(\"div\", {\n      key: _ctx.colors[index],\n      class: normalizeClass([\"el-color-predefine__color-selector\", {\n        selected: item.selected,\n        \"is-alpha\": item._alpha < 100\n      }]),\n      onClick: $event => _ctx.handleSelect(index)\n    }, [createElementVNode(\"div\", {\n      style: normalizeStyle({\n        backgroundColor: item.value\n      })\n    }, null, 4)], 10, _hoisted_3);\n  }), 128))])]);\n}\nexport { render };","map":{"version":3,"names":["class","createElementBlock","_hoisted_1","createElementVNode","_hoisted_2","Fragment","renderList","_ctx","rgbaColors","item","index","key","colors","normalizeClass","selected","_alpha","onClick","$event","handleSelect","style","normalizeStyle","backgroundColor","value"],"sources":["../../../../../../../packages/components/color-picker/src/components/predefine.vue?vue&type=template&id=391a669c&lang.js"],"sourcesContent":["<template>\n  <div class=\"el-color-predefine\">\n    <div class=\"el-color-predefine__colors\">\n      <div\n        v-for=\"(item, index) in rgbaColors\"\n        :key=\"colors[index]\"\n        class=\"el-color-predefine__color-selector\"\n        :class=\"{ selected: item.selected, 'is-alpha': item._alpha < 100 }\"\n        @click=\"handleSelect(index)\"\n      >\n        <div :style=\"{ backgroundColor: item.value }\"></div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { ref, watch, watchEffect, defineComponent } from 'vue'\nimport { useOptions } from '../useOption'\nimport Color from '../color'\n\nimport type { PropType } from 'vue'\n\nexport default defineComponent({\n  props: {\n    colors: { type: Array, required: true },\n    color: {\n      type: Object as PropType<Color>,\n      required: true,\n    },\n  },\n  setup(props) {\n    const { currentColor } = useOptions()\n    //data\n    const rgbaColors = ref(parseColors(props.colors, props.color))\n\n    //watch\n    watch(\n      () => currentColor.value,\n      (val) => {\n        const color = new Color()\n        color.fromString(val)\n\n        rgbaColors.value.forEach((item) => {\n          item.selected = color.compare(item)\n        })\n      }\n    )\n    watchEffect(() => {\n      rgbaColors.value = parseColors(props.colors, props.color)\n    })\n\n    function handleSelect(index) {\n      props.color.fromString(props.colors[index])\n    }\n    function parseColors(colors, color) {\n      return colors.map((value) => {\n        const c = new Color()\n        c.enableAlpha = true\n        c.format = 'rgba'\n        c.fromString(value)\n        c.selected = c.value === color.value\n        return c\n      })\n    }\n    return {\n      rgbaColors,\n      handleSelect,\n    }\n  },\n})\n</script>\n"],"mappings":";;EACOA,KAAA,EAAM;AAAA;;EACJA,KAAA,EAAM;AAAA;;;sBADbC,kBAAA,QAAAC,UAAA,GACEC,kBAAA,QAAAC,UAAA,I,iBACEH,kBAAA,CAAAI,QAAA,QAAAC,UAAA,CAC0BC,IAAA,CAAAC,UAAA,GAAhBC,IAAA,EAAMC,KAAA;wBADhBT,kBAAA;MAEGU,GAAA,EAAKJ,IAAA,CAAAK,MAAA,CAAOF,KAAA;MACbV,KAAA,EAAAa,cAAA,EAAM;QAAAC,QAAA,EACcL,IAAA,CAAKK,QAAA;QAAA,YAAsBL,IAAA,CAAKM,MAAA;MAAA;MACnDC,OAAA,EAAAC,MAAA,IAAOV,IAAA,CAAAW,YAAA,CAAaR,KAAA;IAAA,IAErBP,kBAAA;MAAMgB,KAAA,EAAAC,cAAA;QAAAC,eAAA,EAA0BZ,IAAA,CAAKa;MAAA;IAAA,Y","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}