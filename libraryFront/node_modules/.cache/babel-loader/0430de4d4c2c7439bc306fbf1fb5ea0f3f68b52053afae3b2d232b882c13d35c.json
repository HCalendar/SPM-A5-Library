{"ast":null,"code":"import { defineComponent, inject, ref } from 'vue';\nvar script = defineComponent({\n  name: \"ElUploadDrag\",\n  props: {\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: [\"file\"],\n  setup(props, {\n    emit\n  }) {\n    const uploader = inject(\"uploader\", {});\n    const dragover = ref(false);\n    function onDrop(e) {\n      var _a;\n      if (props.disabled || !uploader) return;\n      const accept = ((_a = uploader.props) == null ? void 0 : _a.accept) || uploader.accept;\n      dragover.value = false;\n      if (!accept) {\n        emit(\"file\", e.dataTransfer.files);\n        return;\n      }\n      emit(\"file\", Array.from(e.dataTransfer.files).filter(file => {\n        const {\n          type,\n          name\n        } = file;\n        const extension = name.indexOf(\".\") > -1 ? `.${name.split(\".\").pop()}` : \"\";\n        const baseType = type.replace(/\\/.*$/, \"\");\n        return accept.split(\",\").map(type2 => type2.trim()).filter(type2 => type2).some(acceptedType => {\n          if (acceptedType.startsWith(\".\")) {\n            return extension === acceptedType;\n          }\n          if (/\\/\\*$/.test(acceptedType)) {\n            return baseType === acceptedType.replace(/\\/\\*$/, \"\");\n          }\n          if (/^[^/]+\\/[^/]+$/.test(acceptedType)) {\n            return type === acceptedType;\n          }\n          return false;\n        });\n      }));\n    }\n    function onDragover() {\n      if (!props.disabled) dragover.value = true;\n    }\n    return {\n      dragover,\n      onDrop,\n      onDragover\n    };\n  }\n});\nexport { script as default };","map":{"version":3,"names":["script","defineComponent","name","props","disabled","type","Boolean","default","emits","setup","emit","uploader","inject","dragover","ref","onDrop","e","accept","_a","value","dataTransfer","files","Array","from","filter","file","extension","indexOf","split","pop","baseType","replace","map","type2","trim","some","acceptedType","startsWith","test","onDragover"],"sources":["../../../../../../packages/components/upload/src/upload-dragger.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"{\n      'el-upload-dragger': true,\n      'is-dragover': dragover,\n    }\"\n    @drop.prevent=\"onDrop\"\n    @dragover.prevent=\"onDragover\"\n    @dragleave.prevent=\"dragover = false\"\n  >\n    <slot></slot>\n  </div>\n</template>\n<script lang=\"ts\">\nimport { defineComponent, ref, inject } from 'vue'\n\nimport type { ElUpload } from './upload.type'\n\nexport default defineComponent({\n  name: 'ElUploadDrag',\n  props: {\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  emits: ['file'],\n  setup(props, { emit }) {\n    const uploader = inject('uploader', {} as ElUpload)\n    const dragover = ref(false)\n\n    function onDrop(e: DragEvent) {\n      if (props.disabled || !uploader) return\n      const accept = uploader.props?.accept || uploader.accept\n      dragover.value = false\n      if (!accept) {\n        emit('file', e.dataTransfer.files)\n        return\n      }\n      emit(\n        'file',\n        Array.from(e.dataTransfer.files).filter((file) => {\n          const { type, name } = file\n          const extension =\n            name.indexOf('.') > -1 ? `.${name.split('.').pop()}` : ''\n          const baseType = type.replace(/\\/.*$/, '')\n          return accept\n            .split(',')\n            .map((type) => type.trim())\n            .filter((type) => type)\n            .some((acceptedType) => {\n              if (acceptedType.startsWith('.')) {\n                return extension === acceptedType\n              }\n              if (/\\/\\*$/.test(acceptedType)) {\n                return baseType === acceptedType.replace(/\\/\\*$/, '')\n              }\n              if (/^[^/]+\\/[^/]+$/.test(acceptedType)) {\n                return type === acceptedType\n              }\n              return false\n            })\n        })\n      )\n    }\n\n    function onDragover() {\n      if (!props.disabled) dragover.value = true\n    }\n\n    return {\n      dragover,\n      onDrop,\n      onDragover,\n    }\n  },\n})\n</script>\n"],"mappings":";AAkBA,IAAAA,MAAA,GAAeC,eAAA,CAAgB;EAC7BC,IAAA,EAAM;EACNC,KAAA,EAAO;IACLC,QAAA,EAAU;MACRC,IAAA,EAAMC,OAAA;MACNC,OAAA,EAAS;IAAA;EAAA;EAGbC,KAAA,EAAO,CAAC;EACRC,MAAMN,KAAA,EAAO;IAAEO;EAAA,GAAQ;IACrB,MAAMC,QAAA,GAAWC,MAAA,CAAO,YAAY;IACpC,MAAMC,QAAA,GAAWC,GAAA,CAAI;IAErB,SAAAC,OAAgBC,CAAA,EAAc;;MAC5B,IAAIb,KAAA,CAAMC,QAAA,IAAY,CAACO,QAAA,EAAU;MACjC,MAAMM,MAAA,GAAS,EAAAC,EAAA,GAAAP,QAAA,CAASR,KAAA,KAAT,gBAAAe,EAAA,CAAgBD,MAAA,KAAUN,QAAA,CAASM,MAAA;MAClDJ,QAAA,CAASM,KAAA,GAAQ;MACjB,IAAI,CAACF,MAAA,EAAQ;QACXP,IAAA,CAAK,QAAQM,CAAA,CAAEI,YAAA,CAAaC,KAAA;QAC5B;MAAA;MAEFX,IAAA,CACE,QACAY,KAAA,CAAMC,IAAA,CAAKP,CAAA,CAAEI,YAAA,CAAaC,KAAA,EAAOG,MAAA,CAAQC,IAAA,IAAS;QAChD,MAAM;UAAEpB,IAAA;UAAMH;QAAA,IAASuB,IAAA;QACvB,MAAMC,SAAA,GACJxB,IAAA,CAAKyB,OAAA,CAAQ,OAAO,KAAK,IAAIzB,IAAA,CAAK0B,KAAA,CAAM,KAAKC,GAAA,OAAU;QACzD,MAAMC,QAAA,GAAWzB,IAAA,CAAK0B,OAAA,CAAQ,SAAS;QACvC,OAAOd,MAAA,CACJW,KAAA,CAAM,KACNI,GAAA,CAAKC,KAAA,IAASA,KAAA,CAAKC,IAAA,IACnBV,MAAA,CAAQS,KAAA,IAASA,KAAA,EACjBE,IAAA,CAAMC,YAAA,IAAiB;UACtB,IAAIA,YAAA,CAAaC,UAAA,CAAW,MAAM;YAChC,OAAOX,SAAA,KAAcU,YAAA;UAAA;UAEvB,IAAI,QAAQE,IAAA,CAAKF,YAAA,GAAe;YAC9B,OAAON,QAAA,KAAaM,YAAA,CAAaL,OAAA,CAAQ,SAAS;UAAA;UAEpD,IAAI,iBAAiBO,IAAA,CAAKF,YAAA,GAAe;YACvC,OAAO/B,IAAA,KAAS+B,YAAA;UAAA;UAElB,OAAO;QAAA;MAAA;IAAA;IAMjB,SAAAG,WAAA,EAAsB;MACpB,IAAI,CAACpC,KAAA,CAAMC,QAAA,EAAUS,QAAA,CAASM,KAAA,GAAQ;IAAA;IAGxC,OAAO;MACLN,QAAA;MACAE,MAAA;MACAwB;IAAA;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}