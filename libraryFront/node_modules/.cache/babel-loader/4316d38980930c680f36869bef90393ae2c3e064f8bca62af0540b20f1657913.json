{"ast":null,"code":"import { defineComponent, reactive, toRefs } from 'vue';\nimport _Tooltip from '../../tooltip/index.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../utils/constants.mjs';\nimport { useSliderButton } from './useSliderButton.mjs';\nvar script = defineComponent({\n  name: \"ElSliderButton\",\n  components: {\n    ElTooltip: _Tooltip\n  },\n  props: {\n    modelValue: {\n      type: Number,\n      default: 0\n    },\n    vertical: {\n      type: Boolean,\n      default: false\n    },\n    tooltipClass: {\n      type: String,\n      default: \"\"\n    }\n  },\n  emits: [UPDATE_MODEL_EVENT],\n  setup(props, {\n    emit\n  }) {\n    const initData = reactive({\n      hovering: false,\n      dragging: false,\n      isClick: false,\n      startX: 0,\n      currentX: 0,\n      startY: 0,\n      currentY: 0,\n      startPosition: 0,\n      newPosition: 0,\n      oldValue: props.modelValue\n    });\n    const {\n      tooltip,\n      showTooltip,\n      tooltipVisible,\n      wrapperStyle,\n      formatValue,\n      handleMouseEnter,\n      handleMouseLeave,\n      onButtonDown,\n      onLeftKeyDown,\n      onRightKeyDown,\n      setPosition\n    } = useSliderButton(props, initData, emit);\n    const {\n      hovering,\n      dragging\n    } = toRefs(initData);\n    return {\n      tooltip,\n      tooltipVisible,\n      showTooltip,\n      wrapperStyle,\n      formatValue,\n      handleMouseEnter,\n      handleMouseLeave,\n      onButtonDown,\n      onLeftKeyDown,\n      onRightKeyDown,\n      setPosition,\n      hovering,\n      dragging\n    };\n  }\n});\nexport { script as default };","map":{"version":3,"names":["script","defineComponent","name","components","ElTooltip","_Tooltip","props","modelValue","type","Number","default","vertical","Boolean","tooltipClass","String","emits","UPDATE_MODEL_EVENT","setup","emit","initData","reactive","hovering","dragging","isClick","startX","currentX","startY","currentY","startPosition","newPosition","oldValue","tooltip","showTooltip","tooltipVisible","wrapperStyle","formatValue","handleMouseEnter","handleMouseLeave","onButtonDown","onLeftKeyDown","onRightKeyDown","setPosition","useSliderButton","toRefs"],"sources":["../../../../../../packages/components/slider/src/button.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"button\"\n    class=\"el-slider__button-wrapper\"\n    :class=\"{ hover: hovering, dragging: dragging }\"\n    :style=\"wrapperStyle\"\n    tabindex=\"0\"\n    @mouseenter=\"handleMouseEnter\"\n    @mouseleave=\"handleMouseLeave\"\n    @mousedown=\"onButtonDown\"\n    @touchstart=\"onButtonDown\"\n    @focus=\"handleMouseEnter\"\n    @blur=\"handleMouseLeave\"\n    @keydown.left=\"onLeftKeyDown\"\n    @keydown.right=\"onRightKeyDown\"\n    @keydown.down.prevent=\"onLeftKeyDown\"\n    @keydown.up.prevent=\"onRightKeyDown\"\n  >\n    <el-tooltip\n      ref=\"tooltip\"\n      v-model=\"tooltipVisible\"\n      placement=\"top\"\n      :stop-popper-mouse-event=\"false\"\n      :popper-class=\"tooltipClass\"\n      :disabled=\"!showTooltip\"\n      manual\n    >\n      <template #content>\n        <span>{{ formatValue }}</span>\n      </template>\n      <div\n        class=\"el-slider__button\"\n        :class=\"{ hover: hovering, dragging: dragging }\"\n      ></div>\n    </el-tooltip>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, reactive, toRefs } from 'vue'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/utils/constants'\nimport { useSliderButton } from './useSliderButton'\n\nexport default defineComponent({\n  name: 'ElSliderButton',\n\n  components: {\n    ElTooltip,\n  },\n\n  props: {\n    modelValue: {\n      type: Number,\n      default: 0,\n    },\n    vertical: {\n      type: Boolean,\n      default: false,\n    },\n    tooltipClass: {\n      type: String,\n      default: '',\n    },\n  },\n\n  emits: [UPDATE_MODEL_EVENT],\n\n  setup(props, { emit }) {\n    const initData = reactive({\n      hovering: false,\n      dragging: false,\n      isClick: false,\n      startX: 0,\n      currentX: 0,\n      startY: 0,\n      currentY: 0,\n      startPosition: 0,\n      newPosition: 0,\n      oldValue: props.modelValue,\n    })\n\n    const {\n      tooltip,\n      showTooltip,\n      tooltipVisible,\n      wrapperStyle,\n      formatValue,\n      handleMouseEnter,\n      handleMouseLeave,\n      onButtonDown,\n      onLeftKeyDown,\n      onRightKeyDown,\n      setPosition,\n    } = useSliderButton(props, initData, emit)\n\n    const { hovering, dragging } = toRefs(initData)\n\n    return {\n      tooltip,\n      tooltipVisible,\n      showTooltip,\n      wrapperStyle,\n      formatValue,\n      handleMouseEnter,\n      handleMouseLeave,\n      onButtonDown,\n      onLeftKeyDown,\n      onRightKeyDown,\n      setPosition,\n\n      hovering,\n      dragging,\n    }\n  },\n})\n</script>\n"],"mappings":";;;;AA4CA,IAAAA,MAAA,GAAeC,eAAA,CAAgB;EAC7BC,IAAA,EAAM;EAENC,UAAA,EAAY;IAAAC,SAAA,EACVC;EAAA;EAGFC,KAAA,EAAO;IACLC,UAAA,EAAY;MACVC,IAAA,EAAMC,MAAA;MACNC,OAAA,EAAS;IAAA;IAEXC,QAAA,EAAU;MACRH,IAAA,EAAMI,OAAA;MACNF,OAAA,EAAS;IAAA;IAEXG,YAAA,EAAc;MACZL,IAAA,EAAMM,MAAA;MACNJ,OAAA,EAAS;IAAA;EAAA;EAIbK,KAAA,EAAO,CAACC,kBAAA;EAERC,MAAMX,KAAA,EAAO;IAAEY;EAAA,GAAQ;IACrB,MAAMC,QAAA,GAAWC,QAAA,CAAS;MACxBC,QAAA,EAAU;MACVC,QAAA,EAAU;MACVC,OAAA,EAAS;MACTC,MAAA,EAAQ;MACRC,QAAA,EAAU;MACVC,MAAA,EAAQ;MACRC,QAAA,EAAU;MACVC,aAAA,EAAe;MACfC,WAAA,EAAa;MACbC,QAAA,EAAUxB,KAAA,CAAMC;IAAA;IAGlB,MAAM;MACJwB,OAAA;MACAC,WAAA;MACAC,cAAA;MACAC,YAAA;MACAC,WAAA;MACAC,gBAAA;MACAC,gBAAA;MACAC,YAAA;MACAC,aAAA;MACAC,cAAA;MACAC;IAAA,IACEC,eAAA,CAAgBpC,KAAA,EAAOa,QAAA,EAAUD,IAAA;IAErC,MAAM;MAAEG,QAAA;MAAUC;IAAA,IAAaqB,MAAA,CAAOxB,QAAA;IAEtC,OAAO;MACLY,OAAA;MACAE,cAAA;MACAD,WAAA;MACAE,YAAA;MACAC,WAAA;MACAC,gBAAA;MACAC,gBAAA;MACAC,YAAA;MACAC,aAAA;MACAC,cAAA;MACAC,WAAA;MAEApB,QAAA;MACAC;IAAA;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}