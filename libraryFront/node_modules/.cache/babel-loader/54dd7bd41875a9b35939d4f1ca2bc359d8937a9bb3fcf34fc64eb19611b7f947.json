{"ast":null,"code":"import { defineComponent, ref, computed, watch, provide, reactive, onMounted, nextTick } from 'vue';\nimport { useResizeObserver, useEventListener } from '@vueuse/core';\nimport { addUnit, isNumber } from '../../../utils/util.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport '../../../tokens/index.mjs';\nimport './bar2.mjs';\nimport { scrollbarProps, scrollbarEmits } from './scrollbar.mjs';\nimport script$1 from './bar.vue_vue_type_script_lang.mjs';\nimport { scrollbarContextKey } from '../../../tokens/scrollbar.mjs';\nvar script = defineComponent({\n  name: \"ElScrollbar\",\n  components: {\n    Bar: script$1\n  },\n  props: scrollbarProps,\n  emits: scrollbarEmits,\n  setup(props, {\n    emit\n  }) {\n    let stopResizeObserver = void 0;\n    let stopResizeListener = void 0;\n    const scrollbar$ = ref();\n    const wrap$ = ref();\n    const resize$ = ref();\n    const sizeWidth = ref(\"0\");\n    const sizeHeight = ref(\"0\");\n    const moveX = ref(0);\n    const moveY = ref(0);\n    const ratioY = ref(1);\n    const ratioX = ref(1);\n    const SCOPE = \"ElScrollbar\";\n    const GAP = 4;\n    const style = computed(() => {\n      const style2 = {};\n      if (props.height) style2.height = addUnit(props.height);\n      if (props.maxHeight) style2.maxHeight = addUnit(props.maxHeight);\n      return [props.wrapStyle, style2];\n    });\n    const handleScroll = () => {\n      if (wrap$.value) {\n        const offsetHeight = wrap$.value.offsetHeight - GAP;\n        const offsetWidth = wrap$.value.offsetWidth - GAP;\n        moveY.value = wrap$.value.scrollTop * 100 / offsetHeight * ratioY.value;\n        moveX.value = wrap$.value.scrollLeft * 100 / offsetWidth * ratioX.value;\n        emit(\"scroll\", {\n          scrollTop: wrap$.value.scrollTop,\n          scrollLeft: wrap$.value.scrollLeft\n        });\n      }\n    };\n    const setScrollTop = value => {\n      if (!isNumber(value)) {\n        debugWarn(SCOPE, \"value must be a number\");\n        return;\n      }\n      wrap$.value.scrollTop = value;\n    };\n    const setScrollLeft = value => {\n      if (!isNumber(value)) {\n        debugWarn(SCOPE, \"value must be a number\");\n        return;\n      }\n      wrap$.value.scrollLeft = value;\n    };\n    const update = () => {\n      if (!wrap$.value) return;\n      const offsetHeight = wrap$.value.offsetHeight - GAP;\n      const offsetWidth = wrap$.value.offsetWidth - GAP;\n      const originalHeight = offsetHeight ** 2 / wrap$.value.scrollHeight;\n      const originalWidth = offsetWidth ** 2 / wrap$.value.scrollWidth;\n      const height = Math.max(originalHeight, props.minSize);\n      const width = Math.max(originalWidth, props.minSize);\n      ratioY.value = originalHeight / (offsetHeight - originalHeight) / (height / (offsetHeight - height));\n      ratioX.value = originalWidth / (offsetWidth - originalWidth) / (width / (offsetWidth - width));\n      sizeHeight.value = height + GAP < offsetHeight ? `${height}px` : \"\";\n      sizeWidth.value = width + GAP < offsetWidth ? `${width}px` : \"\";\n    };\n    watch(() => props.noresize, noresize => {\n      if (noresize) {\n        stopResizeObserver == null ? void 0 : stopResizeObserver();\n        stopResizeListener == null ? void 0 : stopResizeListener();\n      } else {\n        ;\n        ({\n          stop: stopResizeObserver\n        } = useResizeObserver(resize$, update));\n        stopResizeListener = useEventListener(\"resize\", update);\n      }\n    }, {\n      immediate: true\n    });\n    provide(scrollbarContextKey, reactive({\n      scrollbarElement: scrollbar$,\n      wrapElement: wrap$\n    }));\n    onMounted(() => {\n      if (!props.native) nextTick(() => update());\n    });\n    return {\n      scrollbar$,\n      wrap$,\n      resize$,\n      moveX,\n      moveY,\n      ratioX,\n      ratioY,\n      sizeWidth,\n      sizeHeight,\n      style,\n      update,\n      handleScroll,\n      setScrollTop,\n      setScrollLeft\n    };\n  }\n});\nexport { script as default };","map":{"version":3,"names":["script","defineComponent","name","components","Bar","script$1","props","scrollbarProps","emits","scrollbarEmits","setup","emit","stopResizeObserver","stopResizeListener","scrollbar$","ref","wrap$","resize$","sizeWidth","sizeHeight","moveX","moveY","ratioY","ratioX","SCOPE","GAP","style","computed","style2","height","addUnit","maxHeight","wrapStyle","handleScroll","value","offsetHeight","offsetWidth","scrollTop","scrollLeft","setScrollTop","isNumber","debugWarn","setScrollLeft","update","originalHeight","scrollHeight","originalWidth","scrollWidth","Math","max","minSize","width","watch","noresize","stop","useResizeObserver","useEventListener","immediate","provide","scrollbarContextKey","reactive","scrollbarElement","wrapElement","onMounted","native","nextTick"],"sources":["../../../../../../packages/components/scrollbar/src/scrollbar.vue"],"sourcesContent":["<template>\n  <div ref=\"scrollbar$\" class=\"el-scrollbar\">\n    <div\n      ref=\"wrap$\"\n      :class=\"[\n        wrapClass,\n        'el-scrollbar__wrap',\n        native ? '' : 'el-scrollbar__wrap--hidden-default',\n      ]\"\n      :style=\"style\"\n      @scroll=\"handleScroll\"\n    >\n      <component\n        :is=\"tag\"\n        ref=\"resize$\"\n        :class=\"['el-scrollbar__view', viewClass]\"\n        :style=\"viewStyle\"\n      >\n        <slot />\n      </component>\n    </div>\n    <template v-if=\"!native\">\n      <bar :move=\"moveX\" :ratio=\"ratioX\" :size=\"sizeWidth\" :always=\"always\" />\n      <bar\n        :move=\"moveY\"\n        :ratio=\"ratioY\"\n        :size=\"sizeHeight\"\n        vertical\n        :always=\"always\"\n      />\n    </template>\n  </div>\n</template>\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  nextTick,\n  onMounted,\n  provide,\n  ref,\n  watch,\n  reactive,\n} from 'vue'\nimport { useResizeObserver, useEventListener } from '@vueuse/core'\nimport { addUnit, isNumber } from '@element-plus/utils/util'\nimport { debugWarn } from '@element-plus/utils/error'\nimport { scrollbarContextKey } from '@element-plus/tokens'\nimport Bar from './bar.vue'\n\nimport { scrollbarProps, scrollbarEmits } from './scrollbar'\nimport type { StyleValue, CSSProperties } from 'vue'\n\nexport default defineComponent({\n  name: 'ElScrollbar',\n  components: {\n    Bar,\n  },\n  props: scrollbarProps,\n  emits: scrollbarEmits,\n\n  setup(props, { emit }) {\n    let stopResizeObserver: (() => void) | undefined = undefined\n    let stopResizeListener: (() => void) | undefined = undefined\n\n    const scrollbar$ = ref<HTMLDivElement>()\n    const wrap$ = ref<HTMLDivElement>()\n    const resize$ = ref<HTMLElement>()\n\n    const sizeWidth = ref('0')\n    const sizeHeight = ref('0')\n    const moveX = ref(0)\n    const moveY = ref(0)\n    const ratioY = ref(1)\n    const ratioX = ref(1)\n    const SCOPE = 'ElScrollbar'\n    const GAP = 4 // top 2 + bottom 2 of bar instance\n\n    const style = computed<StyleValue>(() => {\n      const style: CSSProperties = {}\n      if (props.height) style.height = addUnit(props.height)\n      if (props.maxHeight) style.maxHeight = addUnit(props.maxHeight)\n      return [props.wrapStyle, style]\n    })\n\n    const handleScroll = () => {\n      if (wrap$.value) {\n        const offsetHeight = wrap$.value.offsetHeight - GAP\n        const offsetWidth = wrap$.value.offsetWidth - GAP\n\n        moveY.value =\n          ((wrap$.value.scrollTop * 100) / offsetHeight) * ratioY.value\n        moveX.value =\n          ((wrap$.value.scrollLeft * 100) / offsetWidth) * ratioX.value\n\n        emit('scroll', {\n          scrollTop: wrap$.value.scrollTop,\n          scrollLeft: wrap$.value.scrollLeft,\n        })\n      }\n    }\n\n    const setScrollTop = (value: number) => {\n      if (!isNumber(value)) {\n        debugWarn(SCOPE, 'value must be a number')\n        return\n      }\n      wrap$.value!.scrollTop = value\n    }\n\n    const setScrollLeft = (value: number) => {\n      if (!isNumber(value)) {\n        debugWarn(SCOPE, 'value must be a number')\n        return\n      }\n      wrap$.value!.scrollLeft = value\n    }\n\n    const update = () => {\n      if (!wrap$.value) return\n\n      const offsetHeight = wrap$.value.offsetHeight - GAP\n      const offsetWidth = wrap$.value.offsetWidth - GAP\n\n      const originalHeight = offsetHeight ** 2 / wrap$.value.scrollHeight\n      const originalWidth = offsetWidth ** 2 / wrap$.value.scrollWidth\n      const height = Math.max(originalHeight, props.minSize)\n      const width = Math.max(originalWidth, props.minSize)\n\n      ratioY.value =\n        originalHeight /\n        (offsetHeight - originalHeight) /\n        (height / (offsetHeight - height))\n      ratioX.value =\n        originalWidth /\n        (offsetWidth - originalWidth) /\n        (width / (offsetWidth - width))\n\n      sizeHeight.value = height + GAP < offsetHeight ? `${height}px` : ''\n      sizeWidth.value = width + GAP < offsetWidth ? `${width}px` : ''\n    }\n\n    watch(\n      () => props.noresize,\n      (noresize) => {\n        if (noresize) {\n          stopResizeObserver?.()\n          stopResizeListener?.()\n        } else {\n          ;({ stop: stopResizeObserver } = useResizeObserver(resize$, update))\n          stopResizeListener = useEventListener('resize', update)\n        }\n      },\n      { immediate: true }\n    )\n\n    provide(\n      scrollbarContextKey,\n      reactive({\n        scrollbarElement: scrollbar$,\n        wrapElement: wrap$,\n      })\n    )\n\n    onMounted(() => {\n      if (!props.native) nextTick(() => update())\n    })\n\n    return {\n      scrollbar$,\n      wrap$,\n      resize$,\n\n      moveX,\n      moveY,\n      ratioX,\n      ratioY,\n      sizeWidth,\n      sizeHeight,\n      style,\n      update,\n      handleScroll,\n      setScrollTop,\n      setScrollLeft,\n    }\n  },\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}