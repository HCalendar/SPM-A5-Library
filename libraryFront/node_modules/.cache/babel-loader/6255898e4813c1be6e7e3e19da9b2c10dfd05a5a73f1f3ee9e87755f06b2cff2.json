{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { setConfig } from './utils/config.mjs';\nimport './hooks/index.mjs';\nimport { version } from './version.mjs';\nimport { localeProviderMaker, localeContextKey } from './hooks/use-locale/index.mjs';\nconst makeInstaller = (components = []) => {\n  const apps = [];\n  const install = (app, opts) => {\n    const defaultInstallOpt = {\n      size: \"\",\n      zIndex: 2e3\n    };\n    const option = Object.assign(defaultInstallOpt, opts);\n    if (apps.includes(app)) return;\n    apps.push(app);\n    components.forEach(c => app.use(c));\n    if (option.locale) {\n      const localeProvides = localeProviderMaker(opts.locale);\n      app.provide(localeContextKey, localeProvides);\n    }\n    app.config.globalProperties.$ELEMENT = option;\n    setConfig(option);\n  };\n  return {\n    version,\n    install\n  };\n};\nexport { makeInstaller };","map":{"version":3,"names":["makeInstaller","components","apps","install","app","opts","defaultInstallOpt","size","zIndex","option","Object","assign","includes","push","forEach","c","use","locale","localeProvides","localeProviderMaker","provide","localeContextKey","config","globalProperties","$ELEMENT","setConfig","version"],"sources":["../../../packages/element-plus/make-installer.ts"],"sourcesContent":["import { setConfig } from '@element-plus/utils/config'\nimport { localeContextKey, localeProviderMaker } from '@element-plus/hooks'\nimport { version } from './version'\n\nimport type { App, Plugin } from 'vue'\nimport type { InstallOptions } from '@element-plus/utils/config'\n\nexport const makeInstaller = (components: Plugin[] = []) => {\n  const apps: App[] = []\n\n  const install = (app: App, opts: InstallOptions) => {\n    const defaultInstallOpt: InstallOptions = {\n      size: '',\n      zIndex: 2000,\n    }\n\n    const option = Object.assign(defaultInstallOpt, opts)\n    if (apps.includes(app)) return\n    apps.push(app)\n\n    components.forEach((c) => app.use(c))\n\n    if (option.locale) {\n      const localeProvides = localeProviderMaker(opts.locale)\n      app.provide(localeContextKey, localeProvides)\n    }\n\n    app.config.globalProperties.$ELEMENT = option\n    // app.provide() ? is this better? I think its not that flexible but worth implement\n    setConfig(option)\n  }\n\n  return {\n    version,\n    install,\n  }\n}\n"],"mappings":";;;;;MAOaA,aAAA,GAAgBA,CAACC,UAAA,GAAuB,OAAO;EAC1D,MAAMC,IAAA,GAAc;EAEpB,MAAMC,OAAA,GAAUA,CAACC,GAAA,EAAUC,IAAA,KAAyB;IAClD,MAAMC,iBAAA,GAAoC;MACxCC,IAAA,EAAM;MACNC,MAAA,EAAQ;IAAA;IAGV,MAAMC,MAAA,GAASC,MAAA,CAAOC,MAAA,CAAOL,iBAAA,EAAmBD,IAAA;IAChD,IAAIH,IAAA,CAAKU,QAAA,CAASR,GAAA,GAAM;IACxBF,IAAA,CAAKW,IAAA,CAAKT,GAAA;IAEVH,UAAA,CAAWa,OAAA,CAASC,CAAA,IAAMX,GAAA,CAAIY,GAAA,CAAID,CAAA;IAElC,IAAIN,MAAA,CAAOQ,MAAA,EAAQ;MACjB,MAAMC,cAAA,GAAiBC,mBAAA,CAAoBd,IAAA,CAAKY,MAAA;MAChDb,GAAA,CAAIgB,OAAA,CAAQC,gBAAA,EAAkBH,cAAA;IAAA;IAGhCd,GAAA,CAAIkB,MAAA,CAAOC,gBAAA,CAAiBC,QAAA,GAAWf,MAAA;IAEvCgB,SAAA,CAAUhB,MAAA;EAAA;EAGZ,OAAO;IACLiB,OAAA;IACAvB;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}