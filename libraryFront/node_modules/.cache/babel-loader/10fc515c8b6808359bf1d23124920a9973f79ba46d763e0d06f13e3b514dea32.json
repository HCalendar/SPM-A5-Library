{"ast":null,"code":"import { cAF, rAF } from '../../../../utils/raf.mjs';\nimport { isFF } from '../utils.mjs';\nconst useGridWheel = ({\n  atXEndEdge,\n  atXStartEdge,\n  atYEndEdge,\n  atYStartEdge\n}, onWheelDelta) => {\n  let frameHandle = null;\n  let xOffset = 0;\n  let yOffset = 0;\n  const hasReachedEdge = (x, y) => {\n    const xEdgeReached = x < 0 && atXStartEdge.value || x > 0 && atXEndEdge.value;\n    const yEdgeReached = y < 0 && atYStartEdge.value || y > 0 && atYEndEdge.value;\n    return xEdgeReached && yEdgeReached;\n  };\n  const onWheel = e => {\n    cAF(frameHandle);\n    const x = e.deltaX;\n    const y = e.deltaY;\n    if (hasReachedEdge(xOffset, yOffset) && hasReachedEdge(xOffset + x, yOffset + y)) return;\n    xOffset += x;\n    yOffset += y;\n    if (!isFF) {\n      e.preventDefault();\n    }\n    frameHandle = rAF(() => {\n      onWheelDelta(xOffset, yOffset);\n      xOffset = 0;\n      yOffset = 0;\n    });\n  };\n  return {\n    hasReachedEdge,\n    onWheel\n  };\n};\nexport { useGridWheel };","map":{"version":3,"names":["useGridWheel","atXEndEdge","atXStartEdge","atYEndEdge","atYStartEdge","onWheelDelta","frameHandle","xOffset","yOffset","hasReachedEdge","x","y","xEdgeReached","value","yEdgeReached","onWheel","e","cAF","deltaX","deltaY","isFF","preventDefault","rAF"],"sources":["../../../../../../../packages/components/virtual-list/src/hooks/use-grid-wheel.ts"],"sourcesContent":["import { rAF, cAF } from '@element-plus/utils/raf'\nimport { isFF } from '../utils'\n\nimport type { ComputedRef } from 'vue'\n\ninterface GridWheelState {\n  atXStartEdge: ComputedRef<boolean>\n  atXEndEdge: ComputedRef<boolean>\n  atYStartEdge: ComputedRef<boolean>\n  atYEndEdge: ComputedRef<boolean>\n}\n\ntype GridWheelHandler = (x: number, y: number) => void\n\nexport const useGridWheel = (\n  { atXEndEdge, atXStartEdge, atYEndEdge, atYStartEdge }: GridWheelState,\n  onWheelDelta: GridWheelHandler\n) => {\n  let frameHandle: number | null = null\n  let xOffset = 0\n  let yOffset = 0\n\n  const hasReachedEdge = (x: number, y: number) => {\n    const xEdgeReached =\n      (x < 0 && atXStartEdge.value) || (x > 0 && atXEndEdge.value)\n    const yEdgeReached =\n      (y < 0 && atYStartEdge.value) || (y > 0 && atYEndEdge.value)\n    return xEdgeReached && yEdgeReached\n  }\n\n  const onWheel = (e: WheelEvent) => {\n    cAF(frameHandle!)\n\n    const x = e.deltaX\n    const y = e.deltaY\n\n    if (\n      hasReachedEdge(xOffset, yOffset) &&\n      hasReachedEdge(xOffset + x, yOffset + y)\n    )\n      return\n\n    xOffset += x\n    yOffset += y\n\n    if (!isFF) {\n      e.preventDefault()\n    }\n\n    frameHandle = rAF(() => {\n      onWheelDelta(xOffset, yOffset)\n      xOffset = 0\n      yOffset = 0\n    })\n  }\n\n  return {\n    hasReachedEdge,\n    onWheel,\n  }\n}\n"],"mappings":";;MAcaA,YAAA,GAAeA,CAC1B;EAAEC,UAAA;EAAYC,YAAA;EAAcC,UAAA;EAAYC;AAAA,GACxCC,YAAA,KACG;EACH,IAAIC,WAAA,GAA6B;EACjC,IAAIC,OAAA,GAAU;EACd,IAAIC,OAAA,GAAU;EAEd,MAAMC,cAAA,GAAiBA,CAACC,CAAA,EAAWC,CAAA,KAAc;IAC/C,MAAMC,YAAA,GACHF,CAAA,GAAI,KAAKR,YAAA,CAAaW,KAAA,IAAWH,CAAA,GAAI,KAAKT,UAAA,CAAWY,KAAA;IACxD,MAAMC,YAAA,GACHH,CAAA,GAAI,KAAKP,YAAA,CAAaS,KAAA,IAAWF,CAAA,GAAI,KAAKR,UAAA,CAAWU,KAAA;IACxD,OAAOD,YAAA,IAAgBE,YAAA;EAAA;EAGzB,MAAMC,OAAA,GAAWC,CAAA,IAAkB;IACjCC,GAAA,CAAIX,WAAA;IAEJ,MAAMI,CAAA,GAAIM,CAAA,CAAEE,MAAA;IACZ,MAAMP,CAAA,GAAIK,CAAA,CAAEG,MAAA;IAEZ,IACEV,cAAA,CAAeF,OAAA,EAASC,OAAA,KACxBC,cAAA,CAAeF,OAAA,GAAUG,CAAA,EAAGF,OAAA,GAAUG,CAAA,GAEtC;IAEFJ,OAAA,IAAWG,CAAA;IACXF,OAAA,IAAWG,CAAA;IAEX,IAAI,CAACS,IAAA,EAAM;MACTJ,CAAA,CAAEK,cAAA;IAAA;IAGJf,WAAA,GAAcgB,GAAA,CAAI,MAAM;MACtBjB,YAAA,CAAaE,OAAA,EAASC,OAAA;MACtBD,OAAA,GAAU;MACVC,OAAA,GAAU;IAAA;EAAA;EAId,OAAO;IACLC,cAAA;IACAM;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}