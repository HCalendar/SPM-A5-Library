{"ast":null,"code":"import { openBlock, createElementBlock, createElementVNode, normalizeStyle, Fragment, createTextVNode, toDisplayString, renderSlot } from 'vue';\nconst _hoisted_1 = {\n  class: \"el-menu-item-group\"\n};\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"li\", _hoisted_1, [createElementVNode(\"div\", {\n    class: \"el-menu-item-group__title\",\n    style: normalizeStyle({\n      paddingLeft: `${_ctx.levelPadding}px`\n    })\n  }, [!_ctx.$slots.title ? (openBlock(), createElementBlock(Fragment, {\n    key: 0\n  }, [createTextVNode(toDisplayString(_ctx.title), 1)], 2112)) : renderSlot(_ctx.$slots, \"title\", {\n    key: 1\n  })], 4), createElementVNode(\"ul\", null, [renderSlot(_ctx.$slots, \"default\")])]);\n}\nexport { render };","map":{"version":3,"names":["class","createElementBlock","_hoisted_1","createElementVNode","style","normalizeStyle","paddingLeft","_ctx","levelPadding","$slots","title","openBlock","Fragment","key","renderSlot"],"sources":["../../../../../../packages/components/menu/src/menu-item-group.vue?vue&type=template&id=67a2995d&lang.js"],"sourcesContent":["<template>\n  <li class=\"el-menu-item-group\">\n    <div\n      class=\"el-menu-item-group__title\"\n      :style=\"{ paddingLeft: `${levelPadding}px` }\"\n    >\n      <template v-if=\"!$slots.title\">{{ title }}</template>\n      <slot v-else name=\"title\" />\n    </div>\n    <ul>\n      <slot />\n    </ul>\n  </li>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, getCurrentInstance, inject } from 'vue'\nimport { throwError } from '@element-plus/utils/error'\nimport { menuItemGroupProps } from './menu-item-group'\n\nimport type { MenuProvider } from './types'\n\nconst COMPONENT_NAME = 'ElMenuItemGroup'\n\nexport default defineComponent({\n  name: COMPONENT_NAME,\n\n  props: menuItemGroupProps,\n\n  setup() {\n    const instance = getCurrentInstance()!\n    const menu = inject<MenuProvider>('rootMenu')\n    if (!menu) throwError(COMPONENT_NAME, 'can not inject root menu')\n\n    const levelPadding = computed(() => {\n      if (menu.props.collapse) return 20\n      let padding = 20\n      let parent = instance.parent\n      while (parent && parent.type.name !== 'ElMenu') {\n        if (parent.type.name === 'ElSubMenu') {\n          padding += 20\n        }\n        parent = parent.parent\n      }\n      return padding\n    })\n\n    return {\n      levelPadding,\n    }\n  },\n})\n</script>\n"],"mappings":";;EACMA,KAAA,EAAM;AAAA;;sBAAVC,kBAAA,OAAAC,UAAA,GACEC,kBAAA;IACEH,KAAA,EAAM;IACLI,KAAA,EAAAC,cAAA;MAAAC,WAAA,KAAyBC,IAAA,CAAAC,YAAA;IAAA;OAETD,IAAA,CAAAE,MAAA,CAAOC,KAAA,IAAAC,SAAA,IAAxBV,kBAAA,CAAAW,QAAA;IAAAC,GAAA;EAAA,I,gCAAkCN,IAAA,CAAAG,KAAA,M,WAClCI,UAAA,CAAAP,IAAA,CAAAE,MAAA;IAAAI,GAAA;EAAA,G,MAEFV,kBAAA,cACEW,UAAA,CAAAP,IAAA,CAAAE,MAAA,a","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}