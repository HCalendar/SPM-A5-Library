{"ast":null,"code":"import { resolveComponent, withDirectives, openBlock, createElementBlock, normalizeClass, withModifiers, createElementVNode, normalizeStyle, createBlock, withCtx, resolveDynamicComponent, createCommentVNode, createVNode, Fragment, renderList, vShow } from 'vue';\nconst _hoisted_1 = [\"aria-expanded\", \"aria-disabled\", \"aria-checked\", \"draggable\", \"data-key\"];\nconst _hoisted_2 = [\"aria-expanded\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_el_checkbox = resolveComponent(\"el-checkbox\");\n  const _component_loading = resolveComponent(\"loading\");\n  const _component_node_content = resolveComponent(\"node-content\");\n  const _component_el_tree_node = resolveComponent(\"el-tree-node\");\n  const _component_el_collapse_transition = resolveComponent(\"el-collapse-transition\");\n  return withDirectives((openBlock(), createElementBlock(\"div\", {\n    ref: \"node$\",\n    class: normalizeClass([\"el-tree-node\", {\n      \"is-expanded\": _ctx.expanded,\n      \"is-current\": _ctx.node.isCurrent,\n      \"is-hidden\": !_ctx.node.visible,\n      \"is-focusable\": !_ctx.node.disabled,\n      \"is-checked\": !_ctx.node.disabled && _ctx.node.checked,\n      ..._ctx.getNodeClass(_ctx.node)\n    }]),\n    role: \"treeitem\",\n    tabindex: \"-1\",\n    \"aria-expanded\": _ctx.expanded,\n    \"aria-disabled\": _ctx.node.disabled,\n    \"aria-checked\": _ctx.node.checked,\n    draggable: _ctx.tree.props.draggable,\n    \"data-key\": _ctx.getNodeKey(_ctx.node),\n    onClick: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.handleClick && _ctx.handleClick(...args), [\"stop\"])),\n    onContextmenu: _cache[2] || (_cache[2] = (...args) => _ctx.handleContextMenu && _ctx.handleContextMenu(...args)),\n    onDragstart: _cache[3] || (_cache[3] = withModifiers((...args) => _ctx.handleDragStart && _ctx.handleDragStart(...args), [\"stop\"])),\n    onDragover: _cache[4] || (_cache[4] = withModifiers((...args) => _ctx.handleDragOver && _ctx.handleDragOver(...args), [\"stop\"])),\n    onDragend: _cache[5] || (_cache[5] = withModifiers((...args) => _ctx.handleDragEnd && _ctx.handleDragEnd(...args), [\"stop\"])),\n    onDrop: _cache[6] || (_cache[6] = withModifiers((...args) => _ctx.handleDrop && _ctx.handleDrop(...args), [\"stop\"]))\n  }, [createElementVNode(\"div\", {\n    class: \"el-tree-node__content\",\n    style: normalizeStyle({\n      paddingLeft: (_ctx.node.level - 1) * _ctx.tree.props.indent + \"px\"\n    })\n  }, [_ctx.tree.props.icon || _ctx.CaretRight ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0,\n    class: normalizeClass([{\n      \"is-leaf\": _ctx.node.isLeaf,\n      expanded: !_ctx.node.isLeaf && _ctx.expanded\n    }, \"el-tree-node__expand-icon\"]),\n    onClick: withModifiers(_ctx.handleExpandIconClick, [\"stop\"])\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.tree.props.icon || _ctx.CaretRight)))]),\n    _: 1\n  }, 8, [\"class\", \"onClick\"])) : createCommentVNode(\"v-if\", true), _ctx.showCheckbox ? (openBlock(), createBlock(_component_el_checkbox, {\n    key: 1,\n    \"model-value\": _ctx.node.checked,\n    indeterminate: _ctx.node.indeterminate,\n    disabled: !!_ctx.node.disabled,\n    onClick: _cache[0] || (_cache[0] = withModifiers(() => {}, [\"stop\"])),\n    onChange: _ctx.handleCheckChange\n  }, null, 8, [\"model-value\", \"indeterminate\", \"disabled\", \"onChange\"])) : createCommentVNode(\"v-if\", true), _ctx.node.loading ? (openBlock(), createBlock(_component_el_icon, {\n    key: 2,\n    class: \"el-tree-node__loading-icon is-loading\"\n  }, {\n    default: withCtx(() => [createVNode(_component_loading)]),\n    _: 1\n  })) : createCommentVNode(\"v-if\", true), createVNode(_component_node_content, {\n    node: _ctx.node,\n    \"render-content\": _ctx.renderContent\n  }, null, 8, [\"node\", \"render-content\"])], 4), createVNode(_component_el_collapse_transition, null, {\n    default: withCtx(() => [!_ctx.renderAfterExpand || _ctx.childNodeRendered ? withDirectives((openBlock(), createElementBlock(\"div\", {\n      key: 0,\n      class: \"el-tree-node__children\",\n      role: \"group\",\n      \"aria-expanded\": _ctx.expanded\n    }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.node.childNodes, child => {\n      return openBlock(), createBlock(_component_el_tree_node, {\n        key: _ctx.getNodeKey(child),\n        \"render-content\": _ctx.renderContent,\n        \"render-after-expand\": _ctx.renderAfterExpand,\n        \"show-checkbox\": _ctx.showCheckbox,\n        node: child,\n        props: _ctx.props,\n        onNodeExpand: _ctx.handleChildNodeExpand\n      }, null, 8, [\"render-content\", \"render-after-expand\", \"show-checkbox\", \"node\", \"props\", \"onNodeExpand\"]);\n    }), 128))], 8, _hoisted_2)), [[vShow, _ctx.expanded]]) : createCommentVNode(\"v-if\", true)]),\n    _: 1\n  })], 42, _hoisted_1)), [[vShow, _ctx.node.visible]]);\n}\nexport { render };","map":{"version":3,"names":["createElementBlock","ref","class","normalizeClass","role","tabindex","_ctx","expanded","node","disabled","checked","draggable","tree","props","getNodeKey","onClick","_cache","withModifiers","args","handleClick","onContextmenu","handleContextMenu","onDragstart","handleDragStart","onDragover","handleDragOver","onDragend","handleDragEnd","onDrop","handleDrop","createElementVNode","style","normalizeStyle","paddingLeft","level","indent","icon","CaretRight","openBlock","createBlock","_component_el_icon","handleExpandIconClick","resolveDynamicComponent","showCheckbox","_component_el_checkbox","indeterminate","onChange","handleCheckChange","loading","createVNode","_component_loading","_component_node_content","renderContent","_component_el_collapse_transition","renderAfterExpand","childNodeRendered","withDirectives","Fragment","renderList","childNodes","child","_component_el_tree_node","key","onNodeExpand","handleChildNodeExpand","visible"],"sources":["../../../../../../packages/components/tree/src/tree-node.vue?vue&type=template&id=62959aba&lang.js"],"sourcesContent":["<template>\n  <div\n    v-show=\"node.visible\"\n    ref=\"node$\"\n    class=\"el-tree-node\"\n    :class=\"{\n      'is-expanded': expanded,\n      'is-current': node.isCurrent,\n      'is-hidden': !node.visible,\n      'is-focusable': !node.disabled,\n      'is-checked': !node.disabled && node.checked,\n      ...getNodeClass(node),\n    }\"\n    role=\"treeitem\"\n    tabindex=\"-1\"\n    :aria-expanded=\"expanded\"\n    :aria-disabled=\"node.disabled\"\n    :aria-checked=\"node.checked\"\n    :draggable=\"tree.props.draggable\"\n    :data-key=\"getNodeKey(node)\"\n    @click.stop=\"handleClick\"\n    @contextmenu=\"handleContextMenu\"\n    @dragstart.stop=\"handleDragStart\"\n    @dragover.stop=\"handleDragOver\"\n    @dragend.stop=\"handleDragEnd\"\n    @drop.stop=\"handleDrop\"\n  >\n    <div\n      class=\"el-tree-node__content\"\n      :style=\"{ paddingLeft: (node.level - 1) * tree.props.indent + 'px' }\"\n    >\n      <el-icon\n        v-if=\"tree.props.icon || CaretRight\"\n        :class=\"[\n          {\n            'is-leaf': node.isLeaf,\n            expanded: !node.isLeaf && expanded,\n          },\n          'el-tree-node__expand-icon',\n        ]\"\n        @click.stop=\"handleExpandIconClick\"\n      >\n        <component :is=\"tree.props.icon || CaretRight\"></component>\n      </el-icon>\n      <el-checkbox\n        v-if=\"showCheckbox\"\n        :model-value=\"node.checked\"\n        :indeterminate=\"node.indeterminate\"\n        :disabled=\"!!node.disabled\"\n        @click.stop\n        @change=\"handleCheckChange\"\n      />\n      <el-icon\n        v-if=\"node.loading\"\n        class=\"el-tree-node__loading-icon is-loading\"\n      >\n        <loading />\n      </el-icon>\n      <node-content :node=\"node\" :render-content=\"renderContent\" />\n    </div>\n    <el-collapse-transition>\n      <div\n        v-if=\"!renderAfterExpand || childNodeRendered\"\n        v-show=\"expanded\"\n        class=\"el-tree-node__children\"\n        role=\"group\"\n        :aria-expanded=\"expanded\"\n      >\n        <el-tree-node\n          v-for=\"child in node.childNodes\"\n          :key=\"getNodeKey(child)\"\n          :render-content=\"renderContent\"\n          :render-after-expand=\"renderAfterExpand\"\n          :show-checkbox=\"showCheckbox\"\n          :node=\"child\"\n          :props=\"props\"\n          @node-expand=\"handleChildNodeExpand\"\n        />\n      </div>\n    </el-collapse-transition>\n  </div>\n</template>\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  getCurrentInstance,\n  ref,\n  watch,\n  nextTick,\n  inject,\n  provide,\n} from 'vue'\nimport { isString, isFunction } from '@vue/shared'\nimport ElCollapseTransition from '@element-plus/components/collapse-transition'\nimport ElCheckbox from '@element-plus/components/checkbox'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { CaretRight, Loading } from '@element-plus/icons-vue'\nimport { debugWarn } from '@element-plus/utils/error'\nimport NodeContent from './tree-node-content.vue'\nimport { getNodeKey as getNodeKeyUtil } from './model/util'\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast'\nimport { dragEventsKey } from './model/useDragNode'\nimport Node from './model/node'\n\nimport type { ComponentInternalInstance, PropType } from 'vue'\nimport type { Nullable } from '@element-plus/utils/types'\nimport type { TreeOptionProps, TreeNodeData, RootTreeType } from './tree.type'\n\nexport default defineComponent({\n  name: 'ElTreeNode',\n  components: {\n    ElCollapseTransition,\n    ElCheckbox,\n    NodeContent,\n    ElIcon,\n    Loading,\n  },\n  props: {\n    node: {\n      type: Node,\n      default: () => ({}),\n    },\n    props: {\n      type: Object as PropType<TreeOptionProps>,\n      default: () => ({}),\n    },\n    accordion: Boolean,\n    renderContent: Function,\n    renderAfterExpand: Boolean,\n    showCheckbox: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  emits: ['node-expand'],\n  setup(props, ctx) {\n    const { broadcastExpanded } = useNodeExpandEventBroadcast(props)\n    const tree = inject<RootTreeType>('RootTree')\n    const expanded = ref(false)\n    const childNodeRendered = ref(false)\n    const oldChecked = ref<boolean>(null)\n    const oldIndeterminate = ref<boolean>(null)\n    const node$ = ref<Nullable<HTMLElement>>(null)\n    const dragEvents = inject(dragEventsKey)\n    const instance = getCurrentInstance()\n\n    provide('NodeInstance', instance)\n    if (!tree) {\n      debugWarn('Tree', \"Can not find node's tree.\")\n    }\n\n    if (props.node.expanded) {\n      expanded.value = true\n      childNodeRendered.value = true\n    }\n\n    const childrenKey = tree.props['children'] || 'children'\n    watch(\n      () => {\n        const children = props.node.data[childrenKey]\n        return children && [...children]\n      },\n      () => {\n        props.node.updateChildren()\n      }\n    )\n\n    watch(\n      () => props.node.indeterminate,\n      (val) => {\n        handleSelectChange(props.node.checked, val)\n      }\n    )\n\n    watch(\n      () => props.node.checked,\n      (val) => {\n        handleSelectChange(val, props.node.indeterminate)\n      }\n    )\n\n    watch(\n      () => props.node.expanded,\n      (val) => {\n        nextTick(() => (expanded.value = val))\n        if (val) {\n          childNodeRendered.value = true\n        }\n      }\n    )\n\n    const getNodeKey = (node: Node): any => {\n      return getNodeKeyUtil(tree.props.nodeKey, node.data)\n    }\n\n    const getNodeClass = (node: Node) => {\n      const nodeClassFunc = props.props.class\n      if (!nodeClassFunc) {\n        return {}\n      }\n      let className\n      if (isFunction(nodeClassFunc)) {\n        const { data } = node\n        className = nodeClassFunc(data, node)\n      } else {\n        className = nodeClassFunc\n      }\n\n      if (isString(className)) {\n        return { [className]: true }\n      } else {\n        return className\n      }\n    }\n\n    const handleSelectChange = (checked: boolean, indeterminate: boolean) => {\n      if (\n        oldChecked.value !== checked ||\n        oldIndeterminate.value !== indeterminate\n      ) {\n        tree.ctx.emit('check-change', props.node.data, checked, indeterminate)\n      }\n      oldChecked.value = checked\n      oldIndeterminate.value = indeterminate\n    }\n\n    const handleClick = () => {\n      const store = tree.store.value\n      store.setCurrentNode(props.node)\n      tree.ctx.emit(\n        'current-change',\n        store.currentNode ? store.currentNode.data : null,\n        store.currentNode\n      )\n      tree.currentNode.value = props.node\n\n      if (tree.props.expandOnClickNode) {\n        handleExpandIconClick()\n      }\n\n      if (tree.props.checkOnClickNode && !props.node.disabled) {\n        handleCheckChange(null, {\n          target: { checked: !props.node.checked },\n        })\n      }\n      tree.ctx.emit('node-click', props.node.data, props.node, instance)\n    }\n\n    const handleContextMenu = (event: Event) => {\n      if (tree.instance.vnode.props['onNodeContextmenu']) {\n        event.stopPropagation()\n        event.preventDefault()\n      }\n      tree.ctx.emit(\n        'node-contextmenu',\n        event,\n        props.node.data,\n        props.node,\n        instance\n      )\n    }\n\n    const handleExpandIconClick = () => {\n      if (props.node.isLeaf) return\n      if (expanded.value) {\n        tree.ctx.emit('node-collapse', props.node.data, props.node, instance)\n        props.node.collapse()\n      } else {\n        props.node.expand()\n        ctx.emit('node-expand', props.node.data, props.node, instance)\n      }\n    }\n\n    const handleCheckChange = (value, ev) => {\n      props.node.setChecked(ev.target.checked, !tree.props.checkStrictly)\n      nextTick(() => {\n        const store = tree.store.value\n        tree.ctx.emit('check', props.node.data, {\n          checkedNodes: store.getCheckedNodes(),\n          checkedKeys: store.getCheckedKeys(),\n          halfCheckedNodes: store.getHalfCheckedNodes(),\n          halfCheckedKeys: store.getHalfCheckedKeys(),\n        })\n      })\n    }\n\n    const handleChildNodeExpand = (\n      nodeData: TreeNodeData,\n      node: Node,\n      instance: ComponentInternalInstance\n    ) => {\n      broadcastExpanded(node)\n      tree.ctx.emit('node-expand', nodeData, node, instance)\n    }\n\n    const handleDragStart = (event: DragEvent) => {\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragStart({ event, treeNode: props })\n    }\n\n    const handleDragOver = (event: DragEvent) => {\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragOver({\n        event,\n        treeNode: { $el: node$.value, node: props.node },\n      })\n      event.preventDefault()\n    }\n\n    const handleDrop = (event: DragEvent) => {\n      event.preventDefault()\n    }\n\n    const handleDragEnd = (event: DragEvent) => {\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragEnd(event)\n    }\n\n    return {\n      node$,\n      tree,\n      expanded,\n      childNodeRendered,\n      oldChecked,\n      oldIndeterminate,\n      getNodeKey,\n      getNodeClass,\n      handleSelectChange,\n      handleClick,\n      handleContextMenu,\n      handleExpandIconClick,\n      handleCheckChange,\n      handleChildNodeExpand,\n      handleDragStart,\n      handleDragOver,\n      handleDrop,\n      handleDragEnd,\n      CaretRight,\n    }\n  },\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}