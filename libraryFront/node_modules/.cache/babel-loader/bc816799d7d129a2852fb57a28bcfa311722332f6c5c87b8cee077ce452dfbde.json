{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getCurrentInstance, unref, nextTick } from 'vue';\nimport useWatcher from './watcher.mjs';\nfunction replaceColumn(array, column) {\n  return array.map(item => {\n    var _a;\n    if (item.id === column.id) {\n      return column;\n    } else if ((_a = item.children) == null ? void 0 : _a.length) {\n      item.children = replaceColumn(item.children, column);\n    }\n    return item;\n  });\n}\nfunction sortColumn(array) {\n  array.forEach(item => {\n    var _a, _b;\n    item.no = (_a = item.getColumnIndex) == null ? void 0 : _a.call(item);\n    if ((_b = item.children) == null ? void 0 : _b.length) {\n      sortColumn(item.children);\n    }\n  });\n  array.sort((cur, pre) => cur.no - pre.no);\n}\nfunction useStore() {\n  const instance = getCurrentInstance();\n  const watcher = useWatcher();\n  const mutations = {\n    setData(states, data) {\n      const dataInstanceChanged = unref(states.data) !== data;\n      states.data.value = data;\n      states._data.value = data;\n      instance.store.execQuery();\n      instance.store.updateCurrentRowData();\n      instance.store.updateExpandRows();\n      instance.store.updateTreeData(instance.store.states.defaultExpandAll.value);\n      if (unref(states.reserveSelection)) {\n        instance.store.assertRowKey();\n        instance.store.updateSelectionByRowKey();\n      } else {\n        if (dataInstanceChanged) {\n          instance.store.clearSelection();\n        } else {\n          instance.store.cleanSelection();\n        }\n      }\n      instance.store.updateAllSelected();\n      if (instance.$ready) {\n        instance.store.scheduleLayout();\n      }\n    },\n    insertColumn(states, column, parent) {\n      const array = unref(states._columns);\n      let newColumns = [];\n      if (!parent) {\n        array.push(column);\n        newColumns = array;\n      } else {\n        if (parent && !parent.children) {\n          parent.children = [];\n        }\n        parent.children.push(column);\n        newColumns = replaceColumn(array, parent);\n      }\n      sortColumn(newColumns);\n      states._columns.value = newColumns;\n      if (column.type === \"selection\") {\n        states.selectable.value = column.selectable;\n        states.reserveSelection.value = column.reserveSelection;\n      }\n      if (instance.$ready) {\n        instance.store.updateColumns();\n        instance.store.scheduleLayout();\n      }\n    },\n    removeColumn(states, column, parent) {\n      const array = unref(states._columns) || [];\n      if (parent) {\n        parent.children.splice(parent.children.findIndex(item => item.id === column.id), 1);\n        if (parent.children.length === 0) {\n          delete parent.children;\n        }\n        states._columns.value = replaceColumn(array, parent);\n      } else {\n        const index = array.indexOf(column);\n        if (index > -1) {\n          array.splice(index, 1);\n          states._columns.value = array;\n        }\n      }\n      if (instance.$ready) {\n        instance.store.updateColumns();\n        instance.store.scheduleLayout();\n      }\n    },\n    sort(states, options) {\n      const {\n        prop,\n        order,\n        init\n      } = options;\n      if (prop) {\n        const column = unref(states.columns).find(column2 => column2.property === prop);\n        if (column) {\n          column.order = order;\n          instance.store.updateSort(column, prop, order);\n          instance.store.commit(\"changeSortCondition\", {\n            init\n          });\n        }\n      }\n    },\n    changeSortCondition(states, options) {\n      const {\n        sortingColumn: column,\n        sortProp: prop,\n        sortOrder: order\n      } = states;\n      if (unref(order) === null) {\n        states.sortingColumn.value = null;\n        states.sortProp.value = null;\n      }\n      const ingore = {\n        filter: true\n      };\n      instance.store.execQuery(ingore);\n      if (!options || !(options.silent || options.init)) {\n        instance.emit(\"sort-change\", {\n          column: unref(column),\n          prop: unref(prop),\n          order: unref(order)\n        });\n      }\n      instance.store.updateTableScrollY();\n    },\n    filterChange(_states, options) {\n      const {\n        column,\n        values,\n        silent\n      } = options;\n      const newFilters = instance.store.updateFilters(column, values);\n      instance.store.execQuery();\n      if (!silent) {\n        instance.emit(\"filter-change\", newFilters);\n      }\n      instance.store.updateTableScrollY();\n    },\n    toggleAllSelection() {\n      instance.store.toggleAllSelection();\n    },\n    rowSelectedChanged(_states, row) {\n      instance.store.toggleRowSelection(row);\n      instance.store.updateAllSelected();\n    },\n    setHoverRow(states, row) {\n      states.hoverRow.value = row;\n    },\n    setCurrentRow(_states, row) {\n      instance.store.updateCurrentRow(row);\n    }\n  };\n  const commit = function (name, ...args) {\n    const mutations2 = instance.store.mutations;\n    if (mutations2[name]) {\n      mutations2[name].apply(instance, [instance.store.states].concat(args));\n    } else {\n      throw new Error(`Action not found: ${name}`);\n    }\n  };\n  const updateTableScrollY = function () {\n    nextTick(() => instance.layout.updateScrollY.apply(instance.layout));\n  };\n  return {\n    ...watcher,\n    mutations,\n    commit,\n    updateTableScrollY\n  };\n}\nclass HelperStore {\n  constructor() {\n    this.Return = useStore();\n  }\n}\nexport { useStore as default };","map":{"version":3,"names":["replaceColumn","array","column","map","item","_a","id","children","length","sortColumn","forEach","_b","no","getColumnIndex","call","sort","cur","pre","useStore","instance","getCurrentInstance","watcher","useWatcher","mutations","setData","states","data","dataInstanceChanged","unref","value","_data","store","execQuery","updateCurrentRowData","updateExpandRows","updateTreeData","defaultExpandAll","reserveSelection","assertRowKey","updateSelectionByRowKey","clearSelection","cleanSelection","updateAllSelected","$ready","scheduleLayout","insertColumn","parent","_columns","newColumns","push","type","selectable","updateColumns","removeColumn","splice","findIndex","index","indexOf","options","prop","order","init","columns","find","column2","property","updateSort","commit","changeSortCondition","sortingColumn","sortProp","sortOrder","ingore","filter","silent","emit","updateTableScrollY","filterChange","_states","values","newFilters","updateFilters","toggleAllSelection","rowSelectedChanged","row","toggleRowSelection","setHoverRow","hoverRow","setCurrentRow","updateCurrentRow","name","args","mutations2","apply","concat","Error","nextTick","layout","updateScrollY","HelperStore","constructor","Return"],"sources":["../../../../../../../packages/components/table/src/store/index.ts"],"sourcesContent":["import { nextTick, getCurrentInstance, unref } from 'vue'\nimport useWatcher from './watcher'\n\nimport type { Ref } from 'vue'\nimport type { TableColumnCtx } from '../table-column/defaults'\nimport type { Filter, Sort, Table } from '../table/defaults'\n\ninterface WatcherPropsData<T> {\n  data: Ref<T[]>\n  rowKey: Ref<string>\n}\n\nfunction replaceColumn<T>(\n  array: TableColumnCtx<T>[],\n  column: TableColumnCtx<T>\n) {\n  return array.map((item) => {\n    if (item.id === column.id) {\n      return column\n    } else if (item.children?.length) {\n      item.children = replaceColumn(item.children, column)\n    }\n    return item\n  })\n}\n\nfunction sortColumn<T>(array: TableColumnCtx<T>[]) {\n  array.forEach((item) => {\n    item.no = item.getColumnIndex?.()\n    if (item.children?.length) {\n      sortColumn(item.children)\n    }\n  })\n  array.sort((cur, pre) => cur.no - pre.no)\n}\n\nfunction useStore<T>() {\n  const instance = getCurrentInstance() as Table<T>\n  const watcher = useWatcher<T>()\n  type StoreStates = typeof watcher.states\n  const mutations = {\n    setData(states: StoreStates, data: T[]) {\n      const dataInstanceChanged = unref(states.data) !== data\n      states.data.value = data\n      states._data.value = data\n      instance.store.execQuery()\n      // 数据变化，更新部分数据。\n      // 没有使用 computed，而是手动更新部分数据 https://github.com/vuejs/vue/issues/6660#issuecomment-331417140\n      instance.store.updateCurrentRowData()\n      instance.store.updateExpandRows()\n      instance.store.updateTreeData(\n        instance.store.states.defaultExpandAll.value\n      )\n      if (unref(states.reserveSelection)) {\n        instance.store.assertRowKey()\n        instance.store.updateSelectionByRowKey()\n      } else {\n        if (dataInstanceChanged) {\n          instance.store.clearSelection()\n        } else {\n          instance.store.cleanSelection()\n        }\n      }\n      instance.store.updateAllSelected()\n      if (instance.$ready) {\n        instance.store.scheduleLayout()\n      }\n    },\n\n    insertColumn(\n      states: StoreStates,\n      column: TableColumnCtx<T>,\n      parent: TableColumnCtx<T>\n    ) {\n      const array = unref(states._columns)\n      let newColumns = []\n      if (!parent) {\n        array.push(column)\n        newColumns = array\n      } else {\n        if (parent && !parent.children) {\n          parent.children = []\n        }\n        parent.children.push(column)\n        newColumns = replaceColumn(array, parent)\n      }\n      sortColumn(newColumns)\n      states._columns.value = newColumns\n      if (column.type === 'selection') {\n        states.selectable.value = column.selectable\n        states.reserveSelection.value = column.reserveSelection\n      }\n      if (instance.$ready) {\n        instance.store.updateColumns() // hack for dynamics insert column\n        instance.store.scheduleLayout()\n      }\n    },\n\n    removeColumn(\n      states: StoreStates,\n      column: TableColumnCtx<T>,\n      parent: TableColumnCtx<T>\n    ) {\n      const array = unref(states._columns) || []\n      if (parent) {\n        parent.children.splice(\n          parent.children.findIndex((item) => item.id === column.id),\n          1\n        )\n        if (parent.children.length === 0) {\n          delete parent.children\n        }\n        states._columns.value = replaceColumn(array, parent)\n      } else {\n        const index = array.indexOf(column)\n        if (index > -1) {\n          array.splice(index, 1)\n          states._columns.value = array\n        }\n      }\n\n      if (instance.$ready) {\n        instance.store.updateColumns() // hack for dynamics remove column\n        instance.store.scheduleLayout()\n      }\n    },\n\n    sort(states: StoreStates, options: Sort) {\n      const { prop, order, init } = options\n      if (prop) {\n        const column = unref(states.columns).find(\n          (column) => column.property === prop\n        )\n        if (column) {\n          column.order = order\n          instance.store.updateSort(column, prop, order)\n          instance.store.commit('changeSortCondition', { init })\n        }\n      }\n    },\n\n    changeSortCondition(states: StoreStates, options: Sort) {\n      // 修复 pr https://github.com/ElemeFE/element/pull/15012 导致的 bug\n      const { sortingColumn: column, sortProp: prop, sortOrder: order } = states\n      if (unref(order) === null) {\n        states.sortingColumn.value = null\n        states.sortProp.value = null\n      }\n      const ingore = { filter: true }\n      instance.store.execQuery(ingore)\n\n      if (!options || !(options.silent || options.init)) {\n        instance.emit('sort-change', {\n          column: unref(column),\n          prop: unref(prop),\n          order: unref(order),\n        })\n      }\n\n      instance.store.updateTableScrollY()\n    },\n\n    filterChange(_states: StoreStates, options: Filter<T>) {\n      const { column, values, silent } = options\n      const newFilters = instance.store.updateFilters(column, values)\n      instance.store.execQuery()\n\n      if (!silent) {\n        instance.emit('filter-change', newFilters)\n      }\n      instance.store.updateTableScrollY()\n    },\n\n    toggleAllSelection() {\n      instance.store.toggleAllSelection()\n    },\n\n    rowSelectedChanged(_states, row: T) {\n      instance.store.toggleRowSelection(row)\n      instance.store.updateAllSelected()\n    },\n\n    setHoverRow(states: StoreStates, row: T) {\n      states.hoverRow.value = row\n    },\n\n    setCurrentRow(_states, row: T) {\n      instance.store.updateCurrentRow(row)\n    },\n  }\n  const commit = function (name: keyof typeof mutations, ...args) {\n    const mutations = instance.store.mutations\n    if (mutations[name]) {\n      mutations[name].apply(instance, [instance.store.states].concat(args))\n    } else {\n      throw new Error(`Action not found: ${name}`)\n    }\n  }\n  const updateTableScrollY = function () {\n    nextTick(() => instance.layout.updateScrollY.apply(instance.layout))\n  }\n  return {\n    ...watcher,\n    mutations,\n    commit,\n    updateTableScrollY,\n  }\n}\nexport default useStore\n\nclass HelperStore<T> {\n  Return = useStore<T>()\n}\ntype StoreFilter = Record<string, string[]>\ntype Store<T> = HelperStore<T>['Return']\nexport type { WatcherPropsData, Store, StoreFilter }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}