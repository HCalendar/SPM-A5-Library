{"ast":null,"code":"import { cloneVNode } from 'vue';\nimport { throwError } from '../../../../utils/error.mjs';\nimport { getFirstValidNode } from '../../../../utils/vnode.mjs';\nfunction renderTrigger(trigger, extraProps) {\n  const firstElement = getFirstValidNode(trigger, 1);\n  if (!firstElement) throwError(\"renderTrigger\", \"trigger expects single rooted node\");\n  return cloneVNode(firstElement, extraProps, true);\n}\nexport { renderTrigger as default };","map":{"version":3,"names":["trigger","extraProps","firstElement","getFirstValidNode","throwError","cloneVNode"],"sources":["../../../../../../../packages/components/popper/src/renderers/trigger.ts"],"sourcesContent":["import { cloneVNode } from 'vue'\nimport { throwError } from '@element-plus/utils/error'\nimport { getFirstValidNode } from '@element-plus/utils/vnode'\n\nimport type { VNode, Ref, ComponentPublicInstance } from 'vue'\n\ntype EventHandler = (e: Event) => any\ninterface IRenderTriggerProps extends Record<string, unknown> {\n  ref: string | Ref<ComponentPublicInstance | HTMLElement>\n  onClick?: EventHandler\n  onMouseover?: EventHandler\n  onMouseleave?: EventHandler\n  onFocus?: EventHandler\n}\n\nexport default function renderTrigger(\n  trigger: VNode[],\n  extraProps: IRenderTriggerProps\n) {\n  const firstElement = getFirstValidNode(trigger, 1)\n  if (!firstElement)\n    throwError('renderTrigger', 'trigger expects single rooted node')\n  return cloneVNode(firstElement, extraProps, true)\n}\n"],"mappings":";;;uBAgBEA,OAAA,EACAC,UAAA,EACA;EACA,MAAMC,YAAA,GAAeC,iBAAA,CAAkBH,OAAA,EAAS;EAChD,IAAI,CAACE,YAAA,EACHE,UAAA,CAAW,iBAAiB;EAC9B,OAAOC,UAAA,CAAWH,YAAA,EAAcD,UAAA,EAAY;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}