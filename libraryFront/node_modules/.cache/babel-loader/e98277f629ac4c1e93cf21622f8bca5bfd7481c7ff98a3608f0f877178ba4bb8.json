{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getCurrentInstance } from 'vue';\nfunction useStyles(props) {\n  const instance = getCurrentInstance();\n  const parent = instance.parent;\n  const isColumnHidden = index => {\n    if (props.fixed === \"left\") {\n      return index >= props.store.states.fixedLeafColumnsLength.value;\n    } else if (props.fixed === \"right\") {\n      return index < props.store.states.columns.value.length - props.store.states.rightFixedLeafColumnsLength.value;\n    } else {\n      return index < props.store.states.fixedLeafColumnsLength.value || index >= props.store.states.columns.value.length - props.store.states.rightFixedLeafColumnsLength.value;\n    }\n  };\n  const getRowStyle = (row, rowIndex) => {\n    const rowStyle = parent.props.rowStyle;\n    if (typeof rowStyle === \"function\") {\n      return rowStyle.call(null, {\n        row,\n        rowIndex\n      });\n    }\n    return rowStyle || null;\n  };\n  const getRowClass = (row, rowIndex) => {\n    const classes = [\"el-table__row\"];\n    if (parent.props.highlightCurrentRow && row === props.store.states.currentRow.value) {\n      classes.push(\"current-row\");\n    }\n    if (props.stripe && rowIndex % 2 === 1) {\n      classes.push(\"el-table__row--striped\");\n    }\n    const rowClassName = parent.props.rowClassName;\n    if (typeof rowClassName === \"string\") {\n      classes.push(rowClassName);\n    } else if (typeof rowClassName === \"function\") {\n      classes.push(rowClassName.call(null, {\n        row,\n        rowIndex\n      }));\n    }\n    if (props.store.states.expandRows.value.indexOf(row) > -1) {\n      classes.push(\"expanded\");\n    }\n    return classes;\n  };\n  const getCellStyle = (rowIndex, columnIndex, row, column) => {\n    const cellStyle = parent.props.cellStyle;\n    if (typeof cellStyle === \"function\") {\n      return cellStyle.call(null, {\n        rowIndex,\n        columnIndex,\n        row,\n        column\n      });\n    }\n    return cellStyle;\n  };\n  const getCellClass = (rowIndex, columnIndex, row, column) => {\n    const classes = [column.id, column.align, column.className];\n    if (isColumnHidden(columnIndex)) {\n      classes.push(\"is-hidden\");\n    }\n    const cellClassName = parent.props.cellClassName;\n    if (typeof cellClassName === \"string\") {\n      classes.push(cellClassName);\n    } else if (typeof cellClassName === \"function\") {\n      classes.push(cellClassName.call(null, {\n        rowIndex,\n        columnIndex,\n        row,\n        column\n      }));\n    }\n    classes.push(\"el-table__cell\");\n    return classes.join(\" \");\n  };\n  const getSpan = (row, column, rowIndex, columnIndex) => {\n    let rowspan = 1;\n    let colspan = 1;\n    const fn = parent.props.spanMethod;\n    if (typeof fn === \"function\") {\n      const result = fn({\n        row,\n        column,\n        rowIndex,\n        columnIndex\n      });\n      if (Array.isArray(result)) {\n        rowspan = result[0];\n        colspan = result[1];\n      } else if (typeof result === \"object\") {\n        rowspan = result.rowspan;\n        colspan = result.colspan;\n      }\n    }\n    return {\n      rowspan,\n      colspan\n    };\n  };\n  const getColspanRealWidth = (columns, colspan, index) => {\n    if (colspan < 1) {\n      return columns[index].realWidth;\n    }\n    const widthArr = columns.map(({\n      realWidth,\n      width\n    }) => realWidth || width).slice(index, index + colspan);\n    return Number(widthArr.reduce((acc, width) => Number(acc) + Number(width), -1));\n  };\n  return {\n    getRowStyle,\n    getRowClass,\n    getCellStyle,\n    getCellClass,\n    getSpan,\n    getColspanRealWidth,\n    isColumnHidden\n  };\n}\nexport { useStyles as default };","map":{"version":3,"names":["useStyles","props","instance","getCurrentInstance","parent","isColumnHidden","index","fixed","store","states","fixedLeafColumnsLength","value","columns","length","rightFixedLeafColumnsLength","getRowStyle","row","rowIndex","rowStyle","call","getRowClass","classes","highlightCurrentRow","currentRow","push","stripe","rowClassName","expandRows","indexOf","getCellStyle","columnIndex","column","cellStyle","getCellClass","id","align","className","cellClassName","join","getSpan","rowspan","colspan","fn","spanMethod","result","Array","isArray","getColspanRealWidth","realWidth","widthArr","map","width","slice","Number","reduce","acc"],"sources":["../../../../../../../packages/components/table/src/table-body/styles-helper.ts"],"sourcesContent":["import { getCurrentInstance } from 'vue'\n\nimport type { TableColumnCtx } from '../table-column/defaults'\nimport type { Table } from '../table/defaults'\nimport type { TableBodyProps } from './defaults'\n\nfunction useStyles<T>(props: Partial<TableBodyProps<T>>) {\n  const instance = getCurrentInstance()\n  const parent = instance.parent as Table<T>\n  const isColumnHidden = (index) => {\n    if (props.fixed === 'left') {\n      return index >= props.store.states.fixedLeafColumnsLength.value\n    } else if (props.fixed === 'right') {\n      return (\n        index <\n        props.store.states.columns.value.length -\n          props.store.states.rightFixedLeafColumnsLength.value\n      )\n    } else {\n      return (\n        index < props.store.states.fixedLeafColumnsLength.value ||\n        index >=\n          props.store.states.columns.value.length -\n            props.store.states.rightFixedLeafColumnsLength.value\n      )\n    }\n  }\n  const getRowStyle = (row: T, rowIndex: number) => {\n    const rowStyle = parent.props.rowStyle\n    if (typeof rowStyle === 'function') {\n      return rowStyle.call(null, {\n        row,\n        rowIndex,\n      })\n    }\n    return rowStyle || null\n  }\n\n  const getRowClass = (row: T, rowIndex: number) => {\n    const classes = ['el-table__row']\n    if (\n      parent.props.highlightCurrentRow &&\n      row === props.store.states.currentRow.value\n    ) {\n      classes.push('current-row')\n    }\n\n    if (props.stripe && rowIndex % 2 === 1) {\n      classes.push('el-table__row--striped')\n    }\n    const rowClassName = parent.props.rowClassName\n    if (typeof rowClassName === 'string') {\n      classes.push(rowClassName)\n    } else if (typeof rowClassName === 'function') {\n      classes.push(\n        rowClassName.call(null, {\n          row,\n          rowIndex,\n        })\n      )\n    }\n\n    if (props.store.states.expandRows.value.indexOf(row) > -1) {\n      classes.push('expanded')\n    }\n\n    return classes\n  }\n\n  const getCellStyle = (\n    rowIndex: number,\n    columnIndex: number,\n    row: T,\n    column: TableColumnCtx<T>\n  ) => {\n    const cellStyle = parent.props.cellStyle\n    if (typeof cellStyle === 'function') {\n      return cellStyle.call(null, {\n        rowIndex,\n        columnIndex,\n        row,\n        column,\n      })\n    }\n    return cellStyle\n  }\n\n  const getCellClass = (\n    rowIndex: number,\n    columnIndex: number,\n    row: T,\n    column: TableColumnCtx<T>\n  ) => {\n    const classes = [column.id, column.align, column.className]\n\n    if (isColumnHidden(columnIndex)) {\n      classes.push('is-hidden')\n    }\n\n    const cellClassName = parent.props.cellClassName\n    if (typeof cellClassName === 'string') {\n      classes.push(cellClassName)\n    } else if (typeof cellClassName === 'function') {\n      classes.push(\n        cellClassName.call(null, {\n          rowIndex,\n          columnIndex,\n          row,\n          column,\n        })\n      )\n    }\n\n    classes.push('el-table__cell')\n\n    return classes.join(' ')\n  }\n  const getSpan = (\n    row: T,\n    column: TableColumnCtx<T>,\n    rowIndex: number,\n    columnIndex: number\n  ) => {\n    let rowspan = 1\n    let colspan = 1\n    const fn = parent.props.spanMethod\n    if (typeof fn === 'function') {\n      const result = fn({\n        row,\n        column,\n        rowIndex,\n        columnIndex,\n      })\n      if (Array.isArray(result)) {\n        rowspan = result[0]\n        colspan = result[1]\n      } else if (typeof result === 'object') {\n        rowspan = result.rowspan\n        colspan = result.colspan\n      }\n    }\n    return { rowspan, colspan }\n  }\n  const getColspanRealWidth = (\n    columns: TableColumnCtx<T>[],\n    colspan: number,\n    index: number\n  ): number => {\n    if (colspan < 1) {\n      return columns[index].realWidth\n    }\n    const widthArr = columns\n      .map(({ realWidth, width }) => realWidth || width)\n      .slice(index, index + colspan)\n    return Number(\n      widthArr.reduce((acc, width) => Number(acc) + Number(width), -1)\n    )\n  }\n\n  return {\n    getRowStyle,\n    getRowClass,\n    getCellStyle,\n    getCellClass,\n    getSpan,\n    getColspanRealWidth,\n    isColumnHidden,\n  }\n}\n\nexport default useStyles\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}