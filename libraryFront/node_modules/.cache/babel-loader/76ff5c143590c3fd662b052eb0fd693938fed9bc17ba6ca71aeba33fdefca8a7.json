{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent, getCurrentInstance, inject, ref, onMounted } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../tokens/index.mjs';\nimport { breadcrumbItemProps } from './breadcrumb-item.mjs';\nimport { elBreadcrumbKey } from '../../../tokens/breadcrumb.mjs';\nconst COMPONENT_NAME = \"ElBreadcrumbItem\";\nvar script = defineComponent({\n  name: COMPONENT_NAME,\n  components: {\n    ElIcon\n  },\n  props: breadcrumbItemProps,\n  setup(props) {\n    const instance = getCurrentInstance();\n    const router = instance.appContext.config.globalProperties.$router;\n    const parent = inject(elBreadcrumbKey, void 0);\n    const link = ref();\n    onMounted(() => {\n      link.value.setAttribute(\"role\", \"link\");\n      link.value.addEventListener(\"click\", () => {\n        if (!props.to || !router) return;\n        props.replace ? router.replace(props.to) : router.push(props.to);\n      });\n    });\n    return {\n      link,\n      separator: parent == null ? void 0 : parent.separator,\n      separatorIcon: parent == null ? void 0 : parent.separatorIcon\n    };\n  }\n});\nexport { script as default };","map":{"version":3,"names":["COMPONENT_NAME","script","defineComponent","name","components","ElIcon","props","breadcrumbItemProps","setup","instance","getCurrentInstance","router","appContext","config","globalProperties","$router","parent","inject","elBreadcrumbKey","link","ref","onMounted","value","setAttribute","addEventListener","to","replace","push","separator","separatorIcon"],"sources":["../../../../../../packages/components/breadcrumb/src/breadcrumb-item.vue"],"sourcesContent":["<template>\n  <span class=\"el-breadcrumb__item\">\n    <span\n      ref=\"link\"\n      :class=\"['el-breadcrumb__inner', to ? 'is-link' : '']\"\n      role=\"link\"\n    >\n      <slot></slot>\n    </span>\n    <el-icon v-if=\"separatorIcon\" class=\"el-breadcrumb__separator\">\n      <component :is=\"separatorIcon\" />\n    </el-icon>\n    <span v-else class=\"el-breadcrumb__separator\" role=\"presentation\">\n      {{ separator }}\n    </span>\n  </span>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  inject,\n  ref,\n  onMounted,\n  getCurrentInstance,\n} from 'vue'\nimport ElIcon from '@element-plus/components/icon'\nimport { elBreadcrumbKey } from '@element-plus/tokens'\nimport { breadcrumbItemProps } from './breadcrumb-item'\n\nimport type { Router } from 'vue-router'\n\nconst COMPONENT_NAME = 'ElBreadcrumbItem'\n\nexport default defineComponent({\n  name: COMPONENT_NAME,\n\n  components: {\n    ElIcon,\n  },\n\n  props: breadcrumbItemProps,\n\n  setup(props) {\n    const instance = getCurrentInstance()!\n    const router = instance.appContext.config.globalProperties.$router as Router\n    const parent = inject(elBreadcrumbKey, undefined)\n\n    const link = ref<HTMLSpanElement>()\n\n    onMounted(() => {\n      link.value!.setAttribute('role', 'link')\n      link.value!.addEventListener('click', () => {\n        if (!props.to || !router) return\n        props.replace ? router.replace(props.to) : router.push(props.to)\n      })\n    })\n\n    return {\n      link,\n      separator: parent?.separator,\n      separatorIcon: parent?.separatorIcon,\n    }\n  },\n})\n</script>\n"],"mappings":";;;;;;AAgCA,MAAMA,cAAA,GAAiB;AAEvB,IAAAC,MAAA,GAAeC,eAAA,CAAgB;EAC7BC,IAAA,EAAMH,cAAA;EAENI,UAAA,EAAY;IACVC;EAAA;EAGFC,KAAA,EAAOC,mBAAA;EAEPC,MAAMF,KAAA,EAAO;IACX,MAAMG,QAAA,GAAWC,kBAAA;IACjB,MAAMC,MAAA,GAASF,QAAA,CAASG,UAAA,CAAWC,MAAA,CAAOC,gBAAA,CAAiBC,OAAA;IAC3D,MAAMC,MAAA,GAASC,MAAA,CAAOC,eAAA,EAAiB;IAEvC,MAAMC,IAAA,GAAOC,GAAA;IAEbC,SAAA,CAAU,MAAM;MACdF,IAAA,CAAKG,KAAA,CAAOC,YAAA,CAAa,QAAQ;MACjCJ,IAAA,CAAKG,KAAA,CAAOE,gBAAA,CAAiB,SAAS,MAAM;QAC1C,IAAI,CAAClB,KAAA,CAAMmB,EAAA,IAAM,CAACd,MAAA,EAAQ;QAC1BL,KAAA,CAAMoB,OAAA,GAAUf,MAAA,CAAOe,OAAA,CAAQpB,KAAA,CAAMmB,EAAA,IAAMd,MAAA,CAAOgB,IAAA,CAAKrB,KAAA,CAAMmB,EAAA;MAAA;IAAA;IAIjE,OAAO;MACLN,IAAA;MACAS,SAAA,EAAWZ,MAAA,oBAAAA,MAAA,CAAQY,SAAA;MACnBC,aAAA,EAAeb,MAAA,oBAAAA,MAAA,CAAQa;IAAA;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}