{"ast":null,"code":"import { defineComponent, ref, inject, watch, nextTick, onMounted, onUpdated, onBeforeUnmount, h, Fragment } from 'vue';\nimport { addResizeListener, removeResizeListener } from '../../../utils/resize-event.mjs';\nimport '../../../tokens/index.mjs';\nimport { elFormKey, elFormItemKey } from '../../../tokens/form.mjs';\nvar LabelWrap = defineComponent({\n  name: \"ElLabelWrap\",\n  props: {\n    isAutoWidth: Boolean,\n    updateAll: Boolean\n  },\n  setup(props, {\n    slots\n  }) {\n    const el = ref(null);\n    const elForm = inject(elFormKey);\n    const elFormItem = inject(elFormItemKey);\n    const computedWidth = ref(0);\n    watch(computedWidth, (val, oldVal) => {\n      if (props.updateAll) {\n        elForm.registerLabelWidth(val, oldVal);\n        elFormItem.updateComputedLabelWidth(val);\n      }\n    });\n    const getLabelWidth = () => {\n      var _a;\n      if ((_a = el.value) == null ? void 0 : _a.firstElementChild) {\n        const width = window.getComputedStyle(el.value.firstElementChild).width;\n        return Math.ceil(parseFloat(width));\n      } else {\n        return 0;\n      }\n    };\n    const updateLabelWidth = (action = \"update\") => {\n      nextTick(() => {\n        if (slots.default && props.isAutoWidth) {\n          if (action === \"update\") {\n            computedWidth.value = getLabelWidth();\n          } else if (action === \"remove\") {\n            elForm.deregisterLabelWidth(computedWidth.value);\n          }\n        }\n      });\n    };\n    const updateLabelWidthFn = () => updateLabelWidth(\"update\");\n    onMounted(() => {\n      addResizeListener(el.value.firstElementChild, updateLabelWidthFn);\n      updateLabelWidthFn();\n    });\n    onUpdated(updateLabelWidthFn);\n    onBeforeUnmount(() => {\n      var _a;\n      updateLabelWidth(\"remove\");\n      removeResizeListener((_a = el.value) == null ? void 0 : _a.firstElementChild, updateLabelWidthFn);\n    });\n    function render() {\n      var _a, _b;\n      if (!slots) return null;\n      if (props.isAutoWidth) {\n        const autoLabelWidth = elForm.autoLabelWidth;\n        const style = {};\n        if (autoLabelWidth && autoLabelWidth !== \"auto\") {\n          const marginWidth = Math.max(0, parseInt(autoLabelWidth, 10) - computedWidth.value);\n          const marginPosition = elForm.labelPosition === \"left\" ? \"marginRight\" : \"marginLeft\";\n          if (marginWidth) {\n            style[marginPosition] = `${marginWidth}px`;\n          }\n        }\n        return h(\"div\", {\n          ref: el,\n          class: [\"el-form-item__label-wrap\"],\n          style\n        }, (_a = slots.default) == null ? void 0 : _a.call(slots));\n      } else {\n        return h(Fragment, {\n          ref: el\n        }, (_b = slots.default) == null ? void 0 : _b.call(slots));\n      }\n    }\n    return render;\n  }\n});\nexport { LabelWrap as default };","map":{"version":3,"names":["LabelWrap","defineComponent","name","props","isAutoWidth","Boolean","updateAll","setup","slots","el","ref","elForm","inject","elFormKey","elFormItem","elFormItemKey","computedWidth","watch","val","oldVal","registerLabelWidth","updateComputedLabelWidth","getLabelWidth","_a","value","firstElementChild","width","window","getComputedStyle","Math","ceil","parseFloat","updateLabelWidth","action","nextTick","default","deregisterLabelWidth","updateLabelWidthFn","onMounted","addResizeListener","onUpdated","onBeforeUnmount","removeResizeListener","render","_b","autoLabelWidth","style","marginWidth","max","parseInt","marginPosition","labelPosition","h","class","call","Fragment"],"sources":["../../../../../../packages/components/form/src/label-wrap.ts"],"sourcesContent":["import {\n  defineComponent,\n  Fragment,\n  h,\n  inject,\n  nextTick,\n  onBeforeUnmount,\n  onMounted,\n  onUpdated,\n  ref,\n  watch,\n} from 'vue'\nimport {\n  addResizeListener,\n  removeResizeListener,\n} from '@element-plus/utils/resize-event'\nimport { elFormItemKey, elFormKey } from '@element-plus/tokens'\nimport type { ResizableElement } from '@element-plus/utils/resize-event'\n\nimport type { CSSProperties } from 'vue'\nimport type { Nullable } from '@element-plus/utils/types'\n\nexport default defineComponent({\n  name: 'ElLabelWrap',\n  props: {\n    isAutoWidth: Boolean,\n    updateAll: Boolean,\n  },\n  setup(props, { slots }) {\n    const el = ref<Nullable<HTMLElement>>(null)\n    const elForm = inject(elFormKey)\n    const elFormItem = inject(elFormItemKey)\n\n    const computedWidth = ref(0)\n    watch(computedWidth, (val, oldVal) => {\n      if (props.updateAll) {\n        elForm.registerLabelWidth(val, oldVal)\n        elFormItem.updateComputedLabelWidth(val)\n      }\n    })\n\n    const getLabelWidth = () => {\n      if (el.value?.firstElementChild) {\n        const width = window.getComputedStyle(el.value.firstElementChild).width\n        return Math.ceil(parseFloat(width))\n      } else {\n        return 0\n      }\n    }\n    const updateLabelWidth = (action = 'update') => {\n      nextTick(() => {\n        if (slots.default && props.isAutoWidth) {\n          if (action === 'update') {\n            computedWidth.value = getLabelWidth()\n          } else if (action === 'remove') {\n            elForm.deregisterLabelWidth(computedWidth.value)\n          }\n        }\n      })\n    }\n    const updateLabelWidthFn = () => updateLabelWidth('update')\n\n    onMounted(() => {\n      addResizeListener(\n        el.value.firstElementChild as ResizableElement,\n        updateLabelWidthFn\n      )\n      updateLabelWidthFn()\n    })\n\n    onUpdated(updateLabelWidthFn)\n\n    onBeforeUnmount(() => {\n      updateLabelWidth('remove')\n      removeResizeListener(\n        el.value?.firstElementChild as ResizableElement,\n        updateLabelWidthFn\n      )\n    })\n\n    function render() {\n      if (!slots) return null\n      if (props.isAutoWidth) {\n        const autoLabelWidth = elForm.autoLabelWidth\n        const style = {} as CSSProperties\n        if (autoLabelWidth && autoLabelWidth !== 'auto') {\n          const marginWidth = Math.max(\n            0,\n            parseInt(autoLabelWidth, 10) - computedWidth.value\n          )\n          const marginPosition =\n            elForm.labelPosition === 'left' ? 'marginRight' : 'marginLeft'\n          if (marginWidth) {\n            style[marginPosition] = `${marginWidth}px`\n          }\n        }\n        return h(\n          'div',\n          {\n            ref: el,\n            class: ['el-form-item__label-wrap'],\n            style,\n          },\n          slots.default?.()\n        )\n      } else {\n        return h(Fragment, { ref: el }, slots.default?.())\n      }\n    }\n\n    return render\n  },\n})\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}