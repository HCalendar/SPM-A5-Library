{"ast":null,"code":"import { withDirectives, openBlock, createElementBlock, renderSlot, vShow, createCommentVNode } from 'vue';\nconst _hoisted_1 = [\"id\", \"aria-hidden\", \"aria-labelledby\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _ctx.shouldBeRender ? withDirectives((openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    id: `pane-${_ctx.paneName}`,\n    class: \"el-tab-pane\",\n    role: \"tabpanel\",\n    \"aria-hidden\": !_ctx.active,\n    \"aria-labelledby\": `tab-${_ctx.paneName}`\n  }, [renderSlot(_ctx.$slots, \"default\")], 8, _hoisted_1)), [[vShow, _ctx.active]]) : createCommentVNode(\"v-if\", true);\n}\nexport { render };","map":{"version":3,"names":["_ctx","shouldBeRender","withDirectives","openBlock","createElementBlock","id","paneName","class","role","active","renderSlot","$slots"],"sources":["../../../../../../packages/components/tabs/src/tab-pane.vue?vue&type=template&id=46ec5d32&lang.js"],"sourcesContent":["<template>\n  <div\n    v-if=\"shouldBeRender\"\n    v-show=\"active\"\n    :id=\"`pane-${paneName}`\"\n    class=\"el-tab-pane\"\n    role=\"tabpanel\"\n    :aria-hidden=\"!active\"\n    :aria-labelledby=\"`tab-${paneName}`\"\n  >\n    <slot></slot>\n  </div>\n</template>\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  ref,\n  computed,\n  inject,\n  getCurrentInstance,\n  watch,\n  markRaw,\n  reactive,\n} from 'vue'\nimport { eagerComputed } from '@vueuse/core'\nimport { tabsRootContextKey } from '@element-plus/tokens'\nimport { throwError } from '@element-plus/utils/error'\nimport { tabPaneProps } from './tab-pane'\n\nconst COMPONENT_NAME = 'ElTabPane'\n\nexport default defineComponent({\n  name: COMPONENT_NAME,\n  props: tabPaneProps,\n  setup(props) {\n    const instance = getCurrentInstance()!\n    const tabsRoot = inject(tabsRootContextKey)\n    if (!tabsRoot) throwError(COMPONENT_NAME, `must use with ElTabs`)\n\n    const index = ref<string>()\n    const loaded = ref(false)\n    const isClosable = computed(() => props.closable || tabsRoot.props.closable)\n    const active = eagerComputed(\n      () => tabsRoot.currentName.value === (props.name || index.value)\n    )\n    const paneName = computed(() => props.name || index.value)\n    const shouldBeRender = eagerComputed(\n      () => !props.lazy || loaded.value || active.value\n    )\n\n    watch(active, (val) => {\n      if (val) loaded.value = true\n    })\n\n    tabsRoot.updatePaneState(\n      reactive({\n        uid: instance.uid,\n        instance: markRaw(instance),\n        props,\n        paneName,\n        active,\n        index,\n        isClosable,\n      })\n    )\n\n    return {\n      active,\n      paneName,\n      shouldBeRender,\n    }\n  },\n})\n</script>\n"],"mappings":";;;SAEUA,IAAA,CAAAC,cAAA,GAAAC,cAAA,EAAAC,SAAA,IADRC,kBAAA;;IAGGC,EAAA,UAAYL,IAAA,CAAAM,QAAA;IACbC,KAAA,EAAM;IACNC,IAAA,EAAK;IACJ,gBAAcR,IAAA,CAAAS,MAAA;IACd,0BAAwBT,IAAA,CAAAM,QAAA;MAEzBI,UAAA,CAAAV,IAAA,CAAAW,MAAA,a,4BAPQX,IAAA,CAAAS,MAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}