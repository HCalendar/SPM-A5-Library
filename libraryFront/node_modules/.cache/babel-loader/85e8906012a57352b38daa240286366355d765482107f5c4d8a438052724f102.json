{"ast":null,"code":"import { defineComponent, getCurrentInstance, ref, computed, watch } from 'vue';\nimport { ElCheckbox } from '../../checkbox/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { ArrowDown, ArrowUp } from '@element-plus/icons-vue';\nimport '../../../directives/index.mjs';\nimport '../../../hooks/index.mjs';\nimport _Popper from '../../popper/index.mjs';\nimport { ElScrollbar } from '../../scrollbar/index.mjs';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { Effect } from '../../popper/src/use-popper/defaults.mjs';\nconst {\n  CheckboxGroup: ElCheckboxGroup\n} = ElCheckbox;\nvar script = defineComponent({\n  name: \"ElTableFilterPanel\",\n  components: {\n    ElCheckbox,\n    ElCheckboxGroup,\n    ElScrollbar,\n    ElPopper: _Popper,\n    ElIcon,\n    ArrowDown,\n    ArrowUp\n  },\n  directives: {\n    ClickOutside\n  },\n  props: {\n    placement: {\n      type: String,\n      default: \"bottom-start\"\n    },\n    store: {\n      type: Object\n    },\n    column: {\n      type: Object\n    },\n    upDataColumn: {\n      type: Function\n    }\n  },\n  setup(props) {\n    const instance = getCurrentInstance();\n    const {\n      t\n    } = useLocale();\n    const parent = instance.parent;\n    if (!parent.filterPanels.value[props.column.id]) {\n      parent.filterPanels.value[props.column.id] = instance;\n    }\n    const tooltipVisible = ref(false);\n    const tooltip = ref(null);\n    const filters = computed(() => {\n      return props.column && props.column.filters;\n    });\n    const filterValue = computed({\n      get: () => (props.column.filteredValue || [])[0],\n      set: value => {\n        if (filteredValue.value) {\n          if (typeof value !== \"undefined\" && value !== null) {\n            filteredValue.value.splice(0, 1, value);\n          } else {\n            filteredValue.value.splice(0, 1);\n          }\n        }\n      }\n    });\n    const filteredValue = computed({\n      get() {\n        if (props.column) {\n          return props.column.filteredValue || [];\n        }\n        return [];\n      },\n      set(value) {\n        if (props.column) {\n          props.upDataColumn(\"filteredValue\", value);\n        }\n      }\n    });\n    const multiple = computed(() => {\n      if (props.column) {\n        return props.column.filterMultiple;\n      }\n      return true;\n    });\n    const isActive = filter => {\n      return filter.value === filterValue.value;\n    };\n    const hidden = () => {\n      tooltipVisible.value = false;\n    };\n    const showFilterPanel = e => {\n      e.stopPropagation();\n      tooltipVisible.value = !tooltipVisible.value;\n    };\n    const hideFilterPanel = () => {\n      tooltipVisible.value = false;\n    };\n    const handleConfirm = () => {\n      confirmFilter(filteredValue.value);\n      hidden();\n    };\n    const handleReset = () => {\n      filteredValue.value = [];\n      confirmFilter(filteredValue.value);\n      hidden();\n    };\n    const handleSelect = _filterValue => {\n      filterValue.value = _filterValue;\n      if (typeof _filterValue !== \"undefined\" && _filterValue !== null) {\n        confirmFilter(filteredValue.value);\n      } else {\n        confirmFilter([]);\n      }\n      hidden();\n    };\n    const confirmFilter = filteredValue2 => {\n      props.store.commit(\"filterChange\", {\n        column: props.column,\n        values: filteredValue2\n      });\n      props.store.updateAllSelected();\n    };\n    watch(tooltipVisible, value => {\n      if (props.column) {\n        props.upDataColumn(\"filterOpened\", value);\n      }\n    }, {\n      immediate: true\n    });\n    const popperPaneRef = computed(() => {\n      var _a;\n      return (_a = tooltip.value) == null ? void 0 : _a.popperRef;\n    });\n    return {\n      tooltipVisible,\n      multiple,\n      filteredValue,\n      filterValue,\n      filters,\n      handleConfirm,\n      handleReset,\n      handleSelect,\n      isActive,\n      t,\n      showFilterPanel,\n      hideFilterPanel,\n      popperPaneRef,\n      tooltip,\n      Effect\n    };\n  }\n});\nexport { script as default };","map":{"version":3,"names":["CheckboxGroup","ElCheckboxGroup","ElCheckbox","script","defineComponent","name","components","ElScrollbar","ElPopper","_Popper","ElIcon","ArrowDown","ArrowUp","directives","ClickOutside","props","placement","type","String","default","store","Object","column","upDataColumn","Function","setup","instance","getCurrentInstance","t","useLocale","parent","filterPanels","value","id","tooltipVisible","ref","tooltip","filters","computed","filterValue","get","filteredValue","set","splice","multiple","filterMultiple","isActive","filter","hidden","showFilterPanel","e","stopPropagation","hideFilterPanel","handleConfirm","confirmFilter","handleReset","handleSelect","_filterValue","filteredValue2","commit","values","updateAllSelected","watch","immediate","popperPaneRef","_a","popperRef","Effect"],"sources":["../../../../../../packages/components/table/src/filter-panel.vue"],"sourcesContent":["<template>\n  <el-popper\n    ref=\"tooltip\"\n    v-model:visible=\"tooltipVisible\"\n    :offset=\"0\"\n    :placement=\"placement\"\n    :show-arrow=\"false\"\n    :stop-popper-mouse-event=\"false\"\n    :effect=\"Effect.LIGHT\"\n    pure\n    manual-mode\n    popper-class=\"el-table-filter\"\n    append-to-body\n  >\n    <template #default>\n      <div v-if=\"multiple\">\n        <div class=\"el-table-filter__content\">\n          <el-scrollbar wrap-class=\"el-table-filter__wrap\">\n            <el-checkbox-group\n              v-model=\"filteredValue\"\n              class=\"el-table-filter__checkbox-group\"\n            >\n              <el-checkbox\n                v-for=\"filter in filters\"\n                :key=\"filter.value\"\n                :label=\"filter.value\"\n              >\n                {{ filter.text }}\n              </el-checkbox>\n            </el-checkbox-group>\n          </el-scrollbar>\n        </div>\n        <div class=\"el-table-filter__bottom\">\n          <button\n            :class=\"{ 'is-disabled': filteredValue.length === 0 }\"\n            :disabled=\"filteredValue.length === 0\"\n            type=\"button\"\n            @click=\"handleConfirm\"\n          >\n            {{ t('el.table.confirmFilter') }}\n          </button>\n          <button type=\"button\" @click=\"handleReset\">\n            {{ t('el.table.resetFilter') }}\n          </button>\n        </div>\n      </div>\n      <ul v-else class=\"el-table-filter__list\">\n        <li\n          :class=\"{\n            'is-active': filterValue === undefined || filterValue === null,\n          }\"\n          class=\"el-table-filter__list-item\"\n          @click=\"handleSelect(null)\"\n        >\n          {{ t('el.table.clearFilter') }}\n        </li>\n        <li\n          v-for=\"filter in filters\"\n          :key=\"filter.value\"\n          :class=\"{ 'is-active': isActive(filter) }\"\n          :label=\"filter.value\"\n          class=\"el-table-filter__list-item\"\n          @click=\"handleSelect(filter.value)\"\n        >\n          {{ filter.text }}\n        </li>\n      </ul>\n    </template>\n    <template #trigger>\n      <span\n        v-click-outside:[popperPaneRef]=\"hideFilterPanel\"\n        class=\"el-table__column-filter-trigger el-none-outline\"\n        @click=\"showFilterPanel\"\n      >\n        <el-icon>\n          <arrow-up v-if=\"column.filterOpened\" />\n          <arrow-down v-else />\n        </el-icon>\n      </span>\n    </template>\n  </el-popper>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, ref, computed, getCurrentInstance, watch } from 'vue'\nimport ElCheckbox from '@element-plus/components/checkbox'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { ArrowDown, ArrowUp } from '@element-plus/icons-vue'\nimport { ClickOutside } from '@element-plus/directives'\nimport { useLocale } from '@element-plus/hooks'\nimport ElPopper, { Effect } from '@element-plus/components/popper'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport type { Placement } from '@element-plus/components/popper'\n\nimport type { WritableComputedRef, PropType } from 'vue'\nimport type { TableColumnCtx } from './table-column/defaults'\nimport type { TableHeader } from './table-header'\nimport type { Store } from './store'\n\nconst { CheckboxGroup: ElCheckboxGroup } = ElCheckbox\n\nexport default defineComponent({\n  name: 'ElTableFilterPanel',\n  components: {\n    ElCheckbox,\n    ElCheckboxGroup,\n    ElScrollbar,\n    ElPopper,\n    ElIcon,\n    ArrowDown,\n    ArrowUp,\n  },\n  directives: { ClickOutside },\n  props: {\n    placement: {\n      type: String as PropType<Placement>,\n      default: 'bottom-start',\n    },\n    store: {\n      type: Object as PropType<Store<unknown>>,\n    },\n    column: {\n      type: Object as PropType<TableColumnCtx<unknown>>,\n    },\n    upDataColumn: {\n      type: Function,\n    },\n  },\n  setup(props) {\n    const instance = getCurrentInstance()\n    const { t } = useLocale()\n    const parent = instance.parent as TableHeader\n    if (!parent.filterPanels.value[props.column.id]) {\n      parent.filterPanels.value[props.column.id] = instance\n    }\n    const tooltipVisible = ref(false)\n    const tooltip = ref(null)\n    const filters = computed(() => {\n      return props.column && props.column.filters\n    })\n    const filterValue = computed({\n      get: () => (props.column.filteredValue || [])[0],\n      set: (value: string) => {\n        if (filteredValue.value) {\n          if (typeof value !== 'undefined' && value !== null) {\n            filteredValue.value.splice(0, 1, value)\n          } else {\n            filteredValue.value.splice(0, 1)\n          }\n        }\n      },\n    })\n    const filteredValue: WritableComputedRef<unknown[]> = computed({\n      get() {\n        if (props.column) {\n          return props.column.filteredValue || []\n        }\n        return []\n      },\n      set(value: unknown[]) {\n        if (props.column) {\n          props.upDataColumn('filteredValue', value)\n        }\n      },\n    })\n    const multiple = computed(() => {\n      if (props.column) {\n        return props.column.filterMultiple\n      }\n      return true\n    })\n    const isActive = (filter) => {\n      return filter.value === filterValue.value\n    }\n    const hidden = () => {\n      tooltipVisible.value = false\n    }\n    const showFilterPanel = (e: MouseEvent) => {\n      e.stopPropagation()\n      tooltipVisible.value = !tooltipVisible.value\n    }\n    const hideFilterPanel = () => {\n      tooltipVisible.value = false\n    }\n    const handleConfirm = () => {\n      confirmFilter(filteredValue.value)\n      hidden()\n    }\n    const handleReset = () => {\n      filteredValue.value = []\n      confirmFilter(filteredValue.value)\n      hidden()\n    }\n    const handleSelect = (_filterValue?: string) => {\n      filterValue.value = _filterValue\n      if (typeof _filterValue !== 'undefined' && _filterValue !== null) {\n        confirmFilter(filteredValue.value)\n      } else {\n        confirmFilter([])\n      }\n      hidden()\n    }\n    const confirmFilter = (filteredValue: unknown[]) => {\n      props.store.commit('filterChange', {\n        column: props.column,\n        values: filteredValue,\n      })\n      props.store.updateAllSelected()\n    }\n    watch(\n      tooltipVisible,\n      (value) => {\n        // todo\n        if (props.column) {\n          props.upDataColumn('filterOpened', value)\n        }\n      },\n      {\n        immediate: true,\n      }\n    )\n\n    const popperPaneRef = computed(() => {\n      return tooltip.value?.popperRef\n    })\n\n    return {\n      tooltipVisible,\n      multiple,\n      filteredValue,\n      filterValue,\n      filters,\n      handleConfirm,\n      handleReset,\n      handleSelect,\n      isActive,\n      t,\n      showFilterPanel,\n      hideFilterPanel,\n      popperPaneRef,\n      tooltip,\n      Effect,\n    }\n  },\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}