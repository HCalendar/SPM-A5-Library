{"ast":null,"code":"import { inject, shallowRef, ref, computed, nextTick } from 'vue';\nimport { UPDATE_MODEL_EVENT, INPUT_EVENT, CHANGE_EVENT } from '../../../utils/constants.mjs';\nimport '../../../tokens/index.mjs';\nimport { elFormKey, elFormItemKey } from '../../../tokens/form.mjs';\nconst useSlide = (props, initData, emit) => {\n  const elForm = inject(elFormKey, {});\n  const elFormItem = inject(elFormItemKey, {});\n  const slider = shallowRef(null);\n  const firstButton = ref(null);\n  const secondButton = ref(null);\n  const buttonRefs = {\n    firstButton,\n    secondButton\n  };\n  const sliderDisabled = computed(() => {\n    return props.disabled || elForm.disabled || false;\n  });\n  const minValue = computed(() => {\n    return Math.min(initData.firstValue, initData.secondValue);\n  });\n  const maxValue = computed(() => {\n    return Math.max(initData.firstValue, initData.secondValue);\n  });\n  const barSize = computed(() => {\n    return props.range ? `${100 * (maxValue.value - minValue.value) / (props.max - props.min)}%` : `${100 * (initData.firstValue - props.min) / (props.max - props.min)}%`;\n  });\n  const barStart = computed(() => {\n    return props.range ? `${100 * (minValue.value - props.min) / (props.max - props.min)}%` : \"0%\";\n  });\n  const runwayStyle = computed(() => {\n    return props.vertical ? {\n      height: props.height\n    } : {};\n  });\n  const barStyle = computed(() => {\n    return props.vertical ? {\n      height: barSize.value,\n      bottom: barStart.value\n    } : {\n      width: barSize.value,\n      left: barStart.value\n    };\n  });\n  const resetSize = () => {\n    if (slider.value) {\n      initData.sliderSize = slider.value[`client${props.vertical ? \"Height\" : \"Width\"}`];\n    }\n  };\n  const setPosition = percent => {\n    const targetValue = props.min + percent * (props.max - props.min) / 100;\n    if (!props.range) {\n      firstButton.value.setPosition(percent);\n      return;\n    }\n    let buttonRefName;\n    if (Math.abs(minValue.value - targetValue) < Math.abs(maxValue.value - targetValue)) {\n      buttonRefName = initData.firstValue < initData.secondValue ? \"firstButton\" : \"secondButton\";\n    } else {\n      buttonRefName = initData.firstValue > initData.secondValue ? \"firstButton\" : \"secondButton\";\n    }\n    buttonRefs[buttonRefName].value.setPosition(percent);\n  };\n  const setFirstValue = firstValue => {\n    initData.firstValue = firstValue;\n    _emit(props.range ? [minValue.value, maxValue.value] : firstValue);\n  };\n  const setSecondValue = secondValue => {\n    initData.secondValue = secondValue;\n    if (props.range) {\n      _emit([minValue.value, maxValue.value]);\n    }\n  };\n  const _emit = val => {\n    emit(UPDATE_MODEL_EVENT, val);\n    emit(INPUT_EVENT, val);\n  };\n  const emitChange = async () => {\n    await nextTick();\n    emit(CHANGE_EVENT, props.range ? [minValue.value, maxValue.value] : props.modelValue);\n  };\n  const onSliderClick = event => {\n    if (sliderDisabled.value || initData.dragging) return;\n    resetSize();\n    if (props.vertical) {\n      const sliderOffsetBottom = slider.value.getBoundingClientRect().bottom;\n      setPosition((sliderOffsetBottom - event.clientY) / initData.sliderSize * 100);\n    } else {\n      const sliderOffsetLeft = slider.value.getBoundingClientRect().left;\n      setPosition((event.clientX - sliderOffsetLeft) / initData.sliderSize * 100);\n    }\n    emitChange();\n  };\n  return {\n    elFormItem,\n    slider,\n    firstButton,\n    secondButton,\n    sliderDisabled,\n    minValue,\n    maxValue,\n    runwayStyle,\n    barStyle,\n    resetSize,\n    setPosition,\n    emitChange,\n    onSliderClick,\n    setFirstValue,\n    setSecondValue\n  };\n};\nexport { useSlide };","map":{"version":3,"names":["useSlide","props","initData","emit","elForm","inject","elFormKey","elFormItem","elFormItemKey","slider","shallowRef","firstButton","ref","secondButton","buttonRefs","sliderDisabled","computed","disabled","minValue","Math","min","firstValue","secondValue","maxValue","max","barSize","range","value","barStart","runwayStyle","vertical","height","barStyle","bottom","width","left","resetSize","sliderSize","setPosition","percent","targetValue","buttonRefName","abs","setFirstValue","_emit","setSecondValue","val","UPDATE_MODEL_EVENT","INPUT_EVENT","emitChange","nextTick","CHANGE_EVENT","modelValue","onSliderClick","event","dragging","sliderOffsetBottom","getBoundingClientRect","clientY","sliderOffsetLeft","clientX"],"sources":["../../../../../../packages/components/slider/src/useSlide.ts"],"sourcesContent":["import { computed, inject, nextTick, ref, shallowRef } from 'vue'\nimport {\n  CHANGE_EVENT,\n  UPDATE_MODEL_EVENT,\n  INPUT_EVENT,\n} from '@element-plus/utils/constants'\nimport { elFormKey, elFormItemKey } from '@element-plus/tokens'\nimport type { CSSProperties } from 'vue'\nimport type { ButtonRefs, ISliderInitData, ISliderProps } from './slider.type'\n\nimport type { ElFormContext, ElFormItemContext } from '@element-plus/tokens'\nimport type { Nullable } from '@element-plus/utils/types'\n\nexport const useSlide = (\n  props: ISliderProps,\n  initData: ISliderInitData,\n  emit\n) => {\n  const elForm = inject(elFormKey, {} as ElFormContext)\n  const elFormItem = inject(elFormItemKey, {} as ElFormItemContext)\n\n  const slider = shallowRef<Nullable<HTMLElement>>(null)\n\n  const firstButton = ref(null)\n\n  const secondButton = ref(null)\n\n  const buttonRefs: ButtonRefs = {\n    firstButton,\n    secondButton,\n  }\n\n  const sliderDisabled = computed(() => {\n    return props.disabled || elForm.disabled || false\n  })\n\n  const minValue = computed(() => {\n    return Math.min(initData.firstValue, initData.secondValue)\n  })\n\n  const maxValue = computed(() => {\n    return Math.max(initData.firstValue, initData.secondValue)\n  })\n\n  const barSize = computed(() => {\n    return props.range\n      ? `${\n          (100 * (maxValue.value - minValue.value)) / (props.max - props.min)\n        }%`\n      : `${\n          (100 * (initData.firstValue - props.min)) / (props.max - props.min)\n        }%`\n  })\n\n  const barStart = computed(() => {\n    return props.range\n      ? `${(100 * (minValue.value - props.min)) / (props.max - props.min)}%`\n      : '0%'\n  })\n\n  const runwayStyle = computed<CSSProperties>(() => {\n    return props.vertical ? { height: props.height } : {}\n  })\n\n  const barStyle = computed<CSSProperties>(() => {\n    return props.vertical\n      ? {\n          height: barSize.value,\n          bottom: barStart.value,\n        }\n      : {\n          width: barSize.value,\n          left: barStart.value,\n        }\n  })\n\n  const resetSize = () => {\n    if (slider.value) {\n      initData.sliderSize =\n        slider.value[`client${props.vertical ? 'Height' : 'Width'}`]\n    }\n  }\n\n  const setPosition = (percent: number) => {\n    const targetValue = props.min + (percent * (props.max - props.min)) / 100\n    if (!props.range) {\n      firstButton.value.setPosition(percent)\n      return\n    }\n    let buttonRefName: string\n    if (\n      Math.abs(minValue.value - targetValue) <\n      Math.abs(maxValue.value - targetValue)\n    ) {\n      buttonRefName =\n        initData.firstValue < initData.secondValue\n          ? 'firstButton'\n          : 'secondButton'\n    } else {\n      buttonRefName =\n        initData.firstValue > initData.secondValue\n          ? 'firstButton'\n          : 'secondButton'\n    }\n    buttonRefs[buttonRefName].value.setPosition(percent)\n  }\n\n  const setFirstValue = (firstValue: number) => {\n    initData.firstValue = firstValue\n    _emit(props.range ? [minValue.value, maxValue.value] : firstValue)\n  }\n\n  const setSecondValue = (secondValue: number) => {\n    initData.secondValue = secondValue\n\n    if (props.range) {\n      _emit([minValue.value, maxValue.value])\n    }\n  }\n\n  const _emit = (val: number | number[]) => {\n    emit(UPDATE_MODEL_EVENT, val)\n    emit(INPUT_EVENT, val)\n  }\n\n  const emitChange = async () => {\n    await nextTick()\n    emit(\n      CHANGE_EVENT,\n      props.range ? [minValue.value, maxValue.value] : props.modelValue\n    )\n  }\n\n  const onSliderClick = (event: MouseEvent) => {\n    if (sliderDisabled.value || initData.dragging) return\n    resetSize()\n    if (props.vertical) {\n      const sliderOffsetBottom = slider.value.getBoundingClientRect().bottom\n      setPosition(\n        ((sliderOffsetBottom - event.clientY) / initData.sliderSize) * 100\n      )\n    } else {\n      const sliderOffsetLeft = slider.value.getBoundingClientRect().left\n      setPosition(\n        ((event.clientX - sliderOffsetLeft) / initData.sliderSize) * 100\n      )\n    }\n    emitChange()\n  }\n\n  return {\n    elFormItem,\n    slider,\n    firstButton,\n    secondButton,\n    sliderDisabled,\n    minValue,\n    maxValue,\n    runwayStyle,\n    barStyle,\n    resetSize,\n    setPosition,\n    emitChange,\n    onSliderClick,\n    setFirstValue,\n    setSecondValue,\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}