{"ast":null,"code":"import { withDirectives, openBlock, createElementBlock, normalizeClass, withModifiers, renderSlot, createElementVNode, toDisplayString, vShow } from 'vue';\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return withDirectives((openBlock(), createElementBlock(\"li\", {\n    class: normalizeClass([\"el-select-dropdown__item\", {\n      selected: _ctx.itemSelected,\n      \"is-disabled\": _ctx.isDisabled,\n      hover: _ctx.hover\n    }]),\n    onMouseenter: _cache[0] || (_cache[0] = (...args) => _ctx.hoverItem && _ctx.hoverItem(...args)),\n    onClick: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.selectOptionClick && _ctx.selectOptionClick(...args), [\"stop\"]))\n  }, [renderSlot(_ctx.$slots, \"default\", {}, () => [createElementVNode(\"span\", null, toDisplayString(_ctx.currentLabel), 1)])], 34)), [[vShow, _ctx.visible]]);\n}\nexport { render };","map":{"version":3,"names":["createElementBlock","class","normalizeClass","onMouseenter","_cache","args","_ctx","hoverItem","onClick","withModifiers","selectOptionClick","renderSlot","$slots","createElementVNode","toDisplayString","currentLabel","visible"],"sources":["../../../../../../packages/components/select/src/option.vue?vue&type=template&id=2feb8304&lang.js"],"sourcesContent":["<template>\n  <li\n    v-show=\"visible\"\n    class=\"el-select-dropdown__item\"\n    :class=\"{\n      selected: itemSelected,\n      'is-disabled': isDisabled,\n      hover: hover,\n    }\"\n    @mouseenter=\"hoverItem\"\n    @click.stop=\"selectOptionClick\"\n  >\n    <slot>\n      <span>{{ currentLabel }}</span>\n    </slot>\n  </li>\n</template>\n\n<script lang=\"ts\">\nimport {\n  toRefs,\n  defineComponent,\n  getCurrentInstance,\n  onBeforeUnmount,\n  reactive,\n} from 'vue'\nimport { useOption } from './useOption'\nimport type { SelectOptionProxy } from './token'\n\nexport default defineComponent({\n  name: 'ElOption',\n  componentName: 'ElOption',\n\n  props: {\n    value: {\n      required: true,\n      type: [String, Number, Boolean, Object],\n    },\n    label: [String, Number],\n    created: Boolean,\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  setup(props) {\n    const states = reactive({\n      index: -1,\n      groupDisabled: false,\n      visible: true,\n      hitState: false,\n      hover: false,\n    })\n\n    const { currentLabel, itemSelected, isDisabled, select, hoverItem } =\n      useOption(props, states)\n\n    const { visible, hover } = toRefs(states)\n\n    const vm = getCurrentInstance().proxy\n    const key = (vm as unknown as SelectOptionProxy).value\n    select.onOptionCreate(vm as unknown as SelectOptionProxy)\n\n    onBeforeUnmount(() => {\n      const { selected } = select\n      const selectedOptions = select.props.multiple ? selected : [selected]\n      const doesExist = select.cachedOptions.has(key)\n      const doesSelected = selectedOptions.some((item) => {\n        return item.value === (vm as unknown as SelectOptionProxy).value\n      })\n      // if option is not selected, remove it from cache\n      if (doesExist && !doesSelected) {\n        select.cachedOptions.delete(key)\n      }\n      select.onOptionDestroy(key)\n    })\n\n    function selectOptionClick() {\n      if (props.disabled !== true && states.groupDisabled !== true) {\n        select.handleOptionSelect(vm, true)\n      }\n    }\n\n    return {\n      currentLabel,\n      itemSelected,\n      isDisabled,\n      select,\n      hoverItem,\n      visible,\n      hover,\n      selectOptionClick,\n      states,\n    }\n  },\n})\n</script>\n"],"mappings":";;sCACEA,kBAAA;IAEEC,KAAA,EAAAC,cAAA,EAAM;;;;;IAMLC,YAAA,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAYC,IAAA,CAAAC,SAAA,IAAAD,IAAA,CAAAC,SAAA,IAAAF,IAAA;IACZG,OAAA,EAAAJ,MAAA,QAAAA,MAAA,MAAAK,aAAA,KAAAJ,IAAA,KAAYC,IAAA,CAAAI,iBAAA,IAAAJ,IAAA,CAAAI,iBAAA,IAAAL,IAAA;MAEbM,UAAA,CAAAL,IAAA,CAAAM,MAAA,wBACEC,kBAAA,eAAAC,eAAA,CAASR,IAAA,CAAAS,YAAA,M,mBAXHT,IAAA,CAAAU,OAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}