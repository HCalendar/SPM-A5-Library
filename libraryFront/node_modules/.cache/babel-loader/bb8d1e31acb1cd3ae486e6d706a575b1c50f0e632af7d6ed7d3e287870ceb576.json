{"ast":null,"code":"import { watch } from 'vue';\nimport { useEventListener } from '@vueuse/core';\nconst usePreventGlobal = (indicator, evt, cb) => {\n  const prevent = e => {\n    if (cb(e)) e.stopImmediatePropagation();\n  };\n  let stop = void 0;\n  watch(() => indicator.value, val => {\n    if (val) {\n      stop = useEventListener(document, evt, prevent, true);\n    } else {\n      stop == null ? void 0 : stop();\n    }\n  }, {\n    immediate: true\n  });\n};\nexport { usePreventGlobal };","map":{"version":3,"names":["usePreventGlobal","indicator","evt","cb","prevent","e","stopImmediatePropagation","stop","watch","value","val","useEventListener","document","immediate"],"sources":["../../../../../packages/hooks/use-prevent-global/index.ts"],"sourcesContent":["import { watch } from 'vue'\nimport { useEventListener } from '@vueuse/core'\nimport type { Ref } from 'vue'\n\nexport const usePreventGlobal = <E extends keyof DocumentEventMap>(\n  indicator: Ref<boolean>,\n  evt: E,\n  cb: (e: DocumentEventMap[E]) => boolean\n) => {\n  const prevent = (e: DocumentEventMap[E]) => {\n    if (cb(e)) e.stopImmediatePropagation()\n  }\n  let stop: (() => void) | undefined = undefined\n  watch(\n    () => indicator.value,\n    (val) => {\n      if (val) {\n        stop = useEventListener(document, evt, prevent, true)\n      } else {\n        stop?.()\n      }\n    },\n    { immediate: true }\n  )\n}\n"],"mappings":";;MAIaA,gBAAA,GAAmBA,CAC9BC,SAAA,EACAC,GAAA,EACAC,EAAA,KACG;EACH,MAAMC,OAAA,GAAWC,CAAA,IAA2B;IAC1C,IAAIF,EAAA,CAAGE,CAAA,GAAIA,CAAA,CAAEC,wBAAA;EAAA;EAEf,IAAIC,IAAA,GAAiC;EACrCC,KAAA,CACE,MAAMP,SAAA,CAAUQ,KAAA,EACfC,GAAA,IAAQ;IACP,IAAIA,GAAA,EAAK;MACPH,IAAA,GAAOI,gBAAA,CAAiBC,QAAA,EAAUV,GAAA,EAAKE,OAAA,EAAS;IAAA,OAC3C;MACLG,IAAA,oBAAAA,IAAA;IAAA;EAAA,GAGJ;IAAEM,SAAA,EAAW;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}