{"ast":null,"code":"import { getCurrentInstance, computed, provide, unref, ref, inject } from 'vue';\nimport get from 'lodash/get';\nimport English from '../../locale/lang/en.mjs';\nimport { buildProps, definePropType } from '../../utils/props.mjs';\nconst useLocaleProps = buildProps({\n  locale: {\n    type: definePropType(Object)\n  }\n});\nconst localeContextKey = Symbol(\"localeContextKey\");\nlet cache;\nconst provideLocale = () => {\n  const vm = getCurrentInstance();\n  const props = vm.props;\n  const locale = computed(() => props.locale || English);\n  const lang = computed(() => locale.value.name);\n  const t = buildTranslator(locale);\n  const provides = {\n    locale,\n    lang,\n    t\n  };\n  cache = provides;\n  provide(localeContextKey, provides);\n};\nconst buildTranslator = locale => (path, option) => translate(path, option, unref(locale));\nconst translate = (path, option, locale) => get(locale, path, path).replace(/\\{(\\w+)\\}/g, (_, key) => {\n  var _a;\n  return `${(_a = option == null ? void 0 : option[key]) != null ? _a : `{${key}}`}`;\n});\nconst localeProviderMaker = (locale = English) => {\n  const lang = ref(locale.name);\n  const localeRef = ref(locale);\n  return {\n    lang,\n    locale: localeRef,\n    t: buildTranslator(localeRef)\n  };\n};\nconst useLocale = () => {\n  return inject(localeContextKey, cache || localeProviderMaker(English));\n};\nexport { buildTranslator, localeContextKey, localeProviderMaker, provideLocale, translate, useLocale, useLocaleProps };","map":{"version":3,"names":["useLocaleProps","buildProps","locale","type","definePropType","Object","localeContextKey","Symbol","cache","provideLocale","vm","getCurrentInstance","props","computed","English","lang","value","name","t","buildTranslator","provides","provide","path","option","translate","unref","get","replace","_","key","_a","localeProviderMaker","ref","localeRef","useLocale","inject"],"sources":["../../../../../packages/hooks/use-locale/index.ts"],"sourcesContent":["import { computed, getCurrentInstance, inject, provide, ref, unref } from 'vue'\nimport get from 'lodash/get'\nimport English from '@element-plus/locale/lang/en'\nimport { buildProps, definePropType } from '@element-plus/utils/props'\nimport type { MaybeRef } from '@vueuse/core'\nimport type { InjectionKey, Ref } from 'vue'\nimport type { Language } from '@element-plus/locale'\n\nexport type TranslatorOption = Record<string, string | number>\nexport type Translator = (path: string, option?: TranslatorOption) => string\nexport type LocaleContext = {\n  locale: Ref<Language>\n  lang: Ref<string>\n  t: Translator\n}\n\nexport const useLocaleProps = buildProps({\n  locale: {\n    type: definePropType<Language>(Object),\n  },\n})\n\nexport const localeContextKey: InjectionKey<LocaleContext> =\n  Symbol('localeContextKey')\n\n// this is meant to fix global methods like `ElMessage(opts)`, this way we can inject current locale\n// into the component as default injection value.\n// refer to: https://github.com/element-plus/element-plus/issues/2610#issuecomment-887965266\nlet cache: LocaleContext\n\nexport const provideLocale = () => {\n  const vm = getCurrentInstance()!\n  const props = vm.props as {\n    locale: Language\n  }\n  const locale = computed(() => props.locale || English)\n  const lang = computed(() => locale.value.name)\n\n  const t = buildTranslator(locale)\n  const provides: LocaleContext = {\n    locale,\n    lang,\n    t,\n  }\n\n  // this could be broken if someone tries to do following:\n\n  /**\n   * <config-provider :locale=\"lang1\">\n   *   <config-provider :locale=\"lang2\">\n   *     Something calls modal component.\n   *   </config-provider>\n   * </config-provider>\n   */\n  cache = provides\n  provide(localeContextKey, provides)\n}\n\nexport const buildTranslator =\n  (locale: MaybeRef<Language>): Translator =>\n  (path, option) =>\n    translate(path, option, unref(locale))\n\nexport const translate = (\n  path: string,\n  option: undefined | TranslatorOption,\n  locale: Language\n): string =>\n  (get(locale, path, path) as string).replace(\n    /\\{(\\w+)\\}/g,\n    (_, key) => `${option?.[key] ?? `{${key}}`}`\n  )\n\nexport const localeProviderMaker = (locale = English) => {\n  const lang = ref(locale.name)\n  const localeRef = ref(locale)\n  return {\n    lang,\n    locale: localeRef,\n    t: buildTranslator(localeRef),\n  }\n}\n\nexport const useLocale = () => {\n  return inject(localeContextKey, cache || localeProviderMaker(English))\n}\n"],"mappings":";;;;MAgBaA,cAAA,GAAiBC,UAAA,CAAW;EACvCC,MAAA,EAAQ;IACNC,IAAA,EAAMC,cAAA,CAAyBC,MAAA;EAAA;AAAA;MAItBC,gBAAA,GACXC,MAAA,CAAO;AAKT,IAAIC,KAAA;MAESC,aAAA,GAAgBA,CAAA,KAAM;EACjC,MAAMC,EAAA,GAAKC,kBAAA;EACX,MAAMC,KAAA,GAAQF,EAAA,CAAGE,KAAA;EAGjB,MAAMV,MAAA,GAASW,QAAA,CAAS,MAAMD,KAAA,CAAMV,MAAA,IAAUY,OAAA;EAC9C,MAAMC,IAAA,GAAOF,QAAA,CAAS,MAAMX,MAAA,CAAOc,KAAA,CAAMC,IAAA;EAEzC,MAAMC,CAAA,GAAIC,eAAA,CAAgBjB,MAAA;EAC1B,MAAMkB,QAAA,GAA0B;IAC9BlB,MAAA;IACAa,IAAA;IACAG;EAAA;EAYFV,KAAA,GAAQY,QAAA;EACRC,OAAA,CAAQf,gBAAA,EAAkBc,QAAA;AAAA;MAGfD,eAAA,GACVjB,MAAA,IACD,CAACoB,IAAA,EAAMC,MAAA,KACLC,SAAA,CAAUF,IAAA,EAAMC,MAAA,EAAQE,KAAA,CAAMvB,MAAA;MAErBsB,SAAA,GAAYA,CACvBF,IAAA,EACAC,MAAA,EACArB,MAAA,KAECwB,GAAA,CAAIxB,MAAA,EAAQoB,IAAA,EAAMA,IAAA,EAAiBK,OAAA,CAClC,cACA,CAACC,CAAA,EAAGC,GAAA,KAAK;EAtEb,IAAAC,EAAA;EAsEgB,UAAG,CAAAA,EAAA,GAAAP,MAAA,oBAAAA,MAAA,CAASM,GAAA,MAAT,OAAAC,EAAA,GAAiB,IAAID,GAAA;AAAA;MAG3BE,mBAAA,GAAsBA,CAAC7B,MAAA,GAASY,OAAA,KAAY;EACvD,MAAMC,IAAA,GAAOiB,GAAA,CAAI9B,MAAA,CAAOe,IAAA;EACxB,MAAMgB,SAAA,GAAYD,GAAA,CAAI9B,MAAA;EACtB,OAAO;IACLa,IAAA;IACAb,MAAA,EAAQ+B,SAAA;IACRf,CAAA,EAAGC,eAAA,CAAgBc,SAAA;EAAA;AAAA;MAIVC,SAAA,GAAYA,CAAA,KAAM;EAC7B,OAAOC,MAAA,CAAO7B,gBAAA,EAAkBE,KAAA,IAASuB,mBAAA,CAAoBjB,OAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}