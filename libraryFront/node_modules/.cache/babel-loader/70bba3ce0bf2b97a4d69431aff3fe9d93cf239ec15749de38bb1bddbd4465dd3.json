{"ast":null,"code":"import { defineComponent, ref } from 'vue';\nimport { NOOP, hasOwn } from '@vue/shared';\nimport upload from './ajax.mjs';\nimport './upload-dragger.mjs';\nimport script$1 from './upload-dragger.vue_vue_type_script_lang.mjs';\nvar script = defineComponent({\n  components: {\n    UploadDragger: script$1\n  },\n  props: {\n    type: {\n      type: String,\n      default: \"\"\n    },\n    action: {\n      type: String,\n      required: true\n    },\n    name: {\n      type: String,\n      default: \"file\"\n    },\n    data: {\n      type: Object,\n      default: () => null\n    },\n    headers: {\n      type: Object,\n      default: () => null\n    },\n    method: {\n      type: String,\n      default: \"post\"\n    },\n    withCredentials: {\n      type: Boolean,\n      default: false\n    },\n    multiple: {\n      type: Boolean,\n      default: null\n    },\n    accept: {\n      type: String,\n      default: \"\"\n    },\n    onStart: {\n      type: Function,\n      default: NOOP\n    },\n    onProgress: {\n      type: Function,\n      default: NOOP\n    },\n    onSuccess: {\n      type: Function,\n      default: NOOP\n    },\n    onError: {\n      type: Function,\n      default: NOOP\n    },\n    beforeUpload: {\n      type: Function,\n      default: NOOP\n    },\n    drag: {\n      type: Boolean,\n      default: false\n    },\n    onPreview: {\n      type: Function,\n      default: NOOP\n    },\n    onRemove: {\n      type: Function,\n      default: NOOP\n    },\n    fileList: {\n      type: Array,\n      default: () => []\n    },\n    autoUpload: {\n      type: Boolean,\n      default: true\n    },\n    listType: {\n      type: String,\n      default: \"text\"\n    },\n    httpRequest: {\n      type: Function,\n      default: () => upload\n    },\n    disabled: Boolean,\n    limit: {\n      type: Number,\n      default: null\n    },\n    onExceed: {\n      type: Function,\n      default: NOOP\n    }\n  },\n  setup(props) {\n    const reqs = ref({});\n    const mouseover = ref(false);\n    const inputRef = ref(null);\n    function uploadFiles(files) {\n      if (props.limit && props.fileList.length + files.length > props.limit) {\n        props.onExceed(files, props.fileList);\n        return;\n      }\n      let postFiles = Array.from(files);\n      if (!props.multiple) {\n        postFiles = postFiles.slice(0, 1);\n      }\n      if (postFiles.length === 0) {\n        return;\n      }\n      postFiles.forEach(rawFile => {\n        props.onStart(rawFile);\n        if (props.autoUpload) upload(rawFile);\n      });\n    }\n    function upload(rawFile) {\n      inputRef.value.value = null;\n      if (!props.beforeUpload) {\n        return post(rawFile);\n      }\n      const before = props.beforeUpload(rawFile);\n      if (before instanceof Promise) {\n        before.then(processedFile => {\n          const fileType = Object.prototype.toString.call(processedFile);\n          if (fileType === \"[object File]\" || fileType === \"[object Blob]\") {\n            if (fileType === \"[object Blob]\") {\n              processedFile = new File([processedFile], rawFile.name, {\n                type: rawFile.type\n              });\n            }\n            for (const p in rawFile) {\n              if (hasOwn(rawFile, p)) {\n                processedFile[p] = rawFile[p];\n              }\n            }\n            post(processedFile);\n          } else {\n            post(rawFile);\n          }\n        }).catch(() => {\n          props.onRemove(null, rawFile);\n        });\n      } else if (before !== false) {\n        post(rawFile);\n      } else {\n        props.onRemove(null, rawFile);\n      }\n    }\n    function abort(file) {\n      const _reqs = reqs.value;\n      if (file) {\n        let uid = file;\n        if (file.uid) uid = file.uid;\n        if (_reqs[uid]) {\n          ;\n          _reqs[uid].abort();\n        }\n      } else {\n        Object.keys(_reqs).forEach(uid => {\n          if (_reqs[uid]) _reqs[uid].abort();\n          delete _reqs[uid];\n        });\n      }\n    }\n    function post(rawFile) {\n      const {\n        uid\n      } = rawFile;\n      const options = {\n        headers: props.headers,\n        withCredentials: props.withCredentials,\n        file: rawFile,\n        data: props.data,\n        method: props.method,\n        filename: props.name,\n        action: props.action,\n        onProgress: e => {\n          props.onProgress(e, rawFile);\n        },\n        onSuccess: res => {\n          props.onSuccess(res, rawFile);\n          delete reqs.value[uid];\n        },\n        onError: err => {\n          props.onError(err, rawFile);\n          delete reqs.value[uid];\n        }\n      };\n      const req = props.httpRequest(options);\n      reqs.value[uid] = req;\n      if (req instanceof Promise) {\n        req.then(options.onSuccess, options.onError);\n      }\n    }\n    function handleChange(e) {\n      const files = e.target.files;\n      if (!files) return;\n      uploadFiles(files);\n    }\n    function handleClick() {\n      if (!props.disabled) {\n        inputRef.value.value = null;\n        inputRef.value.click();\n      }\n    }\n    function handleKeydown() {\n      handleClick();\n    }\n    return {\n      reqs,\n      mouseover,\n      inputRef,\n      abort,\n      post,\n      handleChange,\n      handleClick,\n      handleKeydown,\n      upload,\n      uploadFiles\n    };\n  }\n});\nexport { script as default };","map":{"version":3,"names":["script","defineComponent","components","UploadDragger","script$1","props","type","String","default","action","required","name","data","Object","headers","method","withCredentials","Boolean","multiple","accept","onStart","Function","NOOP","onProgress","onSuccess","onError","beforeUpload","drag","onPreview","onRemove","fileList","Array","autoUpload","listType","httpRequest","upload","disabled","limit","Number","onExceed","setup","reqs","ref","mouseover","inputRef","uploadFiles","files","length","postFiles","from","slice","forEach","rawFile","value","post","before","Promise","then","processedFile","fileType","prototype","toString","call","File","p","hasOwn","catch","abort","file","_reqs","uid","keys","options","filename","e","res","err","req","handleChange","target","handleClick","click","handleKeydown"],"sources":["../../../../../../packages/components/upload/src/upload.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"['el-upload', `el-upload--${listType}`]\"\n    tabindex=\"0\"\n    @click=\"handleClick\"\n    @keydown.self.enter.space=\"handleKeydown\"\n  >\n    <template v-if=\"drag\">\n      <upload-dragger :disabled=\"disabled\" @file=\"uploadFiles\">\n        <slot></slot>\n      </upload-dragger>\n    </template>\n    <template v-else>\n      <slot></slot>\n    </template>\n    <input\n      ref=\"inputRef\"\n      class=\"el-upload__input\"\n      type=\"file\"\n      :name=\"name\"\n      :multiple=\"multiple\"\n      :accept=\"accept\"\n      @change=\"handleChange\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, ref } from 'vue'\nimport { NOOP, hasOwn } from '@vue/shared'\n\nimport ajax from './ajax'\nimport UploadDragger from './upload-dragger.vue'\n\nimport type { PropType } from 'vue'\nimport type { Indexable, Nullable } from '@element-plus/utils/types'\nimport type { ListType, UploadFile, ElFile } from './upload.type'\n\ntype IFileHanlder = (\n  file: Nullable<ElFile[]>,\n  fileList?: UploadFile[]\n) => unknown\n\ntype AjaxEventListener = (e: ProgressEvent, file: ElFile) => unknown\n\nexport default defineComponent({\n  components: {\n    UploadDragger,\n  },\n  props: {\n    type: {\n      type: String,\n      default: '',\n    },\n    action: {\n      type: String,\n      required: true,\n    },\n    name: {\n      type: String,\n      default: 'file',\n    },\n    data: {\n      type: Object as PropType<Record<string, any>>,\n      default: () => null,\n    },\n    headers: {\n      type: Object as PropType<Nullable<Partial<Headers>>>,\n      default: () => null,\n    },\n    method: {\n      type: String,\n      default: 'post',\n    },\n    withCredentials: {\n      type: Boolean,\n      default: false,\n    },\n    multiple: {\n      type: Boolean as PropType<Nullable<boolean>>,\n      default: null,\n    },\n    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#Unique_file_type_specifiers\n    accept: {\n      type: String,\n      default: '',\n    },\n    onStart: {\n      type: Function as PropType<(file: File) => void>,\n      default: NOOP as (file: File) => void,\n    },\n    onProgress: {\n      type: Function as PropType<AjaxEventListener>,\n      default: NOOP as AjaxEventListener,\n    },\n    onSuccess: {\n      type: Function as PropType<AjaxEventListener>,\n      default: NOOP as AjaxEventListener,\n    },\n    onError: {\n      type: Function as PropType<AjaxEventListener>,\n      default: NOOP as AjaxEventListener,\n    },\n    beforeUpload: {\n      type: Function as PropType<\n        (file: File) => Promise<File | Blob> | boolean | unknown\n      >,\n      default: NOOP as (file: File) => void,\n    },\n    drag: {\n      type: Boolean,\n      default: false,\n    },\n    onPreview: {\n      type: Function as PropType<IFileHanlder>,\n      default: NOOP as IFileHanlder,\n    },\n    onRemove: {\n      type: Function as PropType<\n        (file: Nullable<FileList>, rawFile: ElFile) => void\n      >,\n      default: NOOP as (file: Nullable<FileList>, rawFile: ElFile) => void,\n    },\n    fileList: {\n      type: Array as PropType<UploadFile[]>,\n      default: () => [] as UploadFile[],\n    },\n    autoUpload: {\n      type: Boolean,\n      default: true,\n    },\n    listType: {\n      type: String as PropType<ListType>,\n      default: 'text',\n    },\n    httpRequest: {\n      type: Function as\n        | PropType<typeof ajax>\n        | PropType<(...args: unknown[]) => Promise<unknown>>,\n      default: () => ajax,\n    },\n    disabled: Boolean,\n    limit: {\n      type: Number as PropType<Nullable<number>>,\n      default: null,\n    },\n    onExceed: {\n      type: Function as PropType<\n        (files: FileList, fileList: UploadFile[]) => void\n      >,\n      default: NOOP,\n    },\n  },\n  setup(props) {\n    const reqs = ref({} as Indexable<XMLHttpRequest | Promise<any>>)\n    const mouseover = ref(false)\n    const inputRef = ref(null as Nullable<HTMLInputElement>)\n\n    function uploadFiles(files: FileList) {\n      if (props.limit && props.fileList.length + files.length > props.limit) {\n        props.onExceed(files, props.fileList)\n        return\n      }\n      let postFiles = Array.from(files)\n      if (!props.multiple) {\n        postFiles = postFiles.slice(0, 1)\n      }\n      if (postFiles.length === 0) {\n        return\n      }\n      postFiles.forEach((rawFile) => {\n        props.onStart(rawFile)\n        if (props.autoUpload) upload(rawFile as ElFile)\n      })\n    }\n\n    function upload(rawFile: ElFile) {\n      inputRef.value.value = null\n      if (!props.beforeUpload) {\n        return post(rawFile)\n      }\n      const before = props.beforeUpload(rawFile)\n      if (before instanceof Promise) {\n        before\n          .then((processedFile) => {\n            const fileType = Object.prototype.toString.call(processedFile)\n            if (fileType === '[object File]' || fileType === '[object Blob]') {\n              if (fileType === '[object Blob]') {\n                processedFile = new File([processedFile], rawFile.name, {\n                  type: rawFile.type,\n                })\n              }\n              for (const p in rawFile) {\n                if (hasOwn(rawFile, p)) {\n                  processedFile[p] = rawFile[p]\n                }\n              }\n              post(processedFile)\n            } else {\n              post(rawFile)\n            }\n          })\n          .catch(() => {\n            props.onRemove(null, rawFile)\n          })\n      } else if (before !== false) {\n        post(rawFile)\n      } else {\n        props.onRemove(null, rawFile)\n      }\n    }\n    function abort(file) {\n      const _reqs = reqs.value\n      if (file) {\n        let uid = file\n        if (file.uid) uid = file.uid\n        if (_reqs[uid]) {\n          ;(_reqs[uid] as XMLHttpRequest).abort()\n        }\n      } else {\n        Object.keys(_reqs).forEach((uid) => {\n          if (_reqs[uid]) (_reqs[uid] as XMLHttpRequest).abort()\n          delete _reqs[uid]\n        })\n      }\n    }\n\n    function post(rawFile: ElFile) {\n      const { uid } = rawFile\n      const options = {\n        headers: props.headers,\n        withCredentials: props.withCredentials,\n        file: rawFile,\n        data: props.data,\n        method: props.method,\n        filename: props.name,\n        action: props.action,\n        onProgress: (e) => {\n          props.onProgress(e, rawFile)\n        },\n        onSuccess: (res) => {\n          props.onSuccess(res, rawFile)\n          delete reqs.value[uid]\n        },\n        onError: (err) => {\n          props.onError(err, rawFile)\n          delete reqs.value[uid]\n        },\n      }\n      const req = props.httpRequest(options)\n      reqs.value[uid] = req\n      if (req instanceof Promise) {\n        req.then(options.onSuccess, options.onError)\n      }\n    }\n\n    function handleChange(e: DragEvent) {\n      const files = (e.target as HTMLInputElement).files\n      if (!files) return\n      uploadFiles(files)\n    }\n\n    function handleClick() {\n      if (!props.disabled) {\n        inputRef.value.value = null\n        inputRef.value.click()\n      }\n    }\n\n    function handleKeydown() {\n      handleClick()\n    }\n\n    return {\n      reqs,\n      mouseover,\n      inputRef,\n      abort,\n      post,\n      handleChange,\n      handleClick,\n      handleKeydown,\n      upload,\n      uploadFiles,\n    }\n  },\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}