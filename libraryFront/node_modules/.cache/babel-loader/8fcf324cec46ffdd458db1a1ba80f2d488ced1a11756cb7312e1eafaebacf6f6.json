{"ast":null,"code":"import { getCurrentInstance, ref, watchEffect, computed, h } from 'vue';\nimport { debugWarn } from '../../../../utils/error.mjs';\nimport { cellForced, defaultRenderCell, treeCellPrefix } from '../config.mjs';\nimport { parseWidth, parseMinWidth } from '../util.mjs';\nfunction useRender(props, slots, owner) {\n  const instance = getCurrentInstance();\n  const columnId = ref(\"\");\n  const isSubColumn = ref(false);\n  const realAlign = ref();\n  const realHeaderAlign = ref();\n  watchEffect(() => {\n    realAlign.value = props.align ? `is-${props.align}` : null;\n    realAlign.value;\n  });\n  watchEffect(() => {\n    realHeaderAlign.value = props.headerAlign ? `is-${props.headerAlign}` : realAlign.value;\n    realHeaderAlign.value;\n  });\n  const columnOrTableParent = computed(() => {\n    let parent = instance.vnode.vParent || instance.parent;\n    while (parent && !parent.tableId && !parent.columnId) {\n      parent = parent.vnode.vParent || parent.parent;\n    }\n    return parent;\n  });\n  const realWidth = ref(parseWidth(props.width));\n  const realMinWidth = ref(parseMinWidth(props.minWidth));\n  const setColumnWidth = column => {\n    if (realWidth.value) column.width = realWidth.value;\n    if (realMinWidth.value) {\n      column.minWidth = realMinWidth.value;\n    }\n    if (!column.minWidth) {\n      column.minWidth = 80;\n    }\n    column.realWidth = Number(column.width === void 0 ? column.minWidth : column.width);\n    return column;\n  };\n  const setColumnForcedProps = column => {\n    const type = column.type;\n    const source = cellForced[type] || {};\n    Object.keys(source).forEach(prop => {\n      const value = source[prop];\n      if (value !== void 0) {\n        column[prop] = prop === \"className\" ? `${column[prop]} ${value}` : value;\n      }\n    });\n    return column;\n  };\n  const checkSubColumn = children => {\n    if (children instanceof Array) {\n      children.forEach(child => check(child));\n    } else {\n      check(children);\n    }\n    function check(item) {\n      var _a;\n      if (((_a = item == null ? void 0 : item.type) == null ? void 0 : _a.name) === \"ElTableColumn\") {\n        item.vParent = instance;\n      }\n    }\n  };\n  const setColumnRenders = column => {\n    if (props.renderHeader) {\n      debugWarn(\"TableColumn\", \"Comparing to render-header, scoped-slot header is easier to use. We recommend users to use scoped-slot header.\");\n    } else if (column.type !== \"selection\") {\n      column.renderHeader = scope => {\n        instance.columnConfig.value[\"label\"];\n        const renderHeader = slots.header;\n        return renderHeader ? renderHeader(scope) : column.label;\n      };\n    }\n    let originRenderCell = column.renderCell;\n    if (column.type === \"expand\") {\n      column.renderCell = data => h(\"div\", {\n        class: \"cell\"\n      }, [originRenderCell(data)]);\n      owner.value.renderExpanded = data => {\n        return slots.default ? slots.default(data) : slots.default;\n      };\n    } else {\n      originRenderCell = originRenderCell || defaultRenderCell;\n      column.renderCell = data => {\n        let children = null;\n        if (slots.default) {\n          children = slots.default(data);\n        } else {\n          children = originRenderCell(data);\n        }\n        const prefix = treeCellPrefix(data);\n        const props2 = {\n          class: \"cell\",\n          style: {}\n        };\n        if (column.showOverflowTooltip) {\n          props2.class += \" el-tooltip\";\n          props2.style = {\n            width: `${(data.column.realWidth || Number(data.column.width)) - 1}px`\n          };\n        }\n        checkSubColumn(children);\n        return h(\"div\", props2, [prefix, children]);\n      };\n    }\n    return column;\n  };\n  const getPropsData = (...propsKey) => {\n    return propsKey.reduce((prev, cur) => {\n      if (Array.isArray(cur)) {\n        cur.forEach(key => {\n          prev[key] = props[key];\n        });\n      }\n      return prev;\n    }, {});\n  };\n  const getColumnElIndex = (children, child) => {\n    return [].indexOf.call(children, child);\n  };\n  return {\n    columnId,\n    realAlign,\n    isSubColumn,\n    realHeaderAlign,\n    columnOrTableParent,\n    setColumnWidth,\n    setColumnForcedProps,\n    setColumnRenders,\n    getPropsData,\n    getColumnElIndex\n  };\n}\nexport { useRender as default };","map":{"version":3,"names":["useRender","props","slots","owner","instance","getCurrentInstance","columnId","ref","isSubColumn","realAlign","realHeaderAlign","watchEffect","value","align","headerAlign","columnOrTableParent","computed","parent","vnode","vParent","tableId","realWidth","parseWidth","width","realMinWidth","parseMinWidth","minWidth","setColumnWidth","column","Number","setColumnForcedProps","type","source","cellForced","Object","keys","forEach","prop","checkSubColumn","children","Array","child","check","item","_a","name","setColumnRenders","renderHeader","debugWarn","scope","columnConfig","header","label","originRenderCell","renderCell","data","h","class","renderExpanded","default","defaultRenderCell","prefix","treeCellPrefix","props2","style","showOverflowTooltip","getPropsData","propsKey","reduce","prev","cur","isArray","key","getColumnElIndex","indexOf","call"],"sources":["../../../../../../../packages/components/table/src/table-column/render-helper.ts"],"sourcesContent":["import { getCurrentInstance, h, ref, computed, watchEffect } from 'vue'\nimport { debugWarn } from '@element-plus/utils/error'\nimport { cellForced, defaultRenderCell, treeCellPrefix } from '../config'\nimport { parseWidth, parseMinWidth } from '../util'\n\nimport type { ComputedRef } from 'vue'\nimport type { TableColumnCtx, TableColumn } from './defaults'\n\nfunction useRender<T>(\n  props: TableColumnCtx<T>,\n  slots,\n  owner: ComputedRef<any>\n) {\n  const instance = getCurrentInstance() as TableColumn<T>\n  const columnId = ref('')\n  const isSubColumn = ref(false)\n  const realAlign = ref<string>()\n  const realHeaderAlign = ref<string>()\n  watchEffect(() => {\n    realAlign.value = props.align ? `is-${props.align}` : null\n    // nextline help render\n    realAlign.value\n  })\n  watchEffect(() => {\n    realHeaderAlign.value = props.headerAlign\n      ? `is-${props.headerAlign}`\n      : realAlign.value\n    // nextline help render\n    realHeaderAlign.value\n  })\n  const columnOrTableParent = computed(() => {\n    let parent: any = instance.vnode.vParent || instance.parent\n    while (parent && !parent.tableId && !parent.columnId) {\n      parent = parent.vnode.vParent || parent.parent\n    }\n    return parent\n  })\n\n  const realWidth = ref(parseWidth(props.width))\n  const realMinWidth = ref(parseMinWidth(props.minWidth))\n  const setColumnWidth = (column: TableColumnCtx<T>) => {\n    if (realWidth.value) column.width = realWidth.value\n    if (realMinWidth.value) {\n      column.minWidth = realMinWidth.value\n    }\n    if (!column.minWidth) {\n      column.minWidth = 80\n    }\n    column.realWidth = Number(\n      column.width === undefined ? column.minWidth : column.width\n    )\n    return column\n  }\n  const setColumnForcedProps = (column: TableColumnCtx<T>) => {\n    // 对于特定类型的 column，某些属性不允许设置\n    const type = column.type\n    const source = cellForced[type] || {}\n    Object.keys(source).forEach((prop) => {\n      const value = source[prop]\n      if (value !== undefined) {\n        column[prop] = prop === 'className' ? `${column[prop]} ${value}` : value\n      }\n    })\n    return column\n  }\n\n  const checkSubColumn = (children: TableColumn<T> | TableColumn<T>[]) => {\n    if (children instanceof Array) {\n      children.forEach((child) => check(child))\n    } else {\n      check(children)\n    }\n    function check(item: TableColumn<T>) {\n      if (item?.type?.name === 'ElTableColumn') {\n        item.vParent = instance\n      }\n    }\n  }\n  const setColumnRenders = (column: TableColumnCtx<T>) => {\n    // renderHeader 属性不推荐使用。\n    if (props.renderHeader) {\n      debugWarn(\n        'TableColumn',\n        'Comparing to render-header, scoped-slot header is easier to use. We recommend users to use scoped-slot header.'\n      )\n    } else if (column.type !== 'selection') {\n      column.renderHeader = (scope) => {\n        // help render\n        instance.columnConfig.value['label']\n        const renderHeader = slots.header\n        return renderHeader ? renderHeader(scope) : column.label\n      }\n    }\n\n    let originRenderCell = column.renderCell\n    // TODO: 这里的实现调整\n    if (column.type === 'expand') {\n      // 对于展开行，renderCell 不允许配置的。在上一步中已经设置过，这里需要简单封装一下。\n      column.renderCell = (data) =>\n        h(\n          'div',\n          {\n            class: 'cell',\n          },\n          [originRenderCell(data)]\n        )\n      owner.value.renderExpanded = (data) => {\n        return slots.default ? slots.default(data) : slots.default\n      }\n    } else {\n      originRenderCell = originRenderCell || defaultRenderCell\n      // 对 renderCell 进行包装\n      column.renderCell = (data) => {\n        let children = null\n        if (slots.default) {\n          children = slots.default(data)\n        } else {\n          children = originRenderCell(data)\n        }\n        const prefix = treeCellPrefix(data)\n        const props = {\n          class: 'cell',\n          style: {},\n        }\n        if (column.showOverflowTooltip) {\n          props.class += ' el-tooltip'\n          props.style = {\n            width: `${\n              (data.column.realWidth || Number(data.column.width)) - 1\n            }px`,\n          }\n        }\n        checkSubColumn(children)\n        return h('div', props, [prefix, children])\n      }\n    }\n    return column\n  }\n  const getPropsData = (...propsKey: unknown[]) => {\n    return propsKey.reduce((prev, cur) => {\n      if (Array.isArray(cur)) {\n        cur.forEach((key) => {\n          prev[key] = props[key]\n        })\n      }\n      return prev\n    }, {})\n  }\n  const getColumnElIndex = (children, child) => {\n    return [].indexOf.call(children, child)\n  }\n\n  return {\n    columnId,\n    realAlign,\n    isSubColumn,\n    realHeaderAlign,\n    columnOrTableParent,\n    setColumnWidth,\n    setColumnForcedProps,\n    setColumnRenders,\n    getPropsData,\n    getColumnElIndex,\n  }\n}\n\nexport default useRender\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}