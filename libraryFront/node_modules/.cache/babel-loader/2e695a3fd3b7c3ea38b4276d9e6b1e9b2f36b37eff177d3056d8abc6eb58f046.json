{"ast":null,"code":"import { resolveComponent, resolveDirective, openBlock, createBlock, withCtx, withDirectives, createElementVNode, normalizeClass, normalizeStyle, createVNode, mergeProps, withKeys, withModifiers, createSlots, renderSlot, createElementBlock, Fragment, renderList, createTextVNode, toDisplayString } from 'vue';\nconst _hoisted_1 = [\"aria-expanded\", \"aria-owns\"];\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = [\"id\", \"aria-selected\", \"onClick\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_input = resolveComponent(\"el-input\");\n  const _component_loading = resolveComponent(\"loading\");\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_el_scrollbar = resolveComponent(\"el-scrollbar\");\n  const _component_el_popper = resolveComponent(\"el-popper\");\n  const _directive_clickoutside = resolveDirective(\"clickoutside\");\n  return openBlock(), createBlock(_component_el_popper, {\n    ref: \"popper\",\n    visible: _ctx.suggestionVisible,\n    \"onUpdate:visible\": _cache[2] || (_cache[2] = $event => _ctx.suggestionVisible = $event),\n    placement: _ctx.placement,\n    \"fallback-placements\": [\"bottom-start\", \"top-start\"],\n    \"popper-class\": `el-autocomplete__popper ${_ctx.popperClass}`,\n    \"append-to-body\": _ctx.popperAppendToBody,\n    pure: \"\",\n    \"manual-mode\": \"\",\n    effect: _ctx.Effect.LIGHT,\n    trigger: \"click\",\n    transition: \"el-zoom-in-top\",\n    \"gpu-acceleration\": false\n  }, {\n    trigger: withCtx(() => [withDirectives(createElementVNode(\"div\", {\n      class: normalizeClass([\"el-autocomplete\", _ctx.$attrs.class]),\n      style: normalizeStyle(_ctx.$attrs.style),\n      role: \"combobox\",\n      \"aria-haspopup\": \"listbox\",\n      \"aria-expanded\": _ctx.suggestionVisible,\n      \"aria-owns\": _ctx.id\n    }, [createVNode(_component_el_input, mergeProps({\n      ref: \"inputRef\"\n    }, _ctx.attrs, {\n      \"model-value\": _ctx.modelValue,\n      onInput: _ctx.handleInput,\n      onChange: _ctx.handleChange,\n      onFocus: _ctx.handleFocus,\n      onBlur: _ctx.handleBlur,\n      onClear: _ctx.handleClear,\n      onKeydown: [_cache[0] || (_cache[0] = withKeys(withModifiers($event => _ctx.highlight(_ctx.highlightedIndex - 1), [\"prevent\"]), [\"up\"])), _cache[1] || (_cache[1] = withKeys(withModifiers($event => _ctx.highlight(_ctx.highlightedIndex + 1), [\"prevent\"]), [\"down\"])), withKeys(_ctx.handleKeyEnter, [\"enter\"]), withKeys(_ctx.close, [\"tab\"])]\n    }), createSlots({\n      _: 2\n    }, [_ctx.$slots.prepend ? {\n      name: \"prepend\",\n      fn: withCtx(() => [renderSlot(_ctx.$slots, \"prepend\")])\n    } : void 0, _ctx.$slots.append ? {\n      name: \"append\",\n      fn: withCtx(() => [renderSlot(_ctx.$slots, \"append\")])\n    } : void 0, _ctx.$slots.prefix ? {\n      name: \"prefix\",\n      fn: withCtx(() => [renderSlot(_ctx.$slots, \"prefix\")])\n    } : void 0, _ctx.$slots.suffix ? {\n      name: \"suffix\",\n      fn: withCtx(() => [renderSlot(_ctx.$slots, \"suffix\")])\n    } : void 0]), 1040, [\"model-value\", \"onInput\", \"onChange\", \"onFocus\", \"onBlur\", \"onClear\", \"onKeydown\"])], 14, _hoisted_1), [[_directive_clickoutside, _ctx.close]])]),\n    default: withCtx(() => [createElementVNode(\"div\", {\n      ref: \"regionRef\",\n      class: normalizeClass([\"el-autocomplete-suggestion\", _ctx.suggestionLoading && \"is-loading\"]),\n      style: normalizeStyle({\n        minWidth: _ctx.dropdownWidth,\n        outline: \"none\"\n      }),\n      role: \"region\"\n    }, [createVNode(_component_el_scrollbar, {\n      tag: \"ul\",\n      \"wrap-class\": \"el-autocomplete-suggestion__wrap\",\n      \"view-class\": \"el-autocomplete-suggestion__list\"\n    }, {\n      default: withCtx(() => [_ctx.suggestionLoading ? (openBlock(), createElementBlock(\"li\", _hoisted_2, [createVNode(_component_el_icon, {\n        class: \"is-loading\"\n      }, {\n        default: withCtx(() => [createVNode(_component_loading)]),\n        _: 1\n      })])) : (openBlock(true), createElementBlock(Fragment, {\n        key: 1\n      }, renderList(_ctx.suggestions, (item, index) => {\n        return openBlock(), createElementBlock(\"li\", {\n          id: `${_ctx.id}-item-${index}`,\n          key: index,\n          class: normalizeClass({\n            highlighted: _ctx.highlightedIndex === index\n          }),\n          role: \"option\",\n          \"aria-selected\": _ctx.highlightedIndex === index,\n          onClick: $event => _ctx.select(item)\n        }, [renderSlot(_ctx.$slots, \"default\", {\n          item\n        }, () => [createTextVNode(toDisplayString(item[_ctx.valueKey]), 1)])], 10, _hoisted_3);\n      }), 128))]),\n      _: 3\n    })], 6)]),\n    _: 3\n  }, 8, [\"visible\", \"placement\", \"popper-class\", \"append-to-body\", \"effect\"]);\n}\nexport { render };","map":{"version":3,"names":["createBlock","_component_el_popper","ref","visible","_ctx","suggestionVisible","$event","placement","popperClass","popperAppendToBody","pure","effect","Effect","LIGHT","trigger","transition","withCtx","createElementVNode","class","normalizeClass","$attrs","style","normalizeStyle","role","id","createVNode","_component_el_input","mergeProps","attrs","modelValue","onInput","handleInput","onChange","handleChange","onFocus","handleFocus","onBlur","handleBlur","onClear","handleClear","onKeydown","highlight","highlightedIndex","handleKeyEnter","close","$slots","prepend","fn","renderSlot","append","prefix","suffix","default","minWidth","dropdownWidth","outline","_component_el_scrollbar","tag","suggestionLoading","openBlock","createElementBlock","_hoisted_2","_component_el_icon","_component_loading","_","Fragment","key","renderList","suggestions","item","index","highlighted","onClick","select","valueKey"],"sources":["../../../../../../packages/components/autocomplete/src/index.vue?vue&type=template&id=2f09f285&lang.js"],"sourcesContent":["<template>\n  <el-popper\n    ref=\"popper\"\n    v-model:visible=\"suggestionVisible\"\n    :placement=\"placement\"\n    :fallback-placements=\"['bottom-start', 'top-start']\"\n    :popper-class=\"`el-autocomplete__popper ${popperClass}`\"\n    :append-to-body=\"popperAppendToBody\"\n    pure\n    manual-mode\n    :effect=\"Effect.LIGHT\"\n    trigger=\"click\"\n    transition=\"el-zoom-in-top\"\n    :gpu-acceleration=\"false\"\n  >\n    <template #trigger>\n      <div\n        v-clickoutside=\"close\"\n        :class=\"['el-autocomplete', $attrs.class]\"\n        :style=\"$attrs.style\"\n        role=\"combobox\"\n        aria-haspopup=\"listbox\"\n        :aria-expanded=\"suggestionVisible\"\n        :aria-owns=\"id\"\n      >\n        <el-input\n          ref=\"inputRef\"\n          v-bind=\"attrs\"\n          :model-value=\"modelValue\"\n          @input=\"handleInput\"\n          @change=\"handleChange\"\n          @focus=\"handleFocus\"\n          @blur=\"handleBlur\"\n          @clear=\"handleClear\"\n          @keydown.up.prevent=\"highlight(highlightedIndex - 1)\"\n          @keydown.down.prevent=\"highlight(highlightedIndex + 1)\"\n          @keydown.enter=\"handleKeyEnter\"\n          @keydown.tab=\"close\"\n        >\n          <template v-if=\"$slots.prepend\" #prepend>\n            <slot name=\"prepend\"></slot>\n          </template>\n          <template v-if=\"$slots.append\" #append>\n            <slot name=\"append\"></slot>\n          </template>\n          <template v-if=\"$slots.prefix\" #prefix>\n            <slot name=\"prefix\"></slot>\n          </template>\n          <template v-if=\"$slots.suffix\" #suffix>\n            <slot name=\"suffix\"></slot>\n          </template>\n        </el-input>\n      </div>\n    </template>\n    <template #default>\n      <div\n        ref=\"regionRef\"\n        :class=\"[\n          'el-autocomplete-suggestion',\n          suggestionLoading && 'is-loading',\n        ]\"\n        :style=\"{ minWidth: dropdownWidth, outline: 'none' }\"\n        role=\"region\"\n      >\n        <el-scrollbar\n          tag=\"ul\"\n          wrap-class=\"el-autocomplete-suggestion__wrap\"\n          view-class=\"el-autocomplete-suggestion__list\"\n        >\n          <li v-if=\"suggestionLoading\">\n            <el-icon class=\"is-loading\"><loading /></el-icon>\n          </li>\n          <template v-else>\n            <li\n              v-for=\"(item, index) in suggestions\"\n              :id=\"`${id}-item-${index}`\"\n              :key=\"index\"\n              :class=\"{ highlighted: highlightedIndex === index }\"\n              role=\"option\"\n              :aria-selected=\"highlightedIndex === index\"\n              @click=\"select(item)\"\n            >\n              <slot :item=\"item\">{{ item[valueKey] }}</slot>\n            </li>\n          </template>\n        </el-scrollbar>\n      </div>\n    </template>\n  </el-popper>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  ref,\n  computed,\n  onMounted,\n  onUpdated,\n  nextTick,\n  watch,\n} from 'vue'\nimport { NOOP } from '@vue/shared'\nimport debounce from 'lodash/debounce'\nimport { useAttrs } from '@element-plus/hooks'\nimport { ClickOutside } from '@element-plus/directives'\nimport { generateId, isArray } from '@element-plus/utils/util'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/utils/constants'\nimport { throwError } from '@element-plus/utils/error'\nimport ElInput from '@element-plus/components/input'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElPopper, { Effect } from '@element-plus/components/popper'\nimport ElIcon from '@element-plus/components/icon'\nimport { Loading } from '@element-plus/icons-vue'\n\nimport type { Placement } from '@element-plus/components/popper'\nimport type { PropType } from 'vue'\n\nexport default defineComponent({\n  name: 'ElAutocomplete',\n  components: {\n    ElPopper,\n    ElInput,\n    ElScrollbar,\n    ElIcon,\n    Loading,\n  },\n  directives: {\n    clickoutside: ClickOutside,\n  },\n  inheritAttrs: false,\n  props: {\n    valueKey: {\n      type: String,\n      default: 'value',\n    },\n    modelValue: {\n      type: [String, Number],\n      default: '',\n    },\n    debounce: {\n      type: Number,\n      default: 300,\n    },\n    placement: {\n      type: String as PropType<Placement>,\n      validator: (val: string): boolean => {\n        return [\n          'top',\n          'top-start',\n          'top-end',\n          'bottom',\n          'bottom-start',\n          'bottom-end',\n        ].includes(val)\n      },\n      default: 'bottom-start',\n    },\n    fetchSuggestions: {\n      type: Function as PropType<\n        (queryString: string, cb: (data: any[]) => void) => void\n      >,\n      default: NOOP,\n    },\n    popperClass: {\n      type: String,\n      default: '',\n    },\n    triggerOnFocus: {\n      type: Boolean,\n      default: true,\n    },\n    selectWhenUnmatched: {\n      type: Boolean,\n      default: false,\n    },\n    hideLoading: {\n      type: Boolean,\n      default: false,\n    },\n    popperAppendToBody: {\n      type: Boolean,\n      default: true,\n    },\n    highlightFirstItem: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  emits: [\n    UPDATE_MODEL_EVENT,\n    'input',\n    'change',\n    'focus',\n    'blur',\n    'clear',\n    'select',\n  ],\n  setup(props, ctx) {\n    const attrs = useAttrs()\n    const suggestions = ref([])\n    const highlightedIndex = ref(-1)\n    const dropdownWidth = ref('')\n    const activated = ref(false)\n    const suggestionDisabled = ref(false)\n    const loading = ref(false)\n    const inputRef = ref(null)\n    const regionRef = ref(null)\n    const popper = ref(null)\n\n    const id = computed(() => {\n      return `el-autocomplete-${generateId()}`\n    })\n    const suggestionVisible = computed(() => {\n      const isValidData =\n        isArray(suggestions.value) && suggestions.value.length > 0\n      return (isValidData || loading.value) && activated.value\n    })\n    const suggestionLoading = computed(() => {\n      return !props.hideLoading && loading.value\n    })\n\n    const updatePopperPosition = () => {\n      nextTick(popper.value.update)\n    }\n\n    watch(suggestionVisible, () => {\n      dropdownWidth.value = `${inputRef.value.$el.offsetWidth}px`\n    })\n\n    onMounted(() => {\n      inputRef.value.inputOrTextarea.setAttribute('role', 'textbox')\n      inputRef.value.inputOrTextarea.setAttribute('aria-autocomplete', 'list')\n      inputRef.value.inputOrTextarea.setAttribute('aria-controls', 'id')\n      inputRef.value.inputOrTextarea.setAttribute(\n        'aria-activedescendant',\n        `${id.value}-item-${highlightedIndex.value}`\n      )\n      const $ul = regionRef.value.querySelector(\n        '.el-autocomplete-suggestion__list'\n      )\n      $ul.setAttribute('role', 'listbox')\n      $ul.setAttribute('id', id.value)\n    })\n\n    onUpdated(updatePopperPosition)\n\n    const getData = (queryString) => {\n      if (suggestionDisabled.value) {\n        return\n      }\n      loading.value = true\n      updatePopperPosition()\n      props.fetchSuggestions(queryString, (suggestionsArg) => {\n        loading.value = false\n        if (suggestionDisabled.value) {\n          return\n        }\n        if (isArray(suggestionsArg)) {\n          suggestions.value = suggestionsArg\n          highlightedIndex.value = props.highlightFirstItem ? 0 : -1\n        } else {\n          throwError(\n            'ElAutocomplete',\n            'autocomplete suggestions must be an array'\n          )\n        }\n      })\n    }\n    const debouncedGetData = debounce(getData, props.debounce)\n    const handleInput = (value) => {\n      ctx.emit('input', value)\n      ctx.emit(UPDATE_MODEL_EVENT, value)\n      suggestionDisabled.value = false\n      if (!props.triggerOnFocus && !value) {\n        suggestionDisabled.value = true\n        suggestions.value = []\n        return\n      }\n      debouncedGetData(value)\n    }\n    const handleChange = (value) => {\n      ctx.emit('change', value)\n    }\n    const handleFocus = (e) => {\n      activated.value = true\n      ctx.emit('focus', e)\n      if (props.triggerOnFocus) {\n        debouncedGetData(props.modelValue)\n      }\n    }\n    const handleBlur = (e) => {\n      ctx.emit('blur', e)\n    }\n    const handleClear = () => {\n      activated.value = false\n      ctx.emit(UPDATE_MODEL_EVENT, '')\n      ctx.emit('clear')\n    }\n    const handleKeyEnter = () => {\n      if (\n        suggestionVisible.value &&\n        highlightedIndex.value >= 0 &&\n        highlightedIndex.value < suggestions.value.length\n      ) {\n        select(suggestions.value[highlightedIndex.value])\n      } else if (props.selectWhenUnmatched) {\n        ctx.emit('select', { value: props.modelValue })\n        nextTick(() => {\n          suggestions.value = []\n          highlightedIndex.value = -1\n        })\n      }\n    }\n    const close = () => {\n      activated.value = false\n    }\n    const focus = () => {\n      inputRef.value.focus()\n    }\n    const select = (item) => {\n      ctx.emit('input', item[props.valueKey])\n      ctx.emit(UPDATE_MODEL_EVENT, item[props.valueKey])\n      ctx.emit('select', item)\n      nextTick(() => {\n        suggestions.value = []\n        highlightedIndex.value = -1\n      })\n    }\n    const highlight = (index) => {\n      if (!suggestionVisible.value || loading.value) {\n        return\n      }\n      if (index < 0) {\n        highlightedIndex.value = -1\n        return\n      }\n      if (index >= suggestions.value.length) {\n        index = suggestions.value.length - 1\n      }\n      const suggestion = regionRef.value.querySelector(\n        '.el-autocomplete-suggestion__wrap'\n      )\n      const suggestionList = suggestion.querySelectorAll(\n        '.el-autocomplete-suggestion__list li'\n      )\n      const highlightItem = suggestionList[index]\n      const scrollTop = suggestion.scrollTop\n      const { offsetTop, scrollHeight } = highlightItem\n\n      if (offsetTop + scrollHeight > scrollTop + suggestion.clientHeight) {\n        suggestion.scrollTop += scrollHeight\n      }\n      if (offsetTop < scrollTop) {\n        suggestion.scrollTop -= scrollHeight\n      }\n      highlightedIndex.value = index\n      inputRef.value.inputOrTextarea.setAttribute(\n        'aria-activedescendant',\n        `${id.value}-item-${highlightedIndex.value}`\n      )\n    }\n\n    return {\n      Effect,\n\n      attrs,\n      suggestions,\n      highlightedIndex,\n      dropdownWidth,\n      activated,\n      suggestionDisabled,\n      loading,\n      inputRef,\n      regionRef,\n      popper,\n\n      id,\n      suggestionVisible,\n      suggestionLoading,\n\n      getData,\n      handleInput,\n      handleChange,\n      handleFocus,\n      handleBlur,\n      handleClear,\n      handleKeyEnter,\n      close,\n      focus,\n      select,\n      highlight,\n    }\n  },\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}