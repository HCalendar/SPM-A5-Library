{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { reactive, ref, shallowRef, inject, computed, watch, nextTick, triggerRef } from 'vue';\nimport { toRawType, isObject } from '@vue/shared';\nimport debounce from 'lodash/debounce';\nimport isEqual from 'lodash/isEqual';\nimport { CHANGE_EVENT, UPDATE_MODEL_EVENT } from '../../../utils/constants.mjs';\nimport { EVENT_CODE } from '../../../utils/aria.mjs';\nimport '../../../hooks/index.mjs';\nimport isServer from '../../../utils/isServer.mjs';\nimport scrollIntoView from '../../../utils/scroll-into-view.mjs';\nimport { isKorean } from '../../../utils/isDef.mjs';\nimport { getValueByPath } from '../../../utils/util.mjs';\nimport '../../../tokens/index.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { elFormKey, elFormItemKey } from '../../../tokens/form.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nfunction useSelectStates(props) {\n  const {\n    t\n  } = useLocale();\n  return reactive({\n    options: /* @__PURE__ */new Map(),\n    cachedOptions: /* @__PURE__ */new Map(),\n    createdLabel: null,\n    createdSelected: false,\n    selected: props.multiple ? [] : {},\n    inputLength: 20,\n    inputWidth: 0,\n    initialInputHeight: 0,\n    optionsCount: 0,\n    filteredOptionsCount: 0,\n    visible: false,\n    softFocus: false,\n    selectedLabel: \"\",\n    hoverIndex: -1,\n    query: \"\",\n    previousQuery: null,\n    inputHovering: false,\n    cachedPlaceHolder: \"\",\n    currentPlaceholder: t(\"el.select.placeholder\"),\n    menuVisibleOnFocus: false,\n    isOnComposition: false,\n    isSilentBlur: false,\n    prefixWidth: null,\n    tagInMultiLine: false\n  });\n}\nconst useSelect = (props, states, ctx) => {\n  const {\n    t\n  } = useLocale();\n  const reference = ref(null);\n  const input = ref(null);\n  const popper = ref(null);\n  const tags = ref(null);\n  const selectWrapper = ref(null);\n  const scrollbar = ref(null);\n  const hoverOption = ref(-1);\n  const queryChange = shallowRef({\n    query: \"\"\n  });\n  const groupQueryChange = shallowRef(\"\");\n  const elForm = inject(elFormKey, {});\n  const elFormItem = inject(elFormItemKey, {});\n  const readonly = computed(() => !props.filterable || props.multiple || !states.visible);\n  const selectDisabled = computed(() => props.disabled || elForm.disabled);\n  const showClose = computed(() => {\n    const hasValue = props.multiple ? Array.isArray(props.modelValue) && props.modelValue.length > 0 : props.modelValue !== void 0 && props.modelValue !== null && props.modelValue !== \"\";\n    const criteria = props.clearable && !selectDisabled.value && states.inputHovering && hasValue;\n    return criteria;\n  });\n  const iconComponent = computed(() => props.remote && props.filterable ? \"\" : props.suffixIcon);\n  const iconReverse = computed(() => iconComponent.value && states.visible ? \"is-reverse\" : \"\");\n  const debounce$1 = computed(() => props.remote ? 300 : 0);\n  const emptyText = computed(() => {\n    if (props.loading) {\n      return props.loadingText || t(\"el.select.loading\");\n    } else {\n      if (props.remote && states.query === \"\" && states.options.size === 0) return false;\n      if (props.filterable && states.query && states.options.size > 0 && states.filteredOptionsCount === 0) {\n        return props.noMatchText || t(\"el.select.noMatch\");\n      }\n      if (states.options.size === 0) {\n        return props.noDataText || t(\"el.select.noData\");\n      }\n    }\n    return null;\n  });\n  const optionsArray = computed(() => Array.from(states.options.values()));\n  const cachedOptionsArray = computed(() => Array.from(states.cachedOptions.values()));\n  const showNewOption = computed(() => {\n    const hasExistingOption = optionsArray.value.filter(option => {\n      return !option.created;\n    }).some(option => {\n      return option.currentLabel === states.query;\n    });\n    return props.filterable && props.allowCreate && states.query !== \"\" && !hasExistingOption;\n  });\n  const selectSize = useSize();\n  const collapseTagSize = computed(() => [\"small\", \"mini\"].indexOf(selectSize.value) > -1 ? \"mini\" : \"small\");\n  const dropMenuVisible = computed(() => states.visible && emptyText.value !== false);\n  watch(() => selectDisabled.value, () => {\n    nextTick(() => {\n      resetInputHeight();\n    });\n  });\n  watch(() => props.placeholder, val => {\n    states.cachedPlaceHolder = states.currentPlaceholder = val;\n  });\n  watch(() => props.modelValue, (val, oldVal) => {\n    var _a;\n    if (props.multiple) {\n      resetInputHeight();\n      if (val && val.length > 0 || input.value && states.query !== \"\") {\n        states.currentPlaceholder = \"\";\n      } else {\n        states.currentPlaceholder = states.cachedPlaceHolder;\n      }\n      if (props.filterable && !props.reserveKeyword) {\n        states.query = \"\";\n        handleQueryChange(states.query);\n      }\n    }\n    setSelected();\n    if (props.filterable && !props.multiple) {\n      states.inputLength = 20;\n    }\n    if (!isEqual(val, oldVal)) {\n      (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\");\n    }\n  }, {\n    flush: \"post\",\n    deep: true\n  });\n  watch(() => states.visible, val => {\n    var _a, _b;\n    if (!val) {\n      input.value && input.value.blur();\n      states.query = \"\";\n      states.previousQuery = null;\n      states.selectedLabel = \"\";\n      states.inputLength = 20;\n      states.menuVisibleOnFocus = false;\n      resetHoverIndex();\n      nextTick(() => {\n        if (input.value && input.value.value === \"\" && states.selected.length === 0) {\n          states.currentPlaceholder = states.cachedPlaceHolder;\n        }\n      });\n      if (!props.multiple) {\n        if (states.selected) {\n          if (props.filterable && props.allowCreate && states.createdSelected && states.createdLabel) {\n            states.selectedLabel = states.createdLabel;\n          } else {\n            states.selectedLabel = states.selected.currentLabel;\n          }\n          if (props.filterable) states.query = states.selectedLabel;\n        }\n        if (props.filterable) {\n          states.currentPlaceholder = states.cachedPlaceHolder;\n        }\n      }\n    } else {\n      (_b = (_a = popper.value) == null ? void 0 : _a.update) == null ? void 0 : _b.call(_a);\n      if (props.filterable) {\n        states.filteredOptionsCount = states.optionsCount;\n        states.query = props.remote ? \"\" : states.selectedLabel;\n        if (props.multiple) {\n          input.value.focus();\n        } else {\n          if (states.selectedLabel) {\n            states.currentPlaceholder = states.selectedLabel;\n            states.selectedLabel = \"\";\n          }\n        }\n        handleQueryChange(states.query);\n        if (!props.multiple && !props.remote) {\n          queryChange.value.query = \"\";\n          triggerRef(queryChange);\n          triggerRef(groupQueryChange);\n        }\n      }\n    }\n    ctx.emit(\"visible-change\", val);\n  });\n  watch(() => states.options.entries(), () => {\n    var _a, _b, _c;\n    if (isServer) return;\n    (_b = (_a = popper.value) == null ? void 0 : _a.update) == null ? void 0 : _b.call(_a);\n    if (props.multiple) {\n      resetInputHeight();\n    }\n    const inputs = ((_c = selectWrapper.value) == null ? void 0 : _c.querySelectorAll(\"input\")) || [];\n    if ([].indexOf.call(inputs, document.activeElement) === -1) {\n      setSelected();\n    }\n    if (props.defaultFirstOption && (props.filterable || props.remote) && states.filteredOptionsCount) {\n      checkDefaultFirstOption();\n    }\n  }, {\n    flush: \"post\"\n  });\n  watch(() => states.hoverIndex, val => {\n    if (typeof val === \"number\" && val > -1) {\n      hoverOption.value = optionsArray.value[val] || {};\n    }\n    optionsArray.value.forEach(option => {\n      option.hover = hoverOption.value === option;\n    });\n  });\n  const resetInputHeight = () => {\n    if (props.collapseTags && !props.filterable) return;\n    nextTick(() => {\n      var _a, _b;\n      if (!reference.value) return;\n      const inputChildNodes = reference.value.$el.childNodes;\n      const input2 = [].filter.call(inputChildNodes, item => item.tagName === \"INPUT\")[0];\n      const _tags = tags.value;\n      const sizeInMap = states.initialInputHeight || 40;\n      input2.style.height = states.selected.length === 0 ? `${sizeInMap}px` : `${Math.max(_tags ? _tags.clientHeight + (_tags.clientHeight > sizeInMap ? 6 : 0) : 0, sizeInMap)}px`;\n      states.tagInMultiLine = parseFloat(input2.style.height) > sizeInMap;\n      if (states.visible && emptyText.value !== false) {\n        (_b = (_a = popper.value) == null ? void 0 : _a.update) == null ? void 0 : _b.call(_a);\n      }\n    });\n  };\n  const handleQueryChange = val => {\n    if (states.previousQuery === val || states.isOnComposition) return;\n    if (states.previousQuery === null && (typeof props.filterMethod === \"function\" || typeof props.remoteMethod === \"function\")) {\n      states.previousQuery = val;\n      return;\n    }\n    states.previousQuery = val;\n    nextTick(() => {\n      var _a, _b;\n      if (states.visible) (_b = (_a = popper.value) == null ? void 0 : _a.update) == null ? void 0 : _b.call(_a);\n    });\n    states.hoverIndex = -1;\n    if (props.multiple && props.filterable) {\n      nextTick(() => {\n        const length = input.value.length * 15 + 20;\n        states.inputLength = props.collapseTags ? Math.min(50, length) : length;\n        managePlaceholder();\n        resetInputHeight();\n      });\n    }\n    if (props.remote && typeof props.remoteMethod === \"function\") {\n      states.hoverIndex = -1;\n      props.remoteMethod(val);\n    } else if (typeof props.filterMethod === \"function\") {\n      props.filterMethod(val);\n      triggerRef(groupQueryChange);\n    } else {\n      states.filteredOptionsCount = states.optionsCount;\n      queryChange.value.query = val;\n      triggerRef(queryChange);\n      triggerRef(groupQueryChange);\n    }\n    if (props.defaultFirstOption && (props.filterable || props.remote) && states.filteredOptionsCount) {\n      checkDefaultFirstOption();\n    }\n  };\n  const managePlaceholder = () => {\n    if (states.currentPlaceholder !== \"\") {\n      states.currentPlaceholder = input.value.value ? \"\" : states.cachedPlaceHolder;\n    }\n  };\n  const checkDefaultFirstOption = () => {\n    const optionsInDropdown = optionsArray.value.filter(n => n.visible && !n.disabled && !n.states.groupDisabled);\n    const userCreatedOption = optionsInDropdown.filter(n => n.created)[0];\n    const firstOriginOption = optionsInDropdown[0];\n    states.hoverIndex = getValueIndex(optionsArray.value, userCreatedOption || firstOriginOption);\n  };\n  const setSelected = () => {\n    var _a;\n    if (!props.multiple) {\n      const option = getOption(props.modelValue);\n      if ((_a = option.props) == null ? void 0 : _a.created) {\n        states.createdLabel = option.props.value;\n        states.createdSelected = true;\n      } else {\n        states.createdSelected = false;\n      }\n      states.selectedLabel = option.currentLabel;\n      states.selected = option;\n      if (props.filterable) states.query = states.selectedLabel;\n      return;\n    }\n    const result = [];\n    if (Array.isArray(props.modelValue)) {\n      props.modelValue.forEach(value => {\n        result.push(getOption(value));\n      });\n    }\n    states.selected = result;\n    nextTick(() => {\n      resetInputHeight();\n    });\n  };\n  const getOption = value => {\n    let option;\n    const isObjectValue = toRawType(value).toLowerCase() === \"object\";\n    const isNull = toRawType(value).toLowerCase() === \"null\";\n    const isUndefined = toRawType(value).toLowerCase() === \"undefined\";\n    for (let i = states.cachedOptions.size - 1; i >= 0; i--) {\n      const cachedOption = cachedOptionsArray.value[i];\n      const isEqualValue = isObjectValue ? getValueByPath(cachedOption.value, props.valueKey) === getValueByPath(value, props.valueKey) : cachedOption.value === value;\n      if (isEqualValue) {\n        option = {\n          value,\n          currentLabel: cachedOption.currentLabel,\n          isDisabled: cachedOption.isDisabled\n        };\n        break;\n      }\n    }\n    if (option) return option;\n    const label = !isObjectValue && !isNull && !isUndefined ? value : \"\";\n    const newOption = {\n      value,\n      currentLabel: label\n    };\n    if (props.multiple) {\n      ;\n      newOption.hitState = false;\n    }\n    return newOption;\n  };\n  const resetHoverIndex = () => {\n    setTimeout(() => {\n      const valueKey = props.valueKey;\n      if (!props.multiple) {\n        states.hoverIndex = optionsArray.value.findIndex(item => {\n          return getValueKey(item) === getValueKey(states.selected);\n        });\n      } else {\n        if (states.selected.length > 0) {\n          states.hoverIndex = Math.min.apply(null, states.selected.map(selected => {\n            return optionsArray.value.findIndex(item => {\n              return getValueByPath(item, valueKey) === getValueByPath(selected, valueKey);\n            });\n          }));\n        } else {\n          states.hoverIndex = -1;\n        }\n      }\n    }, 300);\n  };\n  const handleResize = () => {\n    var _a, _b;\n    resetInputWidth();\n    (_b = (_a = popper.value) == null ? void 0 : _a.update) == null ? void 0 : _b.call(_a);\n    if (props.multiple) resetInputHeight();\n  };\n  const resetInputWidth = () => {\n    var _a;\n    states.inputWidth = (_a = reference.value) == null ? void 0 : _a.$el.getBoundingClientRect().width;\n  };\n  const onInputChange = () => {\n    if (props.filterable && states.query !== states.selectedLabel) {\n      states.query = states.selectedLabel;\n      handleQueryChange(states.query);\n    }\n  };\n  const debouncedOnInputChange = debounce(() => {\n    onInputChange();\n  }, debounce$1.value);\n  const debouncedQueryChange = debounce(e => {\n    handleQueryChange(e.target.value);\n  }, debounce$1.value);\n  const emitChange = val => {\n    if (!isEqual(props.modelValue, val)) {\n      ctx.emit(CHANGE_EVENT, val);\n    }\n  };\n  const deletePrevTag = e => {\n    if (e.target.value.length <= 0 && !toggleLastOptionHitState()) {\n      const value = props.modelValue.slice();\n      value.pop();\n      ctx.emit(UPDATE_MODEL_EVENT, value);\n      emitChange(value);\n    }\n    if (e.target.value.length === 1 && props.modelValue.length === 0) {\n      states.currentPlaceholder = states.cachedPlaceHolder;\n    }\n  };\n  const deleteTag = (event, tag) => {\n    const index = states.selected.indexOf(tag);\n    if (index > -1 && !selectDisabled.value) {\n      const value = props.modelValue.slice();\n      value.splice(index, 1);\n      ctx.emit(UPDATE_MODEL_EVENT, value);\n      emitChange(value);\n      ctx.emit(\"remove-tag\", tag.value);\n    }\n    event.stopPropagation();\n  };\n  const deleteSelected = event => {\n    event.stopPropagation();\n    const value = props.multiple ? [] : \"\";\n    if (typeof value !== \"string\") {\n      for (const item of states.selected) {\n        if (item.isDisabled) value.push(item.value);\n      }\n    }\n    ctx.emit(UPDATE_MODEL_EVENT, value);\n    emitChange(value);\n    states.visible = false;\n    ctx.emit(\"clear\");\n  };\n  const handleOptionSelect = (option, byClick) => {\n    if (props.multiple) {\n      const value = (props.modelValue || []).slice();\n      const optionIndex = getValueIndex(value, option.value);\n      if (optionIndex > -1) {\n        value.splice(optionIndex, 1);\n      } else if (props.multipleLimit <= 0 || value.length < props.multipleLimit) {\n        value.push(option.value);\n      }\n      ctx.emit(UPDATE_MODEL_EVENT, value);\n      emitChange(value);\n      if (option.created) {\n        states.query = \"\";\n        handleQueryChange(\"\");\n        states.inputLength = 20;\n      }\n      if (props.filterable) input.value.focus();\n    } else {\n      ctx.emit(UPDATE_MODEL_EVENT, option.value);\n      emitChange(option.value);\n      states.visible = false;\n    }\n    states.isSilentBlur = byClick;\n    setSoftFocus();\n    if (states.visible) return;\n    nextTick(() => {\n      scrollToOption(option);\n    });\n  };\n  const getValueIndex = (arr = [], value) => {\n    if (!isObject(value)) return arr.indexOf(value);\n    const valueKey = props.valueKey;\n    let index = -1;\n    arr.some((item, i) => {\n      if (getValueByPath(item, valueKey) === getValueByPath(value, valueKey)) {\n        index = i;\n        return true;\n      }\n      return false;\n    });\n    return index;\n  };\n  const setSoftFocus = () => {\n    states.softFocus = true;\n    const _input = input.value || reference.value;\n    if (_input) {\n      _input.focus();\n    }\n  };\n  const scrollToOption = option => {\n    var _a, _b, _c, _d;\n    const targetOption = Array.isArray(option) ? option[0] : option;\n    let target = null;\n    if (targetOption == null ? void 0 : targetOption.value) {\n      const options = optionsArray.value.filter(item => item.value === targetOption.value);\n      if (options.length > 0) {\n        target = options[0].$el;\n      }\n    }\n    if (popper.value && target) {\n      const menu = (_c = (_b = (_a = popper.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.querySelector) == null ? void 0 : _c.call(_b, \".el-select-dropdown__wrap\");\n      if (menu) {\n        scrollIntoView(menu, target);\n      }\n    }\n    (_d = scrollbar.value) == null ? void 0 : _d.handleScroll();\n  };\n  const onOptionCreate = vm => {\n    states.optionsCount++;\n    states.filteredOptionsCount++;\n    states.options.set(vm.value, vm);\n    states.cachedOptions.set(vm.value, vm);\n  };\n  const onOptionDestroy = key => {\n    states.optionsCount--;\n    states.filteredOptionsCount--;\n    states.options.delete(key);\n  };\n  const resetInputState = e => {\n    if (e.code !== EVENT_CODE.backspace) toggleLastOptionHitState(false);\n    states.inputLength = input.value.length * 15 + 20;\n    resetInputHeight();\n  };\n  const toggleLastOptionHitState = hit => {\n    if (!Array.isArray(states.selected)) return;\n    const option = states.selected[states.selected.length - 1];\n    if (!option) return;\n    if (hit === true || hit === false) {\n      option.hitState = hit;\n      return hit;\n    }\n    option.hitState = !option.hitState;\n    return option.hitState;\n  };\n  const handleComposition = event => {\n    const text = event.target.value;\n    if (event.type === \"compositionend\") {\n      states.isOnComposition = false;\n      nextTick(() => handleQueryChange(text));\n    } else {\n      const lastCharacter = text[text.length - 1] || \"\";\n      states.isOnComposition = !isKorean(lastCharacter);\n    }\n  };\n  const handleMenuEnter = () => {\n    nextTick(() => scrollToOption(states.selected));\n  };\n  const handleFocus = event => {\n    if (!states.softFocus) {\n      if (props.automaticDropdown || props.filterable) {\n        states.visible = true;\n        if (props.filterable) {\n          states.menuVisibleOnFocus = true;\n        }\n      }\n      ctx.emit(\"focus\", event);\n    } else {\n      states.softFocus = false;\n    }\n  };\n  const blur = () => {\n    states.visible = false;\n    reference.value.blur();\n  };\n  const handleBlur = event => {\n    nextTick(() => {\n      if (states.isSilentBlur) {\n        states.isSilentBlur = false;\n      } else {\n        ctx.emit(\"blur\", event);\n      }\n    });\n    states.softFocus = false;\n  };\n  const handleClearClick = event => {\n    deleteSelected(event);\n  };\n  const handleClose = () => {\n    states.visible = false;\n  };\n  const toggleMenu = () => {\n    if (props.automaticDropdown) return;\n    if (!selectDisabled.value) {\n      if (states.menuVisibleOnFocus) {\n        states.menuVisibleOnFocus = false;\n      } else {\n        states.visible = !states.visible;\n      }\n      if (states.visible) {\n        ;\n        (input.value || reference.value).focus();\n      }\n    }\n  };\n  const selectOption = () => {\n    if (!states.visible) {\n      toggleMenu();\n    } else {\n      if (optionsArray.value[states.hoverIndex]) {\n        handleOptionSelect(optionsArray.value[states.hoverIndex], void 0);\n      }\n    }\n  };\n  const getValueKey = item => {\n    return isObject(item.value) ? getValueByPath(item.value, props.valueKey) : item.value;\n  };\n  const optionsAllDisabled = computed(() => optionsArray.value.filter(option => option.visible).every(option => option.disabled));\n  const navigateOptions = direction => {\n    if (!states.visible) {\n      states.visible = true;\n      return;\n    }\n    if (states.options.size === 0 || states.filteredOptionsCount === 0) return;\n    if (states.isOnComposition) return;\n    if (!optionsAllDisabled.value) {\n      if (direction === \"next\") {\n        states.hoverIndex++;\n        if (states.hoverIndex === states.options.size) {\n          states.hoverIndex = 0;\n        }\n      } else if (direction === \"prev\") {\n        states.hoverIndex--;\n        if (states.hoverIndex < 0) {\n          states.hoverIndex = states.options.size - 1;\n        }\n      }\n      const option = optionsArray.value[states.hoverIndex];\n      if (option.disabled === true || option.states.groupDisabled === true || !option.visible) {\n        navigateOptions(direction);\n      }\n      nextTick(() => scrollToOption(hoverOption.value));\n    }\n  };\n  return {\n    optionsArray,\n    selectSize,\n    handleResize,\n    debouncedOnInputChange,\n    debouncedQueryChange,\n    deletePrevTag,\n    deleteTag,\n    deleteSelected,\n    handleOptionSelect,\n    scrollToOption,\n    readonly,\n    resetInputHeight,\n    showClose,\n    iconComponent,\n    iconReverse,\n    showNewOption,\n    collapseTagSize,\n    setSelected,\n    managePlaceholder,\n    selectDisabled,\n    emptyText,\n    toggleLastOptionHitState,\n    resetInputState,\n    handleComposition,\n    onOptionCreate,\n    onOptionDestroy,\n    handleMenuEnter,\n    handleFocus,\n    blur,\n    handleBlur,\n    handleClearClick,\n    handleClose,\n    toggleMenu,\n    selectOption,\n    getValueKey,\n    navigateOptions,\n    dropMenuVisible,\n    queryChange,\n    groupQueryChange,\n    reference,\n    input,\n    popper,\n    tags,\n    selectWrapper,\n    scrollbar\n  };\n};\nexport { useSelect, useSelectStates };","map":{"version":3,"names":["props","t","useLocale","reactive","options","Map","cachedOptions","createdLabel","createdSelected","selected","multiple","inputLength","inputWidth","initialInputHeight","optionsCount","filteredOptionsCount","visible","softFocus","selectedLabel","hoverIndex","query","previousQuery","inputHovering","cachedPlaceHolder","currentPlaceholder","menuVisibleOnFocus","isOnComposition","isSilentBlur","prefixWidth","tagInMultiLine","useSelect","states","ctx","reference","ref","input","popper","tags","selectWrapper","scrollbar","hoverOption","queryChange","shallowRef","groupQueryChange","elForm","inject","elFormKey","elFormItem","elFormItemKey","readonly","computed","filterable","selectDisabled","disabled","showClose","hasValue","Array","isArray","modelValue","length","criteria","clearable","value","iconComponent","remote","suffixIcon","iconReverse","debounce$1","emptyText","loading","loadingText","size","noMatchText","noDataText","optionsArray","from","values","cachedOptionsArray","showNewOption","hasExistingOption","filter","option","created","some","currentLabel","allowCreate","selectSize","useSize","collapseTagSize","indexOf","dropMenuVisible","watch","nextTick","resetInputHeight","placeholder","val","oldVal","_a","reserveKeyword","handleQueryChange","setSelected","isEqual","validate","call","flush","deep","_b","blur","resetHoverIndex","update","focus","triggerRef","emit","entries","_c","isServer","inputs","querySelectorAll","document","activeElement","defaultFirstOption","checkDefaultFirstOption","forEach","hover","collapseTags","inputChildNodes","$el","childNodes","input2","item","tagName","_tags","sizeInMap","style","height","Math","max","clientHeight","parseFloat","filterMethod","remoteMethod","min","managePlaceholder","optionsInDropdown","n","groupDisabled","userCreatedOption","firstOriginOption","getValueIndex","getOption","result","push","isObjectValue","toRawType","toLowerCase","isNull","isUndefined","i","cachedOption","isEqualValue","getValueByPath","valueKey","isDisabled","label","newOption","hitState","setTimeout","findIndex","getValueKey","apply","map","handleResize","resetInputWidth","getBoundingClientRect","width","onInputChange","debouncedOnInputChange","debounce","debouncedQueryChange","e","target","emitChange","CHANGE_EVENT","deletePrevTag","toggleLastOptionHitState","slice","pop","UPDATE_MODEL_EVENT","deleteTag","event","tag","index","splice","stopPropagation","deleteSelected","handleOptionSelect","byClick","optionIndex","multipleLimit","setSoftFocus","scrollToOption","arr","isObject","_input","_d","targetOption","menu","popperRef","querySelector","scrollIntoView","handleScroll","onOptionCreate","vm","set","onOptionDestroy","key","delete","resetInputState","code","EVENT_CODE","backspace","hit","handleComposition","text","type","lastCharacter","isKorean","handleMenuEnter","handleFocus","automaticDropdown","handleBlur","handleClearClick","handleClose","toggleMenu","selectOption","optionsAllDisabled","every","navigateOptions","direction"],"sources":["../../../../../../packages/components/select/src/useSelect.ts"],"sourcesContent":["import {\n  inject,\n  nextTick,\n  computed,\n  watch,\n  ref,\n  reactive,\n  shallowRef,\n  triggerRef,\n} from 'vue'\nimport { isObject, toRawType } from '@vue/shared'\nimport lodashDebounce from 'lodash/debounce'\nimport isEqual from 'lodash/isEqual'\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '@element-plus/utils/constants'\nimport { EVENT_CODE } from '@element-plus/utils/aria'\nimport { useLocale, useSize } from '@element-plus/hooks'\nimport isServer from '@element-plus/utils/isServer'\nimport scrollIntoView from '@element-plus/utils/scroll-into-view'\nimport { isKorean } from '@element-plus/utils/isDef'\nimport { getValueByPath } from '@element-plus/utils/util'\nimport { elFormKey, elFormItemKey } from '@element-plus/tokens'\n\nimport type { QueryChangeCtx, SelectOptionProxy } from './token'\nimport type { ElFormContext, ElFormItemContext } from '@element-plus/tokens'\n\nexport function useSelectStates(props) {\n  const { t } = useLocale()\n  return reactive({\n    options: new Map(),\n    cachedOptions: new Map(),\n    createdLabel: null,\n    createdSelected: false,\n    selected: props.multiple ? [] : ({} as any),\n    inputLength: 20,\n    inputWidth: 0,\n    initialInputHeight: 0,\n    optionsCount: 0,\n    filteredOptionsCount: 0,\n    visible: false,\n    softFocus: false,\n    selectedLabel: '',\n    hoverIndex: -1,\n    query: '',\n    previousQuery: null,\n    inputHovering: false,\n    cachedPlaceHolder: '',\n    currentPlaceholder: t('el.select.placeholder'),\n    menuVisibleOnFocus: false,\n    isOnComposition: false,\n    isSilentBlur: false,\n    prefixWidth: null,\n    tagInMultiLine: false,\n  })\n}\n\ntype States = ReturnType<typeof useSelectStates>\n\nexport const useSelect = (props, states: States, ctx) => {\n  const { t } = useLocale()\n\n  // template refs\n  const reference = ref(null)\n  const input = ref(null)\n  const popper = ref(null)\n  const tags = ref(null)\n  const selectWrapper = ref<HTMLElement | null>(null)\n  const scrollbar = ref(null)\n  const hoverOption = ref(-1)\n  const queryChange = shallowRef<QueryChangeCtx>({ query: '' })\n  const groupQueryChange = shallowRef('')\n\n  // inject\n  const elForm = inject(elFormKey, {} as ElFormContext)\n  const elFormItem = inject(elFormItemKey, {} as ElFormItemContext)\n\n  const readonly = computed(\n    () => !props.filterable || props.multiple || !states.visible\n  )\n\n  const selectDisabled = computed(() => props.disabled || elForm.disabled)\n\n  const showClose = computed(() => {\n    const hasValue = props.multiple\n      ? Array.isArray(props.modelValue) && props.modelValue.length > 0\n      : props.modelValue !== undefined &&\n        props.modelValue !== null &&\n        props.modelValue !== ''\n\n    const criteria =\n      props.clearable &&\n      !selectDisabled.value &&\n      states.inputHovering &&\n      hasValue\n    return criteria\n  })\n  const iconComponent = computed(() =>\n    props.remote && props.filterable ? '' : props.suffixIcon\n  )\n  const iconReverse = computed(() =>\n    iconComponent.value && states.visible ? 'is-reverse' : ''\n  )\n\n  const debounce = computed(() => (props.remote ? 300 : 0))\n\n  const emptyText = computed(() => {\n    if (props.loading) {\n      return props.loadingText || t('el.select.loading')\n    } else {\n      if (props.remote && states.query === '' && states.options.size === 0)\n        return false\n      if (\n        props.filterable &&\n        states.query &&\n        states.options.size > 0 &&\n        states.filteredOptionsCount === 0\n      ) {\n        return props.noMatchText || t('el.select.noMatch')\n      }\n      if (states.options.size === 0) {\n        return props.noDataText || t('el.select.noData')\n      }\n    }\n    return null\n  })\n\n  const optionsArray = computed(() => Array.from(states.options.values()))\n\n  const cachedOptionsArray = computed(() =>\n    Array.from(states.cachedOptions.values())\n  )\n\n  const showNewOption = computed(() => {\n    const hasExistingOption = optionsArray.value\n      .filter((option) => {\n        return !option.created\n      })\n      .some((option) => {\n        return option.currentLabel === states.query\n      })\n    return (\n      props.filterable &&\n      props.allowCreate &&\n      states.query !== '' &&\n      !hasExistingOption\n    )\n  })\n\n  const selectSize = useSize()\n\n  const collapseTagSize = computed(() =>\n    ['small', 'mini'].indexOf(selectSize.value) > -1 ? 'mini' : 'small'\n  )\n\n  const dropMenuVisible = computed(\n    () => states.visible && emptyText.value !== false\n  )\n\n  // watch\n  watch(\n    () => selectDisabled.value,\n    () => {\n      nextTick(() => {\n        resetInputHeight()\n      })\n    }\n  )\n\n  watch(\n    () => props.placeholder,\n    (val) => {\n      states.cachedPlaceHolder = states.currentPlaceholder = val\n    }\n  )\n\n  watch(\n    () => props.modelValue,\n    (val, oldVal) => {\n      if (props.multiple) {\n        resetInputHeight()\n        if ((val && val.length > 0) || (input.value && states.query !== '')) {\n          states.currentPlaceholder = ''\n        } else {\n          states.currentPlaceholder = states.cachedPlaceHolder\n        }\n        if (props.filterable && !props.reserveKeyword) {\n          states.query = ''\n          handleQueryChange(states.query)\n        }\n      }\n      setSelected()\n      if (props.filterable && !props.multiple) {\n        states.inputLength = 20\n      }\n      if (!isEqual(val, oldVal)) {\n        elFormItem.validate?.('change')\n      }\n    },\n    {\n      flush: 'post',\n      deep: true,\n    }\n  )\n\n  watch(\n    () => states.visible,\n    (val) => {\n      if (!val) {\n        input.value && input.value.blur()\n        states.query = ''\n        states.previousQuery = null\n        states.selectedLabel = ''\n        states.inputLength = 20\n        states.menuVisibleOnFocus = false\n        resetHoverIndex()\n        nextTick(() => {\n          if (\n            input.value &&\n            input.value.value === '' &&\n            states.selected.length === 0\n          ) {\n            states.currentPlaceholder = states.cachedPlaceHolder\n          }\n        })\n\n        if (!props.multiple) {\n          if (states.selected) {\n            if (\n              props.filterable &&\n              props.allowCreate &&\n              states.createdSelected &&\n              states.createdLabel\n            ) {\n              states.selectedLabel = states.createdLabel\n            } else {\n              states.selectedLabel = states.selected.currentLabel\n            }\n            if (props.filterable) states.query = states.selectedLabel\n          }\n\n          if (props.filterable) {\n            states.currentPlaceholder = states.cachedPlaceHolder\n          }\n        }\n      } else {\n        popper.value?.update?.()\n\n        if (props.filterable) {\n          states.filteredOptionsCount = states.optionsCount\n          states.query = props.remote ? '' : states.selectedLabel\n          if (props.multiple) {\n            input.value.focus()\n          } else {\n            if (states.selectedLabel) {\n              states.currentPlaceholder = states.selectedLabel\n              states.selectedLabel = ''\n            }\n          }\n          handleQueryChange(states.query)\n          if (!props.multiple && !props.remote) {\n            queryChange.value.query = ''\n\n            triggerRef(queryChange)\n            triggerRef(groupQueryChange)\n          }\n        }\n      }\n      ctx.emit('visible-change', val)\n    }\n  )\n\n  watch(\n    // fix `Array.prototype.push/splice/..` cannot trigger non-deep watcher\n    // https://github.com/vuejs/vue-next/issues/2116\n    () => states.options.entries(),\n    () => {\n      if (isServer) return\n      popper.value?.update?.()\n      if (props.multiple) {\n        resetInputHeight()\n      }\n      const inputs = selectWrapper.value?.querySelectorAll('input') || []\n      if ([].indexOf.call(inputs, document.activeElement) === -1) {\n        setSelected()\n      }\n      if (\n        props.defaultFirstOption &&\n        (props.filterable || props.remote) &&\n        states.filteredOptionsCount\n      ) {\n        checkDefaultFirstOption()\n      }\n    },\n    {\n      flush: 'post',\n    }\n  )\n\n  watch(\n    () => states.hoverIndex,\n    (val) => {\n      if (typeof val === 'number' && val > -1) {\n        hoverOption.value = optionsArray.value[val] || {}\n      }\n      optionsArray.value.forEach((option) => {\n        option.hover = hoverOption.value === option\n      })\n    }\n  )\n\n  // methods\n  const resetInputHeight = () => {\n    if (props.collapseTags && !props.filterable) return\n    nextTick(() => {\n      if (!reference.value) return\n      const inputChildNodes = reference.value.$el.childNodes\n      const input = [].filter.call(\n        inputChildNodes,\n        (item) => item.tagName === 'INPUT'\n      )[0]\n      const _tags = tags.value\n      const sizeInMap = states.initialInputHeight || 40\n      input.style.height =\n        states.selected.length === 0\n          ? `${sizeInMap}px`\n          : `${Math.max(\n              _tags\n                ? _tags.clientHeight + (_tags.clientHeight > sizeInMap ? 6 : 0)\n                : 0,\n              sizeInMap\n            )}px`\n\n      states.tagInMultiLine = parseFloat(input.style.height) > sizeInMap\n\n      if (states.visible && emptyText.value !== false) {\n        popper.value?.update?.()\n      }\n    })\n  }\n\n  const handleQueryChange = (val) => {\n    if (states.previousQuery === val || states.isOnComposition) return\n    if (\n      states.previousQuery === null &&\n      (typeof props.filterMethod === 'function' ||\n        typeof props.remoteMethod === 'function')\n    ) {\n      states.previousQuery = val\n      return\n    }\n    states.previousQuery = val\n    nextTick(() => {\n      if (states.visible) popper.value?.update?.()\n    })\n    states.hoverIndex = -1\n    if (props.multiple && props.filterable) {\n      nextTick(() => {\n        const length = input.value.length * 15 + 20\n        states.inputLength = props.collapseTags ? Math.min(50, length) : length\n        managePlaceholder()\n        resetInputHeight()\n      })\n    }\n    if (props.remote && typeof props.remoteMethod === 'function') {\n      states.hoverIndex = -1\n      props.remoteMethod(val)\n    } else if (typeof props.filterMethod === 'function') {\n      props.filterMethod(val)\n      triggerRef(groupQueryChange)\n    } else {\n      states.filteredOptionsCount = states.optionsCount\n      queryChange.value.query = val\n\n      triggerRef(queryChange)\n      triggerRef(groupQueryChange)\n    }\n    if (\n      props.defaultFirstOption &&\n      (props.filterable || props.remote) &&\n      states.filteredOptionsCount\n    ) {\n      checkDefaultFirstOption()\n    }\n  }\n\n  const managePlaceholder = () => {\n    if (states.currentPlaceholder !== '') {\n      states.currentPlaceholder = input.value.value\n        ? ''\n        : states.cachedPlaceHolder\n    }\n  }\n\n  /**\n   * find and highlight first option as default selected\n   * @remark\n   * - if the first option in dropdown list is user-created,\n   *   it would be at the end of the optionsArray\n   *   so find it and set hover.\n   *   (NOTE: there must be only one user-created option in dropdown list with query)\n   * - if there's no user-created option in list, just find the first one as usual\n   *   (NOTE: exclude options that are disabled or in disabled-group)\n   */\n  const checkDefaultFirstOption = () => {\n    const optionsInDropdown = optionsArray.value.filter(\n      (n) => n.visible && !n.disabled && !n.states.groupDisabled\n    )\n    const userCreatedOption = optionsInDropdown.filter((n) => n.created)[0]\n    const firstOriginOption = optionsInDropdown[0]\n    states.hoverIndex = getValueIndex(\n      optionsArray.value,\n      userCreatedOption || firstOriginOption\n    )\n  }\n\n  const setSelected = () => {\n    if (!props.multiple) {\n      const option = getOption(props.modelValue)\n      if (option.props?.created) {\n        states.createdLabel = option.props.value\n        states.createdSelected = true\n      } else {\n        states.createdSelected = false\n      }\n      states.selectedLabel = option.currentLabel\n      states.selected = option\n      if (props.filterable) states.query = states.selectedLabel\n      return\n    }\n    const result = []\n    if (Array.isArray(props.modelValue)) {\n      props.modelValue.forEach((value) => {\n        result.push(getOption(value))\n      })\n    }\n    states.selected = result\n    nextTick(() => {\n      resetInputHeight()\n    })\n  }\n\n  const getOption = (value) => {\n    let option\n    const isObjectValue = toRawType(value).toLowerCase() === 'object'\n    const isNull = toRawType(value).toLowerCase() === 'null'\n    const isUndefined = toRawType(value).toLowerCase() === 'undefined'\n\n    for (let i = states.cachedOptions.size - 1; i >= 0; i--) {\n      const cachedOption = cachedOptionsArray.value[i]\n      const isEqualValue = isObjectValue\n        ? getValueByPath(cachedOption.value, props.valueKey) ===\n          getValueByPath(value, props.valueKey)\n        : cachedOption.value === value\n      if (isEqualValue) {\n        option = {\n          value,\n          currentLabel: cachedOption.currentLabel,\n          isDisabled: cachedOption.isDisabled,\n        }\n        break\n      }\n    }\n    if (option) return option\n    const label = !isObjectValue && !isNull && !isUndefined ? value : ''\n    const newOption = {\n      value,\n      currentLabel: label,\n    }\n    if (props.multiple) {\n      ;(newOption as any).hitState = false\n    }\n    return newOption\n  }\n\n  const resetHoverIndex = () => {\n    setTimeout(() => {\n      const valueKey = props.valueKey\n      if (!props.multiple) {\n        states.hoverIndex = optionsArray.value.findIndex((item) => {\n          return getValueKey(item) === getValueKey(states.selected)\n        })\n      } else {\n        if (states.selected.length > 0) {\n          states.hoverIndex = Math.min.apply(\n            null,\n            states.selected.map((selected) => {\n              return optionsArray.value.findIndex((item) => {\n                return (\n                  getValueByPath(item, valueKey) ===\n                  getValueByPath(selected, valueKey)\n                )\n              })\n            })\n          )\n        } else {\n          states.hoverIndex = -1\n        }\n      }\n    }, 300)\n  }\n\n  const handleResize = () => {\n    resetInputWidth()\n    popper.value?.update?.()\n    if (props.multiple) resetInputHeight()\n  }\n\n  const resetInputWidth = () => {\n    states.inputWidth = reference.value?.$el.getBoundingClientRect().width\n  }\n\n  const onInputChange = () => {\n    if (props.filterable && states.query !== states.selectedLabel) {\n      states.query = states.selectedLabel\n      handleQueryChange(states.query)\n    }\n  }\n\n  const debouncedOnInputChange = lodashDebounce(() => {\n    onInputChange()\n  }, debounce.value)\n\n  const debouncedQueryChange = lodashDebounce((e) => {\n    handleQueryChange(e.target.value)\n  }, debounce.value)\n\n  const emitChange = (val) => {\n    if (!isEqual(props.modelValue, val)) {\n      ctx.emit(CHANGE_EVENT, val)\n    }\n  }\n\n  const deletePrevTag = (e) => {\n    if (e.target.value.length <= 0 && !toggleLastOptionHitState()) {\n      const value = props.modelValue.slice()\n      value.pop()\n      ctx.emit(UPDATE_MODEL_EVENT, value)\n      emitChange(value)\n    }\n\n    if (e.target.value.length === 1 && props.modelValue.length === 0) {\n      states.currentPlaceholder = states.cachedPlaceHolder\n    }\n  }\n\n  const deleteTag = (event, tag) => {\n    const index = states.selected.indexOf(tag)\n    if (index > -1 && !selectDisabled.value) {\n      const value = props.modelValue.slice()\n      value.splice(index, 1)\n      ctx.emit(UPDATE_MODEL_EVENT, value)\n      emitChange(value)\n      ctx.emit('remove-tag', tag.value)\n    }\n    event.stopPropagation()\n  }\n\n  const deleteSelected = (event) => {\n    event.stopPropagation()\n    const value = props.multiple ? [] : ''\n    if (typeof value !== 'string') {\n      for (const item of states.selected) {\n        if (item.isDisabled) value.push(item.value)\n      }\n    }\n    ctx.emit(UPDATE_MODEL_EVENT, value)\n    emitChange(value)\n    states.visible = false\n    ctx.emit('clear')\n  }\n\n  const handleOptionSelect = (option, byClick) => {\n    if (props.multiple) {\n      const value = (props.modelValue || []).slice()\n      const optionIndex = getValueIndex(value, option.value)\n      if (optionIndex > -1) {\n        value.splice(optionIndex, 1)\n      } else if (\n        props.multipleLimit <= 0 ||\n        value.length < props.multipleLimit\n      ) {\n        value.push(option.value)\n      }\n      ctx.emit(UPDATE_MODEL_EVENT, value)\n      emitChange(value)\n      if (option.created) {\n        states.query = ''\n        handleQueryChange('')\n        states.inputLength = 20\n      }\n      if (props.filterable) input.value.focus()\n    } else {\n      ctx.emit(UPDATE_MODEL_EVENT, option.value)\n      emitChange(option.value)\n      states.visible = false\n    }\n    states.isSilentBlur = byClick\n    setSoftFocus()\n    if (states.visible) return\n    nextTick(() => {\n      scrollToOption(option)\n    })\n  }\n\n  const getValueIndex = (arr = [], value) => {\n    if (!isObject(value)) return arr.indexOf(value)\n\n    const valueKey = props.valueKey\n    let index = -1\n    arr.some((item, i) => {\n      if (getValueByPath(item, valueKey) === getValueByPath(value, valueKey)) {\n        index = i\n        return true\n      }\n      return false\n    })\n    return index\n  }\n\n  const setSoftFocus = () => {\n    states.softFocus = true\n    const _input = input.value || reference.value\n    if (_input) {\n      _input.focus()\n    }\n  }\n\n  const scrollToOption = (option) => {\n    const targetOption = Array.isArray(option) ? option[0] : option\n    let target = null\n\n    if (targetOption?.value) {\n      const options = optionsArray.value.filter(\n        (item) => item.value === targetOption.value\n      )\n      if (options.length > 0) {\n        target = options[0].$el\n      }\n    }\n\n    if (popper.value && target) {\n      const menu = popper.value?.popperRef?.querySelector?.(\n        '.el-select-dropdown__wrap'\n      )\n      if (menu) {\n        scrollIntoView(menu, target)\n      }\n    }\n    scrollbar.value?.handleScroll()\n  }\n\n  const onOptionCreate = (vm: SelectOptionProxy) => {\n    states.optionsCount++\n    states.filteredOptionsCount++\n    states.options.set(vm.value, vm)\n    states.cachedOptions.set(vm.value, vm)\n  }\n\n  const onOptionDestroy = (key) => {\n    states.optionsCount--\n    states.filteredOptionsCount--\n    states.options.delete(key)\n  }\n\n  const resetInputState = (e: KeyboardEvent) => {\n    if (e.code !== EVENT_CODE.backspace) toggleLastOptionHitState(false)\n    states.inputLength = input.value.length * 15 + 20\n    resetInputHeight()\n  }\n\n  const toggleLastOptionHitState = (hit?: boolean) => {\n    if (!Array.isArray(states.selected)) return\n    const option = states.selected[states.selected.length - 1]\n    if (!option) return\n\n    if (hit === true || hit === false) {\n      option.hitState = hit\n      return hit\n    }\n\n    option.hitState = !option.hitState\n    return option.hitState\n  }\n\n  const handleComposition = (event) => {\n    const text = event.target.value\n    if (event.type === 'compositionend') {\n      states.isOnComposition = false\n      nextTick(() => handleQueryChange(text))\n    } else {\n      const lastCharacter = text[text.length - 1] || ''\n      states.isOnComposition = !isKorean(lastCharacter)\n    }\n  }\n\n  const handleMenuEnter = () => {\n    nextTick(() => scrollToOption(states.selected))\n  }\n\n  const handleFocus = (event) => {\n    if (!states.softFocus) {\n      if (props.automaticDropdown || props.filterable) {\n        states.visible = true\n        if (props.filterable) {\n          states.menuVisibleOnFocus = true\n        }\n      }\n      ctx.emit('focus', event)\n    } else {\n      states.softFocus = false\n    }\n  }\n\n  const blur = () => {\n    states.visible = false\n    reference.value.blur()\n  }\n\n  const handleBlur = (event: Event) => {\n    // https://github.com/ElemeFE/element/pull/10822\n    nextTick(() => {\n      if (states.isSilentBlur) {\n        states.isSilentBlur = false\n      } else {\n        ctx.emit('blur', event)\n      }\n    })\n    states.softFocus = false\n  }\n\n  const handleClearClick = (event: Event) => {\n    deleteSelected(event)\n  }\n\n  const handleClose = () => {\n    states.visible = false\n  }\n\n  const toggleMenu = () => {\n    if (props.automaticDropdown) return\n    if (!selectDisabled.value) {\n      if (states.menuVisibleOnFocus) {\n        states.menuVisibleOnFocus = false\n      } else {\n        states.visible = !states.visible\n      }\n      if (states.visible) {\n        ;(input.value || reference.value).focus()\n      }\n    }\n  }\n\n  const selectOption = () => {\n    if (!states.visible) {\n      toggleMenu()\n    } else {\n      if (optionsArray.value[states.hoverIndex]) {\n        handleOptionSelect(optionsArray.value[states.hoverIndex], undefined)\n      }\n    }\n  }\n\n  const getValueKey = (item) => {\n    return isObject(item.value)\n      ? getValueByPath(item.value, props.valueKey)\n      : item.value\n  }\n\n  const optionsAllDisabled = computed(() =>\n    optionsArray.value\n      .filter((option) => option.visible)\n      .every((option) => option.disabled)\n  )\n\n  const navigateOptions = (direction) => {\n    if (!states.visible) {\n      states.visible = true\n      return\n    }\n    if (states.options.size === 0 || states.filteredOptionsCount === 0) return\n    if (states.isOnComposition) return\n\n    if (!optionsAllDisabled.value) {\n      if (direction === 'next') {\n        states.hoverIndex++\n        if (states.hoverIndex === states.options.size) {\n          states.hoverIndex = 0\n        }\n      } else if (direction === 'prev') {\n        states.hoverIndex--\n        if (states.hoverIndex < 0) {\n          states.hoverIndex = states.options.size - 1\n        }\n      }\n      const option = optionsArray.value[states.hoverIndex]\n      if (\n        option.disabled === true ||\n        option.states.groupDisabled === true ||\n        !option.visible\n      ) {\n        navigateOptions(direction)\n      }\n      nextTick(() => scrollToOption(hoverOption.value))\n    }\n  }\n\n  return {\n    optionsArray,\n    selectSize,\n    handleResize,\n    debouncedOnInputChange,\n    debouncedQueryChange,\n    deletePrevTag,\n    deleteTag,\n    deleteSelected,\n    handleOptionSelect,\n    scrollToOption,\n    readonly,\n    resetInputHeight,\n    showClose,\n    iconComponent,\n    iconReverse,\n    showNewOption,\n    collapseTagSize,\n    setSelected,\n    managePlaceholder,\n    selectDisabled,\n    emptyText,\n    toggleLastOptionHitState,\n    resetInputState,\n    handleComposition,\n    onOptionCreate,\n    onOptionDestroy,\n    handleMenuEnter,\n    handleFocus,\n    blur,\n    handleBlur,\n    handleClearClick,\n    handleClose,\n    toggleMenu,\n    selectOption,\n    getValueKey,\n    navigateOptions,\n    dropMenuVisible,\n    queryChange,\n    groupQueryChange,\n\n    // DOM ref\n    reference,\n    input,\n    popper,\n    tags,\n    selectWrapper,\n    scrollbar,\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}