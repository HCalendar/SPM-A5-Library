{"ast":null,"code":"import { getCurrentInstance, onBeforeMount, onMounted, onUpdated, onUnmounted, computed } from 'vue';\nfunction useLayoutObserver(root) {\n  const instance = getCurrentInstance();\n  onBeforeMount(() => {\n    tableLayout.value.addObserver(instance);\n  });\n  onMounted(() => {\n    onColumnsChange(tableLayout.value);\n    onScrollableChange(tableLayout.value);\n  });\n  onUpdated(() => {\n    onColumnsChange(tableLayout.value);\n    onScrollableChange(tableLayout.value);\n  });\n  onUnmounted(() => {\n    tableLayout.value.removeObserver(instance);\n  });\n  const tableLayout = computed(() => {\n    const layout = root.layout;\n    if (!layout) {\n      throw new Error(\"Can not find table layout.\");\n    }\n    return layout;\n  });\n  const onColumnsChange = layout => {\n    var _a;\n    const cols = ((_a = root.vnode.el) == null ? void 0 : _a.querySelectorAll(\"colgroup > col\")) || [];\n    if (!cols.length) return;\n    const flattenColumns = layout.getFlattenColumns();\n    const columnsMap = {};\n    flattenColumns.forEach(column => {\n      columnsMap[column.id] = column;\n    });\n    for (let i = 0, j = cols.length; i < j; i++) {\n      const col = cols[i];\n      const name = col.getAttribute(\"name\");\n      const column = columnsMap[name];\n      if (column) {\n        col.setAttribute(\"width\", column.realWidth || column.width);\n      }\n    }\n  };\n  const onScrollableChange = layout => {\n    const cols = root.vnode.el.querySelectorAll(\"colgroup > col[name=gutter]\");\n    for (let i = 0, j = cols.length; i < j; i++) {\n      const col = cols[i];\n      col.setAttribute(\"width\", layout.scrollY.value ? layout.gutterWidth : \"0\");\n    }\n    const ths = root.vnode.el.querySelectorAll(\"th.gutter\");\n    for (let i = 0, j = ths.length; i < j; i++) {\n      const th = ths[i];\n      th.style.width = layout.scrollY.value ? `${layout.gutterWidth}px` : \"0\";\n      th.style.display = layout.scrollY.value ? \"\" : \"none\";\n    }\n  };\n  return {\n    tableLayout: tableLayout.value,\n    onColumnsChange,\n    onScrollableChange\n  };\n}\nexport { useLayoutObserver as default };","map":{"version":3,"names":["useLayoutObserver","root","instance","getCurrentInstance","onBeforeMount","tableLayout","value","addObserver","onMounted","onColumnsChange","onScrollableChange","onUpdated","onUnmounted","removeObserver","computed","layout","Error","_a","cols","vnode","el","querySelectorAll","length","flattenColumns","getFlattenColumns","columnsMap","forEach","column","id","i","j","col","name","getAttribute","setAttribute","realWidth","width","scrollY","gutterWidth","ths","th","style","display"],"sources":["../../../../../../packages/components/table/src/layout-observer.ts"],"sourcesContent":["import {\n  onBeforeMount,\n  onUnmounted,\n  onMounted,\n  onUpdated,\n  computed,\n  getCurrentInstance,\n} from 'vue'\n\nimport type { TableHeader } from './table-header'\nimport type TableLayout from './table-layout'\nimport type { Table } from './table/defaults'\n\nfunction useLayoutObserver<T>(root: Table<T>) {\n  const instance = getCurrentInstance() as TableHeader\n  onBeforeMount(() => {\n    tableLayout.value.addObserver(instance)\n  })\n  onMounted(() => {\n    onColumnsChange(tableLayout.value)\n    onScrollableChange(tableLayout.value)\n  })\n  onUpdated(() => {\n    onColumnsChange(tableLayout.value)\n    onScrollableChange(tableLayout.value)\n  })\n  onUnmounted(() => {\n    tableLayout.value.removeObserver(instance)\n  })\n  const tableLayout = computed(() => {\n    const layout = root.layout as TableLayout<T>\n    if (!layout) {\n      throw new Error('Can not find table layout.')\n    }\n    return layout\n  })\n  const onColumnsChange = (layout: TableLayout<T>) => {\n    const cols = root.vnode.el?.querySelectorAll('colgroup > col') || []\n    if (!cols.length) return\n    const flattenColumns = layout.getFlattenColumns()\n    const columnsMap = {}\n    flattenColumns.forEach((column) => {\n      columnsMap[column.id] = column\n    })\n    for (let i = 0, j = cols.length; i < j; i++) {\n      const col = cols[i]\n      const name = col.getAttribute('name')\n      const column = columnsMap[name]\n      if (column) {\n        col.setAttribute('width', column.realWidth || column.width)\n      }\n    }\n  }\n\n  const onScrollableChange = (layout: TableLayout<T>) => {\n    const cols = root.vnode.el.querySelectorAll('colgroup > col[name=gutter]')\n    for (let i = 0, j = cols.length; i < j; i++) {\n      const col = cols[i]\n      col.setAttribute('width', layout.scrollY.value ? layout.gutterWidth : '0')\n    }\n    const ths = root.vnode.el.querySelectorAll('th.gutter')\n    for (let i = 0, j = ths.length; i < j; i++) {\n      const th = ths[i]\n      th.style.width = layout.scrollY.value ? `${layout.gutterWidth}px` : '0'\n      th.style.display = layout.scrollY.value ? '' : 'none'\n    }\n  }\n\n  return {\n    tableLayout: tableLayout.value,\n    onColumnsChange,\n    onScrollableChange,\n  }\n}\n\nexport default useLayoutObserver\n"],"mappings":";AAaA,SAAAA,kBAA8BC,IAAA,EAAgB;EAC5C,MAAMC,QAAA,GAAWC,kBAAA;EACjBC,aAAA,CAAc,MAAM;IAClBC,WAAA,CAAYC,KAAA,CAAMC,WAAA,CAAYL,QAAA;EAAA;EAEhCM,SAAA,CAAU,MAAM;IACdC,eAAA,CAAgBJ,WAAA,CAAYC,KAAA;IAC5BI,kBAAA,CAAmBL,WAAA,CAAYC,KAAA;EAAA;EAEjCK,SAAA,CAAU,MAAM;IACdF,eAAA,CAAgBJ,WAAA,CAAYC,KAAA;IAC5BI,kBAAA,CAAmBL,WAAA,CAAYC,KAAA;EAAA;EAEjCM,WAAA,CAAY,MAAM;IAChBP,WAAA,CAAYC,KAAA,CAAMO,cAAA,CAAeX,QAAA;EAAA;EAEnC,MAAMG,WAAA,GAAcS,QAAA,CAAS,MAAM;IACjC,MAAMC,MAAA,GAASd,IAAA,CAAKc,MAAA;IACpB,IAAI,CAACA,MAAA,EAAQ;MACX,MAAM,IAAIC,KAAA,CAAM;IAAA;IAElB,OAAOD,MAAA;EAAA;EAET,MAAMN,eAAA,GAAmBM,MAAA,IAA2B;IApCtD,IAAAE,EAAA;IAqCI,MAAMC,IAAA,GAAO,EAAAD,EAAA,GAAAhB,IAAA,CAAKkB,KAAA,CAAMC,EAAA,KAAX,gBAAAH,EAAA,CAAeI,gBAAA,CAAiB,sBAAqB;IAClE,IAAI,CAACH,IAAA,CAAKI,MAAA,EAAQ;IAClB,MAAMC,cAAA,GAAiBR,MAAA,CAAOS,iBAAA;IAC9B,MAAMC,UAAA,GAAa;IACnBF,cAAA,CAAeG,OAAA,CAASC,MAAA,IAAW;MACjCF,UAAA,CAAWE,MAAA,CAAOC,EAAA,IAAMD,MAAA;IAAA;IAE1B,SAASE,CAAA,GAAI,GAAGC,CAAA,GAAIZ,IAAA,CAAKI,MAAA,EAAQO,CAAA,GAAIC,CAAA,EAAGD,CAAA,IAAK;MAC3C,MAAME,GAAA,GAAMb,IAAA,CAAKW,CAAA;MACjB,MAAMG,IAAA,GAAOD,GAAA,CAAIE,YAAA,CAAa;MAC9B,MAAMN,MAAA,GAASF,UAAA,CAAWO,IAAA;MAC1B,IAAIL,MAAA,EAAQ;QACVI,GAAA,CAAIG,YAAA,CAAa,SAASP,MAAA,CAAOQ,SAAA,IAAaR,MAAA,CAAOS,KAAA;MAAA;IAAA;EAAA;EAK3D,MAAM1B,kBAAA,GAAsBK,MAAA,IAA2B;IACrD,MAAMG,IAAA,GAAOjB,IAAA,CAAKkB,KAAA,CAAMC,EAAA,CAAGC,gBAAA,CAAiB;IAC5C,SAASQ,CAAA,GAAI,GAAGC,CAAA,GAAIZ,IAAA,CAAKI,MAAA,EAAQO,CAAA,GAAIC,CAAA,EAAGD,CAAA,IAAK;MAC3C,MAAME,GAAA,GAAMb,IAAA,CAAKW,CAAA;MACjBE,GAAA,CAAIG,YAAA,CAAa,SAASnB,MAAA,CAAOsB,OAAA,CAAQ/B,KAAA,GAAQS,MAAA,CAAOuB,WAAA,GAAc;IAAA;IAExE,MAAMC,GAAA,GAAMtC,IAAA,CAAKkB,KAAA,CAAMC,EAAA,CAAGC,gBAAA,CAAiB;IAC3C,SAASQ,CAAA,GAAI,GAAGC,CAAA,GAAIS,GAAA,CAAIjB,MAAA,EAAQO,CAAA,GAAIC,CAAA,EAAGD,CAAA,IAAK;MAC1C,MAAMW,EAAA,GAAKD,GAAA,CAAIV,CAAA;MACfW,EAAA,CAAGC,KAAA,CAAML,KAAA,GAAQrB,MAAA,CAAOsB,OAAA,CAAQ/B,KAAA,GAAQ,GAAGS,MAAA,CAAOuB,WAAA,OAAkB;MACpEE,EAAA,CAAGC,KAAA,CAAMC,OAAA,GAAU3B,MAAA,CAAOsB,OAAA,CAAQ/B,KAAA,GAAQ,KAAK;IAAA;EAAA;EAInD,OAAO;IACLD,WAAA,EAAaA,WAAA,CAAYC,KAAA;IACzBG,eAAA;IACAC;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}