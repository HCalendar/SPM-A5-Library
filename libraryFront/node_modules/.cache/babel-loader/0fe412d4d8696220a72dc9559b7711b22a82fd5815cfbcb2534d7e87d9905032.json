{"ast":null,"code":"import { resolveComponent, openBlock, createElementBlock, normalizeStyle, normalizeClass, createCommentVNode, createElementVNode, renderSlot, createBlock, withCtx, resolveDynamicComponent, toDisplayString, createTextVNode } from 'vue';\nconst _hoisted_1 = {\n  class: \"el-step__line\"\n};\nconst _hoisted_2 = {\n  key: 1,\n  class: \"el-step__icon-inner\"\n};\nconst _hoisted_3 = {\n  class: \"el-step__main\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"el-step__arrow\"\n};\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_check = resolveComponent(\"check\");\n  const _component_close = resolveComponent(\"close\");\n  return openBlock(), createElementBlock(\"div\", {\n    style: normalizeStyle(_ctx.style),\n    class: normalizeClass([\"el-step\", _ctx.isSimple ? \"is-simple\" : `is-${_ctx.parent.props.direction}`, _ctx.isLast && !_ctx.space && !_ctx.isCenter && \"is-flex\", _ctx.isCenter && !_ctx.isVertical && !_ctx.isSimple && \"is-center\"])\n  }, [createCommentVNode(\" icon & line \"), createElementVNode(\"div\", {\n    class: normalizeClass([\"el-step__head\", `is-${_ctx.currentStatus}`])\n  }, [createElementVNode(\"div\", _hoisted_1, [createElementVNode(\"i\", {\n    class: \"el-step__line-inner\",\n    style: normalizeStyle(_ctx.lineStyle)\n  }, null, 4)]), createElementVNode(\"div\", {\n    class: normalizeClass([\"el-step__icon\", `is-${_ctx.icon ? \"icon\" : \"text\"}`])\n  }, [_ctx.currentStatus !== \"success\" && _ctx.currentStatus !== \"error\" ? renderSlot(_ctx.$slots, \"icon\", {\n    key: 0\n  }, () => [_ctx.icon ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0,\n    class: \"el-step__icon-inner\"\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.icon)))]),\n    _: 1\n  })) : createCommentVNode(\"v-if\", true), !_ctx.icon && !_ctx.isSimple ? (openBlock(), createElementBlock(\"div\", _hoisted_2, toDisplayString(_ctx.index + 1), 1)) : createCommentVNode(\"v-if\", true)]) : (openBlock(), createBlock(_component_el_icon, {\n    key: 1,\n    class: \"el-step__icon-inner is-status\"\n  }, {\n    default: withCtx(() => [_ctx.currentStatus === \"success\" ? (openBlock(), createBlock(_component_check, {\n      key: 0\n    })) : (openBlock(), createBlock(_component_close, {\n      key: 1\n    }))]),\n    _: 1\n  }))], 2)], 2), createCommentVNode(\" title & description \"), createElementVNode(\"div\", _hoisted_3, [createElementVNode(\"div\", {\n    class: normalizeClass([\"el-step__title\", `is-${_ctx.currentStatus}`])\n  }, [renderSlot(_ctx.$slots, \"title\", {}, () => [createTextVNode(toDisplayString(_ctx.title), 1)])], 2), _ctx.isSimple ? (openBlock(), createElementBlock(\"div\", _hoisted_4)) : (openBlock(), createElementBlock(\"div\", {\n    key: 1,\n    class: normalizeClass([\"el-step__description\", `is-${_ctx.currentStatus}`])\n  }, [renderSlot(_ctx.$slots, \"description\", {}, () => [createTextVNode(toDisplayString(_ctx.description), 1)])], 2))])], 6);\n}\nexport { render };","map":{"version":3,"names":["class","createElementBlock","style","normalizeStyle","_ctx","normalizeClass","createCommentVNode","createElementVNode","currentStatus","_hoisted_1","lineStyle","icon","renderSlot","$slots","key","openBlock","createBlock","_component_el_icon","resolveDynamicComponent","isSimple","_hoisted_2","toDisplayString","index","_component_check","_component_close","_hoisted_3","title","_hoisted_4","description"],"sources":["../../../../../../packages/components/steps/src/item.vue?vue&type=template&id=6ec47f4b&lang.js"],"sourcesContent":["<template>\n  <div\n    :style=\"style\"\n    :class=\"[\n      'el-step',\n      isSimple ? 'is-simple' : `is-${parent.props.direction}`,\n      isLast && !space && !isCenter && 'is-flex',\n      isCenter && !isVertical && !isSimple && 'is-center',\n    ]\"\n  >\n    <!-- icon & line -->\n    <div :class=\"['el-step__head', `is-${currentStatus}`]\">\n      <div class=\"el-step__line\">\n        <i class=\"el-step__line-inner\" :style=\"lineStyle\"></i>\n      </div>\n\n      <div :class=\"['el-step__icon', `is-${icon ? 'icon' : 'text'}`]\">\n        <slot\n          v-if=\"currentStatus !== 'success' && currentStatus !== 'error'\"\n          name=\"icon\"\n        >\n          <el-icon v-if=\"icon\" class=\"el-step__icon-inner\">\n            <component :is=\"icon\" />\n          </el-icon>\n          <div v-if=\"!icon && !isSimple\" class=\"el-step__icon-inner\">\n            {{ index + 1 }}\n          </div>\n        </slot>\n        <el-icon v-else class=\"el-step__icon-inner is-status\">\n          <check v-if=\"currentStatus === 'success'\" />\n          <close v-else />\n        </el-icon>\n      </div>\n    </div>\n    <!-- title & description -->\n    <div class=\"el-step__main\">\n      <div :class=\"['el-step__title', `is-${currentStatus}`]\">\n        <slot name=\"title\">{{ title }}</slot>\n      </div>\n      <div v-if=\"isSimple\" class=\"el-step__arrow\"></div>\n      <div v-else :class=\"['el-step__description', `is-${currentStatus}`]\">\n        <slot name=\"description\">{{ description }}</slot>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  inject,\n  onBeforeUnmount,\n  onMounted,\n  ref,\n  reactive,\n  watch,\n} from 'vue'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { Close, Check } from '@element-plus/icons-vue'\n\nimport type { Ref, PropType, Component } from 'vue'\n\nexport interface IStepsProps {\n  space: number | string\n  active: number\n  direction: string\n  alignCenter: boolean\n  simple: boolean\n  finishStatus: string\n  processStatus: string\n}\n\nexport interface StepItemState {\n  uid: number\n  currentStatus: string\n  setIndex: (val: number) => void\n  calcProgress: (status: string) => void\n}\n\nexport interface IStepsInject {\n  props: IStepsProps\n  steps: Ref<StepItemState[]>\n}\n\nexport default defineComponent({\n  name: 'ElStep',\n  components: {\n    ElIcon,\n    Close,\n    Check,\n  },\n  props: {\n    title: {\n      type: String,\n      default: '',\n    },\n    icon: {\n      type: [String, Object] as PropType<string | Component>,\n      default: '',\n    },\n    description: {\n      type: String,\n      default: '',\n    },\n    status: {\n      type: String,\n      default: '',\n      validator: (val: string): boolean =>\n        ['', 'wait', 'process', 'finish', 'error', 'success'].includes(val),\n    },\n  },\n  setup(props) {\n    const index = ref(-1)\n    const lineStyle = ref({})\n    const internalStatus = ref('')\n    const parent: IStepsInject = inject('ElSteps')\n    const currentInstance = getCurrentInstance()\n\n    onMounted(() => {\n      watch(\n        [\n          () => parent.props.active,\n          () => parent.props.processStatus,\n          () => parent.props.finishStatus,\n        ],\n        ([active]) => {\n          updateStatus(active)\n        },\n        { immediate: true }\n      )\n    })\n\n    onBeforeUnmount(() => {\n      parent.steps.value = parent.steps.value.filter(\n        (instance) => instance.uid !== currentInstance.uid\n      )\n    })\n\n    const currentStatus = computed(() => {\n      return props.status || internalStatus.value\n    })\n    const prevStatus = computed(() => {\n      const prevStep = parent.steps.value[index.value - 1]\n      return prevStep ? prevStep.currentStatus : 'wait'\n    })\n    const isCenter = computed(() => {\n      return parent.props.alignCenter\n    })\n    const isVertical = computed(() => {\n      return parent.props.direction === 'vertical'\n    })\n    const isSimple = computed(() => {\n      return parent.props.simple\n    })\n    const stepsCount = computed(() => {\n      return parent.steps.value.length\n    })\n    const isLast = computed(() => {\n      return (\n        parent.steps.value[stepsCount.value - 1]?.uid === currentInstance.uid\n      )\n    })\n    const space = computed(() => {\n      return isSimple.value ? '' : parent.props.space\n    })\n    const style = computed(() => {\n      const style: Record<string, unknown> = {\n        flexBasis:\n          typeof space.value === 'number'\n            ? `${space.value}px`\n            : space.value\n            ? space.value\n            : `${100 / (stepsCount.value - (isCenter.value ? 0 : 1))}%`,\n      }\n      if (isVertical.value) return style\n      if (isLast.value) {\n        style.maxWidth = `${100 / stepsCount.value}%`\n      }\n      return style\n    })\n\n    const setIndex = (val) => {\n      index.value = val\n    }\n    const calcProgress = (status) => {\n      let step = 100\n      const style: Record<string, unknown> = {}\n\n      style.transitionDelay = `${150 * index.value}ms`\n      if (status === parent.props.processStatus) {\n        step = 0\n      } else if (status === 'wait') {\n        step = 0\n        style.transitionDelay = `${-150 * index.value}ms`\n      }\n      style.borderWidth = step && !isSimple.value ? '1px' : 0\n      style[\n        parent.props.direction === 'vertical' ? 'height' : 'width'\n      ] = `${step}%`\n      lineStyle.value = style\n    }\n    const updateStatus = (activeIndex) => {\n      if (activeIndex > index.value) {\n        internalStatus.value = parent.props.finishStatus\n      } else if (activeIndex === index.value && prevStatus.value !== 'error') {\n        internalStatus.value = parent.props.processStatus\n      } else {\n        internalStatus.value = 'wait'\n      }\n      const prevChild = parent.steps.value[stepsCount.value - 1]\n      if (prevChild) prevChild.calcProgress(internalStatus.value)\n    }\n\n    const stepItemState = reactive({\n      uid: computed(() => currentInstance.uid),\n      currentStatus,\n      setIndex,\n      calcProgress,\n    })\n    parent.steps.value = [...parent.steps.value, stepItemState]\n\n    return {\n      index,\n      lineStyle,\n      currentStatus,\n      isCenter,\n      isVertical,\n      isSimple,\n      isLast,\n      space,\n      style,\n      parent,\n      setIndex,\n      calcProgress,\n      updateStatus,\n    }\n  },\n})\n</script>\n"],"mappings":";;EAYWA,KAAA,EAAM;AAAA;;;EAYwBA,KAAA,EAAM;AAAA;;EAWtCA,KAAA,EAAM;AAAA;;;EAIYA,KAAA,EAAM;AAAA;;;;;sBAtC/BC,kBAAA;IACGC,KAAA,EAAAC,cAAA,CAAOC,IAAA,CAAAF,KAAA;IACPF,KAAA,EAAAK,cAAA,E;MAODC,kBAAA,mBACAC,kBAAA;IAAMP,KAAA,EAAAK,cAAA,yBAA+BD,IAAA,CAAAI,aAAA;MACnCD,kBAAA,QAAAE,UAAA,GACEF,kBAAA;IAAGP,KAAA,EAAM;IAAuBE,KAAA,EAAAC,cAAA,CAAOC,IAAA,CAAAM,SAAA;iBAGzCH,kBAAA;IAAMP,KAAA,EAAAK,cAAA,yBAA+BD,IAAA,CAAAO,IAAA;MAE3BP,IAAA,CAAAI,aAAA,kBAA+BJ,IAAA,CAAAI,aAAA,eADvCI,UAAA,CAAAR,IAAA,CAAAS,MAAA;IAAAC,GAAA;EAAA,UAIiBV,IAAA,CAAAO,IAAA,IAAAI,SAAA,IAAfC,WAAA,CAAAC,kBAAA;;IAAqBjB,KAAA,EAAM;EAAA;qBACzB,Q,aAAAgB,WAAA,CAAAE,uBAAA,CAAgBd,IAAA,CAAAO,IAAA,I;;2CAENP,IAAA,CAAAO,IAAA,KAASP,IAAA,CAAAe,QAAA,IAAAJ,SAAA,IAArBd,kBAAA,QAAAmB,UAAA,EAAAC,eAAA,CACKjB,IAAA,CAAAkB,KAAA,aAAAhB,kBAAA,e,kBAGPU,WAAA,CAAAC,kBAAA;;IAAgBjB,KAAA,EAAM;EAAA;qBACpB,OAAaI,IAAA,CAAAI,aAAA,kBAAAO,SAAA,IAAbC,WAAA,CAAAO,gBAAA;MAAAT,GAAA;IAAA,OAAAC,SAAA,IACAC,WAAA,CAAAQ,gBAAA;MAAAV,GAAA;IAAA,I;;iBAINR,kBAAA,2BACAC,kBAAA,QAAAkB,UAAA,GACElB,kBAAA;IAAMP,KAAA,EAAAK,cAAA,0BAAgCD,IAAA,CAAAI,aAAA;MACpCI,UAAA,CAAAR,IAAA,CAAAS,MAAA,sB,gCAAsBT,IAAA,CAAAsB,KAAA,M,QAEbtB,IAAA,CAAAe,QAAA,IAAAJ,SAAA,IAAXd,kBAAA,QAAA0B,UAAA,MAAAZ,SAAA,IACAd,kBAAA;;IAAaD,KAAA,EAAAK,cAAA,gCAAsCD,IAAA,CAAAI,aAAA;MACjDI,UAAA,CAAAR,IAAA,CAAAS,MAAA,4B,gCAA4BT,IAAA,CAAAwB,WAAA,M","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}