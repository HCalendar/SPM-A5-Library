{"ast":null,"code":"import { openBlock, createElementBlock, mergeProps, renderSlot } from 'vue';\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"i\", mergeProps({\n    class: \"el-icon\",\n    style: _ctx.style\n  }, _ctx.$attrs), [renderSlot(_ctx.$slots, \"default\")], 16);\n}\nexport { render };","map":{"version":3,"names":["createElementBlock","mergeProps","class","style","_ctx","$attrs","renderSlot","$slots"],"sources":["../../../../../../packages/components/icon/src/icon.vue?vue&type=template&id=89b755b6&lang.js"],"sourcesContent":["<template>\n  <i class=\"el-icon\" :style=\"style\" v-bind=\"$attrs\">\n    <slot></slot>\n  </i>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed } from 'vue'\nimport { isNumber, isString } from '@element-plus/utils/util'\nimport { iconProps } from './icon'\n\nimport type { CSSProperties } from 'vue'\n\nexport default defineComponent({\n  name: 'ElIcon',\n  inheritAttrs: false,\n\n  props: iconProps,\n\n  setup(props) {\n    return {\n      style: computed<CSSProperties>(() => {\n        if (!props.size && !props.color) {\n          return {}\n        }\n        let size = props.size\n        if (isNumber(size) || (isString(size) && !size.endsWith('px'))) {\n          size = `${size}px`\n        }\n        return {\n          ...(props.size ? { '--font-size': size } : {}),\n          ...(props.color ? { '--color': props.color } : {}),\n        } as CSSProperties\n      }),\n    }\n  },\n})\n</script>\n"],"mappings":";;sBACEA,kBAAA,MAAAC,UAAA;IAAGC,KAAA,EAAM;IAAWC,KAAA,EAAOC,IAAA,CAAAD;KAAeC,IAAA,CAAAC,MAAA,IACxCC,UAAA,CAAAF,IAAA,CAAAG,MAAA,a","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}