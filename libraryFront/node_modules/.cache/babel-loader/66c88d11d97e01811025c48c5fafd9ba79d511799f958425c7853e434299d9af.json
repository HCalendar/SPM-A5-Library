{"ast":null,"code":"import { resolveComponent, openBlock, createElementBlock, createElementVNode, normalizeClass, normalizeStyle, createBlock, resolveDynamicComponent, withCtx, renderSlot, Fragment, createVNode, createCommentVNode } from 'vue';\nconst _hoisted_1 = {\n  ref: \"scrollbar$\",\n  class: \"el-scrollbar\"\n};\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_bar = resolveComponent(\"bar\");\n  return openBlock(), createElementBlock(\"div\", _hoisted_1, [createElementVNode(\"div\", {\n    ref: \"wrap$\",\n    class: normalizeClass([_ctx.wrapClass, \"el-scrollbar__wrap\", _ctx.native ? \"\" : \"el-scrollbar__wrap--hidden-default\"]),\n    style: normalizeStyle(_ctx.style),\n    onScroll: _cache[0] || (_cache[0] = (...args) => _ctx.handleScroll && _ctx.handleScroll(...args))\n  }, [(openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {\n    ref: \"resize$\",\n    class: normalizeClass([\"el-scrollbar__view\", _ctx.viewClass]),\n    style: normalizeStyle(_ctx.viewStyle)\n  }, {\n    default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n    _: 3\n  }, 8, [\"class\", \"style\"]))], 38), !_ctx.native ? (openBlock(), createElementBlock(Fragment, {\n    key: 0\n  }, [createVNode(_component_bar, {\n    move: _ctx.moveX,\n    ratio: _ctx.ratioX,\n    size: _ctx.sizeWidth,\n    always: _ctx.always\n  }, null, 8, [\"move\", \"ratio\", \"size\", \"always\"]), createVNode(_component_bar, {\n    move: _ctx.moveY,\n    ratio: _ctx.ratioY,\n    size: _ctx.sizeHeight,\n    vertical: \"\",\n    always: _ctx.always\n  }, null, 8, [\"move\", \"ratio\", \"size\", \"always\"])], 64)) : createCommentVNode(\"v-if\", true)], 512);\n}\nexport { render };","map":{"version":3,"names":["ref","class","createElementBlock","_hoisted_1","createElementVNode","normalizeClass","style","normalizeStyle","_ctx","onScroll","_cache","args","handleScroll","createBlock","resolveDynamicComponent","tag","viewClass","viewStyle","renderSlot","$slots","native","openBlock","Fragment","key","createVNode","_component_bar","move","moveX","ratio","ratioX","size","sizeWidth","always","moveY","ratioY","sizeHeight","vertical"],"sources":["../../../../../../packages/components/scrollbar/src/scrollbar.vue?vue&type=template&id=303f965d&lang.js"],"sourcesContent":["<template>\n  <div ref=\"scrollbar$\" class=\"el-scrollbar\">\n    <div\n      ref=\"wrap$\"\n      :class=\"[\n        wrapClass,\n        'el-scrollbar__wrap',\n        native ? '' : 'el-scrollbar__wrap--hidden-default',\n      ]\"\n      :style=\"style\"\n      @scroll=\"handleScroll\"\n    >\n      <component\n        :is=\"tag\"\n        ref=\"resize$\"\n        :class=\"['el-scrollbar__view', viewClass]\"\n        :style=\"viewStyle\"\n      >\n        <slot />\n      </component>\n    </div>\n    <template v-if=\"!native\">\n      <bar :move=\"moveX\" :ratio=\"ratioX\" :size=\"sizeWidth\" :always=\"always\" />\n      <bar\n        :move=\"moveY\"\n        :ratio=\"ratioY\"\n        :size=\"sizeHeight\"\n        vertical\n        :always=\"always\"\n      />\n    </template>\n  </div>\n</template>\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  nextTick,\n  onMounted,\n  provide,\n  ref,\n  watch,\n  reactive,\n} from 'vue'\nimport { useResizeObserver, useEventListener } from '@vueuse/core'\nimport { addUnit, isNumber } from '@element-plus/utils/util'\nimport { debugWarn } from '@element-plus/utils/error'\nimport { scrollbarContextKey } from '@element-plus/tokens'\nimport Bar from './bar.vue'\n\nimport { scrollbarProps, scrollbarEmits } from './scrollbar'\nimport type { StyleValue, CSSProperties } from 'vue'\n\nexport default defineComponent({\n  name: 'ElScrollbar',\n  components: {\n    Bar,\n  },\n  props: scrollbarProps,\n  emits: scrollbarEmits,\n\n  setup(props, { emit }) {\n    let stopResizeObserver: (() => void) | undefined = undefined\n    let stopResizeListener: (() => void) | undefined = undefined\n\n    const scrollbar$ = ref<HTMLDivElement>()\n    const wrap$ = ref<HTMLDivElement>()\n    const resize$ = ref<HTMLElement>()\n\n    const sizeWidth = ref('0')\n    const sizeHeight = ref('0')\n    const moveX = ref(0)\n    const moveY = ref(0)\n    const ratioY = ref(1)\n    const ratioX = ref(1)\n    const SCOPE = 'ElScrollbar'\n    const GAP = 4 // top 2 + bottom 2 of bar instance\n\n    const style = computed<StyleValue>(() => {\n      const style: CSSProperties = {}\n      if (props.height) style.height = addUnit(props.height)\n      if (props.maxHeight) style.maxHeight = addUnit(props.maxHeight)\n      return [props.wrapStyle, style]\n    })\n\n    const handleScroll = () => {\n      if (wrap$.value) {\n        const offsetHeight = wrap$.value.offsetHeight - GAP\n        const offsetWidth = wrap$.value.offsetWidth - GAP\n\n        moveY.value =\n          ((wrap$.value.scrollTop * 100) / offsetHeight) * ratioY.value\n        moveX.value =\n          ((wrap$.value.scrollLeft * 100) / offsetWidth) * ratioX.value\n\n        emit('scroll', {\n          scrollTop: wrap$.value.scrollTop,\n          scrollLeft: wrap$.value.scrollLeft,\n        })\n      }\n    }\n\n    const setScrollTop = (value: number) => {\n      if (!isNumber(value)) {\n        debugWarn(SCOPE, 'value must be a number')\n        return\n      }\n      wrap$.value!.scrollTop = value\n    }\n\n    const setScrollLeft = (value: number) => {\n      if (!isNumber(value)) {\n        debugWarn(SCOPE, 'value must be a number')\n        return\n      }\n      wrap$.value!.scrollLeft = value\n    }\n\n    const update = () => {\n      if (!wrap$.value) return\n\n      const offsetHeight = wrap$.value.offsetHeight - GAP\n      const offsetWidth = wrap$.value.offsetWidth - GAP\n\n      const originalHeight = offsetHeight ** 2 / wrap$.value.scrollHeight\n      const originalWidth = offsetWidth ** 2 / wrap$.value.scrollWidth\n      const height = Math.max(originalHeight, props.minSize)\n      const width = Math.max(originalWidth, props.minSize)\n\n      ratioY.value =\n        originalHeight /\n        (offsetHeight - originalHeight) /\n        (height / (offsetHeight - height))\n      ratioX.value =\n        originalWidth /\n        (offsetWidth - originalWidth) /\n        (width / (offsetWidth - width))\n\n      sizeHeight.value = height + GAP < offsetHeight ? `${height}px` : ''\n      sizeWidth.value = width + GAP < offsetWidth ? `${width}px` : ''\n    }\n\n    watch(\n      () => props.noresize,\n      (noresize) => {\n        if (noresize) {\n          stopResizeObserver?.()\n          stopResizeListener?.()\n        } else {\n          ;({ stop: stopResizeObserver } = useResizeObserver(resize$, update))\n          stopResizeListener = useEventListener('resize', update)\n        }\n      },\n      { immediate: true }\n    )\n\n    provide(\n      scrollbarContextKey,\n      reactive({\n        scrollbarElement: scrollbar$,\n        wrapElement: wrap$,\n      })\n    )\n\n    onMounted(() => {\n      if (!props.native) nextTick(() => update())\n    })\n\n    return {\n      scrollbar$,\n      wrap$,\n      resize$,\n\n      moveX,\n      moveY,\n      ratioX,\n      ratioY,\n      sizeWidth,\n      sizeHeight,\n      style,\n      update,\n      handleScroll,\n      setScrollTop,\n      setScrollLeft,\n    }\n  },\n})\n</script>\n"],"mappings":";;EACOA,GAAA,EAAI;EAAaC,KAAA,EAAM;AAAA;;;sBAA5BC,kBAAA,QAAAC,UAAA,GACEC,kBAAA;IACEJ,GAAA,EAAI;IACHC,KAAA,EAAAI,cAAA,E;IAKAC,KAAA,EAAAC,cAAA,CAAOC,IAAA,CAAAF,KAAA;IACPG,QAAA,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAQH,IAAA,CAAAI,YAAA,IAAAJ,IAAA,CAAAI,YAAA,IAAAD,IAAA;oBAETE,WAAA,CAAAC,uBAAA,CACON,IAAA,CAAAO,GAAA;IACLf,GAAA,EAAI;IACHC,KAAA,EAAAI,cAAA,wBAA8BG,IAAA,CAAAQ,SAAA;IAC9BV,KAAA,EAAAC,cAAA,CAAOC,IAAA,CAAAS,SAAA;;qBAER,OAAAC,UAAA,CAAAV,IAAA,CAAAW,MAAA,a;;qCAGaX,IAAA,CAAAY,MAAA,IAAAC,SAAA,IAAjBnB,kBAAA,CAAAoB,QAAA;IAAAC,GAAA;EAAA,IACEC,WAAA,CAAAC,cAAA;IAAMC,IAAA,EAAMlB,IAAA,CAAAmB,KAAA;IAAQC,KAAA,EAAOpB,IAAA,CAAAqB,MAAA;IAASC,IAAA,EAAMtB,IAAA,CAAAuB,SAAA;IAAYC,MAAA,EAAQxB,IAAA,CAAAwB;oDAC9DR,WAAA,CAAAC,cAAA;IACGC,IAAA,EAAMlB,IAAA,CAAAyB,KAAA;IACNL,KAAA,EAAOpB,IAAA,CAAA0B,MAAA;IACPJ,IAAA,EAAMtB,IAAA,CAAA2B,UAAA;IACPC,QAAA;IACCJ,MAAA,EAAQxB,IAAA,CAAAwB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}