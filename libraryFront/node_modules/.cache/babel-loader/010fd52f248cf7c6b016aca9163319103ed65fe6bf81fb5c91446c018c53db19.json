{"ast":null,"code":"import { openBlock, createElementBlock, renderSlot, createVNode, Transition, withCtx, withDirectives, createElementVNode, normalizeClass, toDisplayString, vShow } from 'vue';\nconst _hoisted_1 = {\n  class: \"el-badge\"\n};\nconst _hoisted_2 = [\"textContent\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", _hoisted_1, [renderSlot(_ctx.$slots, \"default\"), createVNode(Transition, {\n    name: \"el-zoom-in-center\"\n  }, {\n    default: withCtx(() => [withDirectives(createElementVNode(\"sup\", {\n      class: normalizeClass([\"el-badge__content\", [\"el-badge__content--\" + _ctx.type, {\n        \"is-fixed\": _ctx.$slots.default,\n        \"is-dot\": _ctx.isDot\n      }]]),\n      textContent: toDisplayString(_ctx.content)\n    }, null, 10, _hoisted_2), [[vShow, !_ctx.hidden && (_ctx.content || _ctx.content === \"0\" || _ctx.isDot)]])]),\n    _: 1\n  })]);\n}\nexport { render };","map":{"version":3,"names":["class","createElementBlock","_hoisted_1","renderSlot","_ctx","$slots","createVNode","Transition","name","createElementVNode","normalizeClass","toDisplayString","content","hidden","isDot"],"sources":["../../../../../../packages/components/badge/src/badge.vue?vue&type=template&id=020a5517&lang.js"],"sourcesContent":["<template>\n  <div class=\"el-badge\">\n    <slot></slot>\n    <transition name=\"el-zoom-in-center\">\n      <sup\n        v-show=\"!hidden && (content || content === '0' || isDot)\"\n        class=\"el-badge__content\"\n        :class=\"[\n          'el-badge__content--' + type,\n          {\n            'is-fixed': $slots.default,\n            'is-dot': isDot,\n          },\n        ]\"\n        v-text=\"content\"\n      >\n      </sup>\n    </transition>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent } from 'vue'\nimport { badgeProps } from './badge'\n\nexport default defineComponent({\n  name: 'ElBadge',\n\n  props: badgeProps,\n\n  setup(props) {\n    const content = computed<string>(() => {\n      if (props.isDot) return ''\n\n      if (typeof props.value === 'number' && typeof props.max === 'number') {\n        return props.max < props.value ? `${props.max}+` : `${props.value}`\n      }\n      return `${props.value}`\n    })\n\n    return {\n      content,\n    }\n  },\n})\n</script>\n"],"mappings":";;EACOA,KAAA,EAAM;AAAA;;;sBAAXC,kBAAA,QAAAC,UAAA,GACEC,UAAA,CAAAC,IAAA,CAAAC,MAAA,cACAC,WAAA,CAAAC,UAAA;IAAYC,IAAA,EAAK;EAAA;qBACf,O,eAAAC,kBAAA;MAEET,KAAA,EAAAU,cAAA,EAAM,sB;;;;mBAQNC,eAAA,CAAQP,IAAA,CAAAQ,OAAA;wCATCR,IAAA,CAAAS,MAAA,KAAAT,IAAA,CAAAQ,OAAA,IAAsBR,IAAA,CAAAQ,OAAA,YAAmBR,IAAA,CAAAU,KAAA,G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}