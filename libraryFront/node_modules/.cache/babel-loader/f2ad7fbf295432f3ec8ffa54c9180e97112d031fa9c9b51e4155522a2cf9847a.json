{"ast":null,"code":"import { nextTick } from 'vue';\nimport { isString } from '@vue/shared';\nimport { isClient } from '@vueuse/core';\nimport { getStyle, addClass, removeClass } from '../../../utils/dom.mjs';\nimport PopupManager from '../../../utils/popup-manager.mjs';\nimport { createLoadingComponent } from './loading.mjs';\nlet fullscreenInstance = void 0;\nconst Loading = function (options = {}) {\n  if (!isClient) return void 0;\n  const resolved = resolveOptions(options);\n  if (resolved.fullscreen && fullscreenInstance) {\n    fullscreenInstance.close();\n  }\n  const instance = createLoadingComponent({\n    ...resolved,\n    closed: () => {\n      var _a;\n      (_a = resolved.closed) == null ? void 0 : _a.call(resolved);\n      if (resolved.fullscreen) fullscreenInstance = void 0;\n    }\n  });\n  addStyle(resolved, resolved.parent, instance);\n  addClassList(resolved, resolved.parent, instance);\n  resolved.parent.vLoadingAddClassList = () => addClassList(resolved, resolved.parent, instance);\n  let loadingNumber = resolved.parent.getAttribute(\"loading-number\");\n  if (!loadingNumber) {\n    loadingNumber = \"1\";\n  } else {\n    loadingNumber = `${Number.parseInt(loadingNumber) + 1}`;\n  }\n  resolved.parent.setAttribute(\"loading-number\", loadingNumber);\n  resolved.parent.appendChild(instance.$el);\n  nextTick(() => instance.visible.value = resolved.visible);\n  if (resolved.fullscreen) {\n    fullscreenInstance = instance;\n  }\n  return instance;\n};\nconst resolveOptions = options => {\n  var _a, _b, _c, _d;\n  let target;\n  if (isString(options.target)) {\n    target = (_a = document.querySelector(options.target)) != null ? _a : document.body;\n  } else {\n    target = options.target || document.body;\n  }\n  return {\n    parent: target === document.body || options.body ? document.body : target,\n    background: options.background || \"\",\n    svg: options.svg || \"\",\n    svgViewBox: options.svgViewBox || \"\",\n    spinner: options.spinner || false,\n    text: options.text || \"\",\n    fullscreen: target === document.body && ((_b = options.fullscreen) != null ? _b : true),\n    lock: (_c = options.lock) != null ? _c : false,\n    customClass: options.customClass || \"\",\n    visible: (_d = options.visible) != null ? _d : true,\n    target\n  };\n};\nconst addStyle = async (options, parent, instance) => {\n  const maskStyle = {};\n  if (options.fullscreen) {\n    instance.originalPosition.value = getStyle(document.body, \"position\");\n    instance.originalOverflow.value = getStyle(document.body, \"overflow\");\n    maskStyle.zIndex = PopupManager.nextZIndex();\n  } else if (options.parent === document.body) {\n    instance.originalPosition.value = getStyle(document.body, \"position\");\n    await nextTick();\n    for (const property of [\"top\", \"left\"]) {\n      const scroll = property === \"top\" ? \"scrollTop\" : \"scrollLeft\";\n      maskStyle[property] = `${options.target.getBoundingClientRect()[property] + document.body[scroll] + document.documentElement[scroll] - parseInt(getStyle(document.body, `margin-${property}`), 10)}px`;\n    }\n    for (const property of [\"height\", \"width\"]) {\n      maskStyle[property] = `${options.target.getBoundingClientRect()[property]}px`;\n    }\n  } else {\n    instance.originalPosition.value = getStyle(parent, \"position\");\n  }\n  for (const [key, value] of Object.entries(maskStyle)) {\n    instance.$el.style[key] = value;\n  }\n};\nconst addClassList = (options, parent, instance) => {\n  if (instance.originalPosition.value !== \"absolute\" && instance.originalPosition.value !== \"fixed\") {\n    addClass(parent, \"el-loading-parent--relative\");\n  } else {\n    removeClass(parent, \"el-loading-parent--relative\");\n  }\n  if (options.fullscreen && options.lock) {\n    addClass(parent, \"el-loading-parent--hidden\");\n  } else {\n    removeClass(parent, \"el-loading-parent--hidden\");\n  }\n};\nexport { Loading };","map":{"version":3,"names":["fullscreenInstance","Loading","options","isClient","resolved","resolveOptions","fullscreen","close","instance","createLoadingComponent","closed","_a","call","addStyle","parent","addClassList","vLoadingAddClassList","loadingNumber","getAttribute","Number","parseInt","setAttribute","appendChild","$el","nextTick","visible","value","_b","_c","_d","target","isString","document","querySelector","body","background","svg","svgViewBox","spinner","text","lock","customClass","maskStyle","originalPosition","getStyle","originalOverflow","zIndex","PopupManager","nextZIndex","property","scroll","getBoundingClientRect","documentElement","key","Object","entries","style","addClass","removeClass"],"sources":["../../../../../../packages/components/loading/src/service.ts"],"sourcesContent":["import { nextTick } from 'vue'\nimport { isString } from '@vue/shared'\nimport { isClient } from '@vueuse/core'\nimport { addClass, getStyle, removeClass } from '@element-plus/utils/dom'\nimport PopupManager from '@element-plus/utils/popup-manager'\nimport { createLoadingComponent } from './loading'\nimport type { LoadingInstance } from './loading'\nimport type { LoadingOptionsResolved } from '..'\nimport type { LoadingOptions } from './types'\nimport type { CSSProperties } from 'vue'\n\nlet fullscreenInstance: LoadingInstance | undefined = undefined\n\nexport const Loading = function (\n  options: LoadingOptions = {}\n): LoadingInstance {\n  if (!isClient) return undefined as any\n\n  const resolved = resolveOptions(options)\n\n  if (resolved.fullscreen && fullscreenInstance) {\n    fullscreenInstance.close()\n  }\n\n  const instance = createLoadingComponent({\n    ...resolved,\n    closed: () => {\n      resolved.closed?.()\n      if (resolved.fullscreen) fullscreenInstance = undefined\n    },\n  })\n\n  addStyle(resolved, resolved.parent, instance)\n  addClassList(resolved, resolved.parent, instance)\n\n  resolved.parent.vLoadingAddClassList = () =>\n    addClassList(resolved, resolved.parent, instance)\n\n  /**\n   * add loading-number to parent.\n   * because if a fullscreen loading is triggered when somewhere\n   * a v-loading.body was triggered before and it's parent is\n   * document.body which with a margin , the fullscreen loading's\n   * destroySelf function will remove 'el-loading-parent--relative',\n   * and then the position of v-loading.body will be error.\n   */\n  let loadingNumber: string | null =\n    resolved.parent.getAttribute('loading-number')\n  if (!loadingNumber) {\n    loadingNumber = '1'\n  } else {\n    loadingNumber = `${Number.parseInt(loadingNumber) + 1}`\n  }\n  resolved.parent.setAttribute('loading-number', loadingNumber)\n\n  resolved.parent.appendChild(instance.$el)\n\n  // after instance render, then modify visible to trigger transition\n  nextTick(() => (instance.visible.value = resolved.visible))\n\n  if (resolved.fullscreen) {\n    fullscreenInstance = instance\n  }\n  return instance\n}\n\nconst resolveOptions = (options: LoadingOptions): LoadingOptionsResolved => {\n  let target: HTMLElement\n  if (isString(options.target)) {\n    target =\n      document.querySelector<HTMLElement>(options.target) ?? document.body\n  } else {\n    target = options.target || document.body\n  }\n  return {\n    parent: target === document.body || options.body ? document.body : target,\n    background: options.background || '',\n    svg: options.svg || '',\n    svgViewBox: options.svgViewBox || '',\n    spinner: options.spinner || false,\n    text: options.text || '',\n    fullscreen: target === document.body && (options.fullscreen ?? true),\n    lock: options.lock ?? false,\n    customClass: options.customClass || '',\n    visible: options.visible ?? true,\n    target,\n  }\n}\n\nconst addStyle = async (\n  options: LoadingOptionsResolved,\n  parent: HTMLElement,\n  instance: LoadingInstance\n) => {\n  const maskStyle: CSSProperties = {}\n  if (options.fullscreen) {\n    instance.originalPosition.value = getStyle(document.body, 'position')\n    instance.originalOverflow.value = getStyle(document.body, 'overflow')\n    maskStyle.zIndex = PopupManager.nextZIndex()\n  } else if (options.parent === document.body) {\n    instance.originalPosition.value = getStyle(document.body, 'position')\n    /**\n     * await dom render when visible is true in init,\n     * because some component's height maybe 0.\n     * e.g. el-table.\n     */\n    await nextTick()\n    for (const property of ['top', 'left']) {\n      const scroll = property === 'top' ? 'scrollTop' : 'scrollLeft'\n      maskStyle[property] = `${\n        (options.target as HTMLElement).getBoundingClientRect()[property] +\n        document.body[scroll] +\n        document.documentElement[scroll] -\n        parseInt(getStyle(document.body, `margin-${property}`), 10)\n      }px`\n    }\n    for (const property of ['height', 'width']) {\n      maskStyle[property] = `${\n        (options.target as HTMLElement).getBoundingClientRect()[property]\n      }px`\n    }\n  } else {\n    instance.originalPosition.value = getStyle(parent, 'position')\n  }\n  for (const [key, value] of Object.entries(maskStyle)) {\n    instance.$el.style[key] = value\n  }\n}\n\nconst addClassList = (\n  options: LoadingOptions,\n  parent: HTMLElement,\n  instance: LoadingInstance\n) => {\n  if (\n    instance.originalPosition.value !== 'absolute' &&\n    instance.originalPosition.value !== 'fixed'\n  ) {\n    addClass(parent, 'el-loading-parent--relative')\n  } else {\n    removeClass(parent, 'el-loading-parent--relative')\n  }\n  if (options.fullscreen && options.lock) {\n    addClass(parent, 'el-loading-parent--hidden')\n  } else {\n    removeClass(parent, 'el-loading-parent--hidden')\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}