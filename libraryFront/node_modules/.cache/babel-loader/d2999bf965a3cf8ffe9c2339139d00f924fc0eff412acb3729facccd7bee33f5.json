{"ast":null,"code":"import { resolveComponent, resolveDirective, openBlock, createBlock, withCtx, withDirectives, createElementVNode, createVNode, createCommentVNode, withKeys, createTextVNode, toDisplayString, normalizeClass, createElementBlock, normalizeStyle, vShow } from 'vue';\nconst _hoisted_1 = {\n  class: \"el-color-dropdown__main-wrapper\"\n};\nconst _hoisted_2 = {\n  class: \"el-color-dropdown__btns\"\n};\nconst _hoisted_3 = {\n  class: \"el-color-dropdown__value\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"el-color-picker__mask\"\n};\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_hue_slider = resolveComponent(\"hue-slider\");\n  const _component_sv_panel = resolveComponent(\"sv-panel\");\n  const _component_alpha_slider = resolveComponent(\"alpha-slider\");\n  const _component_predefine = resolveComponent(\"predefine\");\n  const _component_el_input = resolveComponent(\"el-input\");\n  const _component_el_button = resolveComponent(\"el-button\");\n  const _component_close = resolveComponent(\"close\");\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_arrow_down = resolveComponent(\"arrow-down\");\n  const _component_el_popper = resolveComponent(\"el-popper\");\n  const _directive_click_outside = resolveDirective(\"click-outside\");\n  return openBlock(), createBlock(_component_el_popper, {\n    ref: \"popper\",\n    visible: _ctx.showPicker,\n    \"onUpdate:visible\": _cache[2] || (_cache[2] = $event => _ctx.showPicker = $event),\n    effect: _ctx.Effect.LIGHT,\n    \"manual-mode\": \"\",\n    trigger: \"click\",\n    \"show-arrow\": false,\n    \"fallback-placements\": [\"bottom\", \"top\", \"right\", \"left\"],\n    offset: 0,\n    transition: \"el-zoom-in-top\",\n    \"gpu-acceleration\": false,\n    \"popper-class\": `el-color-picker__panel el-color-dropdown ${_ctx.popperClass}`,\n    \"stop-popper-mouse-event\": false\n  }, {\n    default: withCtx(() => [withDirectives(createElementVNode(\"div\", null, [createElementVNode(\"div\", _hoisted_1, [createVNode(_component_hue_slider, {\n      ref: \"hue\",\n      class: \"hue-slider\",\n      color: _ctx.color,\n      vertical: \"\"\n    }, null, 8, [\"color\"]), createVNode(_component_sv_panel, {\n      ref: \"svPanel\",\n      color: _ctx.color\n    }, null, 8, [\"color\"])]), _ctx.showAlpha ? (openBlock(), createBlock(_component_alpha_slider, {\n      key: 0,\n      ref: \"alpha\",\n      color: _ctx.color\n    }, null, 8, [\"color\"])) : createCommentVNode(\"v-if\", true), _ctx.predefine ? (openBlock(), createBlock(_component_predefine, {\n      key: 1,\n      ref: \"predefine\",\n      color: _ctx.color,\n      colors: _ctx.predefine\n    }, null, 8, [\"color\", \"colors\"])) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", _hoisted_2, [createElementVNode(\"span\", _hoisted_3, [createVNode(_component_el_input, {\n      modelValue: _ctx.customInput,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.customInput = $event),\n      \"validate-event\": false,\n      size: \"mini\",\n      onKeyup: withKeys(_ctx.handleConfirm, [\"enter\"]),\n      onBlur: _ctx.handleConfirm\n    }, null, 8, [\"modelValue\", \"onKeyup\", \"onBlur\"])]), createVNode(_component_el_button, {\n      size: \"mini\",\n      type: \"text\",\n      class: \"el-color-dropdown__link-btn\",\n      onClick: _ctx.clear\n    }, {\n      default: withCtx(() => [createTextVNode(toDisplayString(_ctx.t(\"el.colorpicker.clear\")), 1)]),\n      _: 1\n    }, 8, [\"onClick\"]), createVNode(_component_el_button, {\n      plain: \"\",\n      size: \"mini\",\n      class: \"el-color-dropdown__btn\",\n      onClick: _ctx.confirmValue\n    }, {\n      default: withCtx(() => [createTextVNode(toDisplayString(_ctx.t(\"el.colorpicker.confirm\")), 1)]),\n      _: 1\n    }, 8, [\"onClick\"])])], 512), [[_directive_click_outside, _ctx.hide]])]),\n    trigger: withCtx(() => [createElementVNode(\"div\", {\n      class: normalizeClass([\"el-color-picker\", _ctx.colorDisabled ? \"is-disabled\" : \"\", _ctx.colorSize ? `el-color-picker--${_ctx.colorSize}` : \"\"])\n    }, [_ctx.colorDisabled ? (openBlock(), createElementBlock(\"div\", _hoisted_4)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n      class: \"el-color-picker__trigger\",\n      onClick: _cache[1] || (_cache[1] = (...args) => _ctx.handleTrigger && _ctx.handleTrigger(...args))\n    }, [createElementVNode(\"span\", {\n      class: normalizeClass([\"el-color-picker__color\", {\n        \"is-alpha\": _ctx.showAlpha\n      }])\n    }, [createElementVNode(\"span\", {\n      class: \"el-color-picker__color-inner\",\n      style: normalizeStyle({\n        backgroundColor: _ctx.displayedColor\n      })\n    }, null, 4), !_ctx.modelValue && !_ctx.showPanelColor ? (openBlock(), createBlock(_component_el_icon, {\n      key: 0,\n      class: \"el-color-picker__empty is-icon-close\"\n    }, {\n      default: withCtx(() => [createVNode(_component_close)]),\n      _: 1\n    })) : createCommentVNode(\"v-if\", true)], 2), withDirectives(createVNode(_component_el_icon, {\n      class: \"el-color-picker__icon is-icon-arrow-down\"\n    }, {\n      default: withCtx(() => [createVNode(_component_arrow_down)]),\n      _: 1\n    }, 512), [[vShow, _ctx.modelValue || _ctx.showPanelColor]])])], 2)]),\n    _: 1\n  }, 8, [\"visible\", \"effect\", \"popper-class\"]);\n}\nexport { render };","map":{"version":3,"names":["class","createBlock","_component_el_popper","ref","visible","_ctx","showPicker","$event","effect","Effect","LIGHT","trigger","offset","transition","popperClass","default","withCtx","createElementVNode","_hoisted_1","createVNode","_component_hue_slider","color","vertical","_component_sv_panel","showAlpha","openBlock","_component_alpha_slider","predefine","_component_predefine","colors","_hoisted_2","_hoisted_3","_component_el_input","customInput","size","onKeyup","withKeys","handleConfirm","onBlur","_component_el_button","type","onClick","clear","t","plain","confirmValue","hide","normalizeClass","colorDisabled","createElementBlock","_hoisted_4","createCommentVNode","_cache","args","handleTrigger","style","normalizeStyle","modelValue","showPanelColor","_component_el_icon","_component_close","_component_arrow_down"],"sources":["../../../../../../packages/components/color-picker/src/index.vue?vue&type=template&id=46a474d5&lang.js"],"sourcesContent":["<template>\n  <el-popper\n    ref=\"popper\"\n    v-model:visible=\"showPicker\"\n    :effect=\"Effect.LIGHT\"\n    manual-mode\n    trigger=\"click\"\n    :show-arrow=\"false\"\n    :fallback-placements=\"['bottom', 'top', 'right', 'left']\"\n    :offset=\"0\"\n    transition=\"el-zoom-in-top\"\n    :gpu-acceleration=\"false\"\n    :popper-class=\"`el-color-picker__panel el-color-dropdown ${popperClass}`\"\n    :stop-popper-mouse-event=\"false\"\n  >\n    <template #default>\n      <div v-click-outside=\"hide\">\n        <div class=\"el-color-dropdown__main-wrapper\">\n          <hue-slider ref=\"hue\" class=\"hue-slider\" :color=\"color\" vertical />\n          <sv-panel ref=\"svPanel\" :color=\"color\" />\n        </div>\n        <alpha-slider v-if=\"showAlpha\" ref=\"alpha\" :color=\"color\" />\n        <predefine\n          v-if=\"predefine\"\n          ref=\"predefine\"\n          :color=\"color\"\n          :colors=\"predefine\"\n        />\n        <div class=\"el-color-dropdown__btns\">\n          <span class=\"el-color-dropdown__value\">\n            <el-input\n              v-model=\"customInput\"\n              :validate-event=\"false\"\n              size=\"mini\"\n              @keyup.enter=\"handleConfirm\"\n              @blur=\"handleConfirm\"\n            />\n          </span>\n          <el-button\n            size=\"mini\"\n            type=\"text\"\n            class=\"el-color-dropdown__link-btn\"\n            @click=\"clear\"\n          >\n            {{ t('el.colorpicker.clear') }}\n          </el-button>\n          <el-button\n            plain\n            size=\"mini\"\n            class=\"el-color-dropdown__btn\"\n            @click=\"confirmValue\"\n          >\n            {{ t('el.colorpicker.confirm') }}\n          </el-button>\n        </div>\n      </div>\n    </template>\n    <template #trigger>\n      <div\n        :class=\"[\n          'el-color-picker',\n          colorDisabled ? 'is-disabled' : '',\n          colorSize ? `el-color-picker--${colorSize}` : '',\n        ]\"\n      >\n        <div v-if=\"colorDisabled\" class=\"el-color-picker__mask\"></div>\n        <div class=\"el-color-picker__trigger\" @click=\"handleTrigger\">\n          <span\n            class=\"el-color-picker__color\"\n            :class=\"{ 'is-alpha': showAlpha }\"\n          >\n            <span\n              class=\"el-color-picker__color-inner\"\n              :style=\"{\n                backgroundColor: displayedColor,\n              }\"\n            ></span>\n            <el-icon\n              v-if=\"!modelValue && !showPanelColor\"\n              class=\"el-color-picker__empty is-icon-close\"\n            >\n              <close />\n            </el-icon>\n          </span>\n          <el-icon\n            v-show=\"modelValue || showPanelColor\"\n            class=\"el-color-picker__icon is-icon-arrow-down\"\n          >\n            <arrow-down />\n          </el-icon>\n        </div>\n      </div>\n    </template>\n  </el-popper>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  inject,\n  nextTick,\n  onMounted,\n  provide,\n  reactive,\n  ref,\n  watch,\n} from 'vue'\nimport debounce from 'lodash/debounce'\nimport ElButton from '@element-plus/components/button'\nimport ElIcon from '@element-plus/components/icon'\nimport { ClickOutside } from '@element-plus/directives'\nimport { elFormItemKey, elFormKey } from '@element-plus/tokens'\nimport { useLocale, useSize } from '@element-plus/hooks'\nimport ElPopper, { Effect } from '@element-plus/components/popper'\nimport ElInput from '@element-plus/components/input'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/utils/constants'\nimport { isValidComponentSize } from '@element-plus/utils/validators'\nimport { Close, ArrowDown } from '@element-plus/icons-vue'\nimport AlphaSlider from './components/alpha-slider.vue'\nimport HueSlider from './components/hue-slider.vue'\nimport Predefine from './components/predefine.vue'\nimport SvPanel from './components/sv-panel.vue'\nimport Color from './color'\nimport { OPTIONS_KEY } from './useOption'\n\nimport type { PropType } from 'vue'\nimport type { ElFormContext, ElFormItemContext } from '@element-plus/tokens'\nimport type { ComponentSize } from '@element-plus/utils/types'\nimport type { IUseOptions } from './useOption'\n\nexport default defineComponent({\n  name: 'ElColorPicker',\n  components: {\n    ElButton,\n    ElPopper,\n    ElInput,\n    ElIcon,\n    Close,\n    ArrowDown,\n    SvPanel,\n    HueSlider,\n    AlphaSlider,\n    Predefine,\n  },\n  directives: {\n    ClickOutside,\n  },\n  props: {\n    modelValue: String,\n    showAlpha: Boolean,\n    colorFormat: String,\n    disabled: Boolean,\n    size: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    popperClass: String,\n    predefine: Array,\n  },\n  emits: ['change', 'active-change', UPDATE_MODEL_EVENT],\n  setup(props, { emit }) {\n    const { t } = useLocale()\n    const elForm = inject(elFormKey, {} as ElFormContext)\n    const elFormItem = inject(elFormItemKey, {} as ElFormItemContext)\n\n    const hue = ref(null)\n    const svPanel = ref(null)\n    const alpha = ref(null)\n    const popper = ref(null)\n    // data\n    const color = reactive(\n      new Color({\n        enableAlpha: props.showAlpha,\n        format: props.colorFormat,\n      })\n    )\n    const showPicker = ref(false)\n    const showPanelColor = ref(false)\n    const customInput = ref('')\n    // computed\n    const displayedColor = computed(() => {\n      if (!props.modelValue && !showPanelColor.value) {\n        return 'transparent'\n      }\n      return displayedRgb(color, props.showAlpha)\n    })\n    const colorSize = useSize()\n    const colorDisabled = computed(() => {\n      return props.disabled || elForm.disabled\n    })\n\n    const currentColor = computed(() => {\n      return !props.modelValue && !showPanelColor.value ? '' : color.value\n    })\n    // watch\n    watch(\n      () => props.modelValue,\n      (newVal) => {\n        if (!newVal) {\n          showPanelColor.value = false\n        } else if (newVal && newVal !== color.value) {\n          color.fromString(newVal)\n        }\n      }\n    )\n    watch(\n      () => currentColor.value,\n      (val) => {\n        customInput.value = val\n        emit('active-change', val)\n        // showPanelColor.value = true\n      }\n    )\n\n    watch(\n      () => color.value,\n      () => {\n        if (!props.modelValue && !showPanelColor.value) {\n          showPanelColor.value = true\n        }\n      }\n    )\n\n    // methods\n    function displayedRgb(color, showAlpha) {\n      if (!(color instanceof Color)) {\n        throw Error('color should be instance of _color Class')\n      }\n\n      const { r, g, b } = color.toRgb()\n      return showAlpha\n        ? `rgba(${r}, ${g}, ${b}, ${color.get('alpha') / 100})`\n        : `rgb(${r}, ${g}, ${b})`\n    }\n\n    function setShowPicker(value) {\n      showPicker.value = value\n    }\n\n    const debounceSetShowPicker = debounce(setShowPicker, 100)\n\n    function hide() {\n      debounceSetShowPicker(false)\n      resetColor()\n    }\n\n    function resetColor() {\n      nextTick(() => {\n        if (props.modelValue) {\n          color.fromString(props.modelValue)\n        } else {\n          showPanelColor.value = false\n        }\n      })\n    }\n\n    function handleTrigger() {\n      if (colorDisabled.value) return\n      debounceSetShowPicker(!showPicker.value)\n    }\n\n    function handleConfirm() {\n      color.fromString(customInput.value)\n    }\n\n    function confirmValue() {\n      const value = color.value\n      emit(UPDATE_MODEL_EVENT, value)\n      emit('change', value)\n      elFormItem.validate?.('change')\n      debounceSetShowPicker(false)\n      // check if modelValue change, if not change, then reset color.\n      nextTick(() => {\n        const newColor = new Color({\n          enableAlpha: props.showAlpha,\n          format: props.colorFormat,\n        })\n        newColor.fromString(props.modelValue)\n        if (!color.compare(newColor)) {\n          resetColor()\n        }\n      })\n    }\n\n    function clear() {\n      debounceSetShowPicker(false)\n      emit(UPDATE_MODEL_EVENT, null)\n      emit('change', null)\n      if (props.modelValue !== null) {\n        elFormItem.validate?.('change')\n      }\n      resetColor()\n    }\n\n    onMounted(() => {\n      if (props.modelValue) {\n        color.fromString(props.modelValue)\n        customInput.value = currentColor.value\n      }\n    })\n    watch(\n      () => showPicker.value,\n      () => {\n        nextTick(() => {\n          hue.value?.update()\n          svPanel.value?.update()\n          alpha.value?.update()\n        })\n      }\n    )\n\n    provide<IUseOptions>(OPTIONS_KEY, {\n      currentColor,\n    })\n\n    return {\n      Effect,\n      color: color as Color,\n      colorDisabled,\n      colorSize,\n      displayedColor,\n      showPanelColor,\n      showPicker,\n      customInput,\n      handleConfirm,\n      hide,\n      handleTrigger,\n      clear,\n      confirmValue,\n      t,\n      hue,\n      svPanel,\n      alpha,\n      popper,\n    }\n  },\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}