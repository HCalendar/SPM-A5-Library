{"ast":null,"code":"import { defineComponent, getCurrentInstance, inject, ref, computed } from 'vue';\nimport { ElScrollbar } from '../../scrollbar/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { generateId } from '../../../utils/util.mjs';\nimport './node2.mjs';\nimport { CASCADER_PANEL_INJECTION_KEY } from './types.mjs';\nimport script$1 from './node.vue_vue_type_script_lang.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nvar script = defineComponent({\n  name: \"ElCascaderMenu\",\n  components: {\n    ElScrollbar,\n    ElCascaderNode: script$1\n  },\n  props: {\n    nodes: {\n      type: Array,\n      required: true\n    },\n    index: {\n      type: Number,\n      required: true\n    }\n  },\n  setup(props) {\n    const instance = getCurrentInstance();\n    const {\n      t\n    } = useLocale();\n    const id = generateId();\n    let activeNode = null;\n    let hoverTimer = null;\n    const panel = inject(CASCADER_PANEL_INJECTION_KEY);\n    const hoverZone = ref(null);\n    const isEmpty = computed(() => !props.nodes.length);\n    const menuId = computed(() => `cascader-menu-${id}-${props.index}`);\n    const handleExpand = e => {\n      activeNode = e.target;\n    };\n    const handleMouseMove = e => {\n      if (!panel.isHoverMenu || !activeNode || !hoverZone.value) return;\n      if (activeNode.contains(e.target)) {\n        clearHoverTimer();\n        const el = instance.vnode.el;\n        const {\n          left\n        } = el.getBoundingClientRect();\n        const {\n          offsetWidth,\n          offsetHeight\n        } = el;\n        const startX = e.clientX - left;\n        const top = activeNode.offsetTop;\n        const bottom = top + activeNode.offsetHeight;\n        hoverZone.value.innerHTML = `\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${top} L${offsetWidth} 0 V${top} Z\" />\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${bottom} L${offsetWidth} ${offsetHeight} V${bottom} Z\" />\n        `;\n      } else if (!hoverTimer) {\n        hoverTimer = window.setTimeout(clearHoverZone, panel.config.hoverThreshold);\n      }\n    };\n    const clearHoverTimer = () => {\n      if (!hoverTimer) return;\n      clearTimeout(hoverTimer);\n      hoverTimer = null;\n    };\n    const clearHoverZone = () => {\n      if (!hoverZone.value) return;\n      hoverZone.value.innerHTML = \"\";\n      clearHoverTimer();\n    };\n    return {\n      panel,\n      hoverZone,\n      isEmpty,\n      menuId,\n      t,\n      handleExpand,\n      handleMouseMove,\n      clearHoverZone\n    };\n  }\n});\nexport { script as default };","map":{"version":3,"names":["script","defineComponent","name","components","ElScrollbar","ElCascaderNode","script$1","props","nodes","type","Array","required","index","Number","setup","instance","getCurrentInstance","t","useLocale","id","generateId","activeNode","hoverTimer","panel","inject","CASCADER_PANEL_INJECTION_KEY","hoverZone","ref","isEmpty","computed","length","menuId","handleExpand","e","target","handleMouseMove","isHoverMenu","value","contains","clearHoverTimer","el","vnode","left","getBoundingClientRect","offsetWidth","offsetHeight","startX","clientX","top","offsetTop","bottom","innerHTML","window","setTimeout","clearHoverZone","config","hoverThreshold","clearTimeout"],"sources":["../../../../../../packages/components/cascader-panel/src/menu.vue"],"sourcesContent":["<template>\n  <el-scrollbar\n    :key=\"menuId\"\n    tag=\"ul\"\n    role=\"menu\"\n    class=\"el-cascader-menu\"\n    wrap-class=\"el-cascader-menu__wrap\"\n    :view-class=\"['el-cascader-menu__list', isEmpty && 'is-empty']\"\n    @mousemove=\"handleMouseMove\"\n    @mouseleave=\"clearHoverZone\"\n  >\n    <el-cascader-node\n      v-for=\"node in nodes\"\n      :key=\"node.uid\"\n      :node=\"node\"\n      :menu-id=\"menuId\"\n      @expand=\"handleExpand\"\n    />\n    <div v-if=\"isEmpty\" class=\"el-cascader-menu__empty-text\">\n      {{ t('el.cascader.noData') }}\n    </div>\n    <svg\n      v-else-if=\"panel?.isHoverMenu\"\n      ref=\"hoverZone\"\n      class=\"el-cascader-menu__hover-zone\"\n    ></svg>\n  </el-scrollbar>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, getCurrentInstance, inject, ref } from 'vue'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport { useLocale } from '@element-plus/hooks'\nimport { generateId } from '@element-plus/utils/util'\nimport ElCascaderNode from './node.vue'\nimport { CASCADER_PANEL_INJECTION_KEY } from './types'\nimport type { default as CascaderNode } from './node'\n\nimport type { PropType } from 'vue'\nimport type { TimeoutHandle, Nullable } from '@element-plus/utils/types'\n\nexport default defineComponent({\n  name: 'ElCascaderMenu',\n\n  components: {\n    ElScrollbar,\n    ElCascaderNode,\n  },\n\n  props: {\n    nodes: {\n      type: Array as PropType<CascaderNode[]>,\n      required: true,\n    },\n    index: {\n      type: Number,\n      required: true,\n    },\n  },\n\n  setup(props) {\n    const instance = getCurrentInstance()!\n    const { t } = useLocale()\n    const id = generateId()\n    let activeNode: Nullable<HTMLElement> = null\n    let hoverTimer: Nullable<TimeoutHandle> = null\n\n    const panel = inject(CASCADER_PANEL_INJECTION_KEY)!\n\n    const hoverZone = ref<null | SVGSVGElement>(null)\n\n    const isEmpty = computed(() => !props.nodes.length)\n    const menuId = computed(() => `cascader-menu-${id}-${props.index}`)\n\n    const handleExpand = (e: MouseEvent) => {\n      activeNode = e.target as HTMLElement\n    }\n\n    const handleMouseMove = (e: MouseEvent) => {\n      if (!panel.isHoverMenu || !activeNode || !hoverZone.value) return\n\n      if (activeNode.contains(e.target as HTMLElement)) {\n        clearHoverTimer()\n\n        const el = instance.vnode.el as HTMLElement\n        const { left } = el.getBoundingClientRect()\n        const { offsetWidth, offsetHeight } = el\n        const startX = e.clientX - left\n        const top = activeNode.offsetTop\n        const bottom = top + activeNode.offsetHeight\n\n        hoverZone.value.innerHTML = `\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${top} L${offsetWidth} 0 V${top} Z\" />\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${bottom} L${offsetWidth} ${offsetHeight} V${bottom} Z\" />\n        `\n      } else if (!hoverTimer) {\n        hoverTimer = window.setTimeout(\n          clearHoverZone,\n          panel.config.hoverThreshold\n        )\n      }\n    }\n\n    const clearHoverTimer = () => {\n      if (!hoverTimer) return\n      clearTimeout(hoverTimer)\n      hoverTimer = null\n    }\n\n    const clearHoverZone = () => {\n      if (!hoverZone.value) return\n      hoverZone.value.innerHTML = ''\n      clearHoverTimer()\n    }\n\n    return {\n      panel,\n      hoverZone,\n      isEmpty,\n      menuId,\n      t,\n      handleExpand,\n      handleMouseMove,\n      clearHoverZone,\n    }\n  },\n})\n</script>\n"],"mappings":";;;;;;;;AAyCA,IAAAA,MAAA,GAAeC,eAAA,CAAgB;EAC7BC,IAAA,EAAM;EAENC,UAAA,EAAY;IACVC,WAAA;IAAAC,cAAA,EACAC;EAAA;EAGFC,KAAA,EAAO;IACLC,KAAA,EAAO;MACLC,IAAA,EAAMC,KAAA;MACNC,QAAA,EAAU;IAAA;IAEZC,KAAA,EAAO;MACLH,IAAA,EAAMI,MAAA;MACNF,QAAA,EAAU;IAAA;EAAA;EAIdG,MAAMP,KAAA,EAAO;IACX,MAAMQ,QAAA,GAAWC,kBAAA;IACjB,MAAM;MAAEC;IAAA,IAAMC,SAAA;IACd,MAAMC,EAAA,GAAKC,UAAA;IACX,IAAIC,UAAA,GAAoC;IACxC,IAAIC,UAAA,GAAsC;IAE1C,MAAMC,KAAA,GAAQC,MAAA,CAAOC,4BAAA;IAErB,MAAMC,SAAA,GAAYC,GAAA,CAA0B;IAE5C,MAAMC,OAAA,GAAUC,QAAA,CAAS,MAAM,CAACtB,KAAA,CAAMC,KAAA,CAAMsB,MAAA;IAC5C,MAAMC,MAAA,GAASF,QAAA,CAAS,MAAM,iBAAiBV,EAAA,IAAMZ,KAAA,CAAMK,KAAA;IAE3D,MAAMoB,YAAA,GAAgBC,CAAA,IAAkB;MACtCZ,UAAA,GAAaY,CAAA,CAAEC,MAAA;IAAA;IAGjB,MAAMC,eAAA,GAAmBF,CAAA,IAAkB;MACzC,IAAI,CAACV,KAAA,CAAMa,WAAA,IAAe,CAACf,UAAA,IAAc,CAACK,SAAA,CAAUW,KAAA,EAAO;MAE3D,IAAIhB,UAAA,CAAWiB,QAAA,CAASL,CAAA,CAAEC,MAAA,GAAwB;QAChDK,eAAA;QAEA,MAAMC,EAAA,GAAKzB,QAAA,CAAS0B,KAAA,CAAMD,EAAA;QAC1B,MAAM;UAAEE;QAAA,IAASF,EAAA,CAAGG,qBAAA;QACpB,MAAM;UAAEC,WAAA;UAAaC;QAAA,IAAiBL,EAAA;QACtC,MAAMM,MAAA,GAASb,CAAA,CAAEc,OAAA,GAAUL,IAAA;QAC3B,MAAMM,GAAA,GAAM3B,UAAA,CAAW4B,SAAA;QACvB,MAAMC,MAAA,GAASF,GAAA,GAAM3B,UAAA,CAAWwB,YAAA;QAEhCnB,SAAA,CAAUW,KAAA,CAAMc,SAAA,GAAY;AAAA,uEACmCL,MAAA,IAAUE,GAAA,KAAQJ,WAAA,OAAkBI,GAAA;AAAA,uEACpCF,MAAA,IAAUI,MAAA,KAAWN,WAAA,IAAeC,YAAA,KAAiBK,MAAA;AAAA;MAAA,WAE3G,CAAC5B,UAAA,EAAY;QACtBA,UAAA,GAAa8B,MAAA,CAAOC,UAAA,CAClBC,cAAA,EACA/B,KAAA,CAAMgC,MAAA,CAAOC,cAAA;MAAA;IAAA;IAKnB,MAAMjB,eAAA,GAAkBA,CAAA,KAAM;MAC5B,IAAI,CAACjB,UAAA,EAAY;MACjBmC,YAAA,CAAanC,UAAA;MACbA,UAAA,GAAa;IAAA;IAGf,MAAMgC,cAAA,GAAiBA,CAAA,KAAM;MAC3B,IAAI,CAAC5B,SAAA,CAAUW,KAAA,EAAO;MACtBX,SAAA,CAAUW,KAAA,CAAMc,SAAA,GAAY;MAC5BZ,eAAA;IAAA;IAGF,OAAO;MACLhB,KAAA;MACAG,SAAA;MACAE,OAAA;MACAG,MAAA;MACAd,CAAA;MACAe,YAAA;MACAG,eAAA;MACAmB;IAAA;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}