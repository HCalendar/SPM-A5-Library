{"ast":null,"code":"import { defineComponent, getCurrentInstance, inject, computed } from 'vue';\nimport { throwError } from '../../../utils/error.mjs';\nimport { menuItemGroupProps } from './menu-item-group.mjs';\nconst COMPONENT_NAME = \"ElMenuItemGroup\";\nvar script = defineComponent({\n  name: COMPONENT_NAME,\n  props: menuItemGroupProps,\n  setup() {\n    const instance = getCurrentInstance();\n    const menu = inject(\"rootMenu\");\n    if (!menu) throwError(COMPONENT_NAME, \"can not inject root menu\");\n    const levelPadding = computed(() => {\n      if (menu.props.collapse) return 20;\n      let padding = 20;\n      let parent = instance.parent;\n      while (parent && parent.type.name !== \"ElMenu\") {\n        if (parent.type.name === \"ElSubMenu\") {\n          padding += 20;\n        }\n        parent = parent.parent;\n      }\n      return padding;\n    });\n    return {\n      levelPadding\n    };\n  }\n});\nexport { script as default };","map":{"version":3,"names":["COMPONENT_NAME","script","defineComponent","name","props","menuItemGroupProps","setup","instance","getCurrentInstance","menu","inject","throwError","levelPadding","computed","collapse","padding","parent","type"],"sources":["../../../../../../packages/components/menu/src/menu-item-group.vue"],"sourcesContent":["<template>\n  <li class=\"el-menu-item-group\">\n    <div\n      class=\"el-menu-item-group__title\"\n      :style=\"{ paddingLeft: `${levelPadding}px` }\"\n    >\n      <template v-if=\"!$slots.title\">{{ title }}</template>\n      <slot v-else name=\"title\" />\n    </div>\n    <ul>\n      <slot />\n    </ul>\n  </li>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, getCurrentInstance, inject } from 'vue'\nimport { throwError } from '@element-plus/utils/error'\nimport { menuItemGroupProps } from './menu-item-group'\n\nimport type { MenuProvider } from './types'\n\nconst COMPONENT_NAME = 'ElMenuItemGroup'\n\nexport default defineComponent({\n  name: COMPONENT_NAME,\n\n  props: menuItemGroupProps,\n\n  setup() {\n    const instance = getCurrentInstance()!\n    const menu = inject<MenuProvider>('rootMenu')\n    if (!menu) throwError(COMPONENT_NAME, 'can not inject root menu')\n\n    const levelPadding = computed(() => {\n      if (menu.props.collapse) return 20\n      let padding = 20\n      let parent = instance.parent\n      while (parent && parent.type.name !== 'ElMenu') {\n        if (parent.type.name === 'ElSubMenu') {\n          padding += 20\n        }\n        parent = parent.parent\n      }\n      return padding\n    })\n\n    return {\n      levelPadding,\n    }\n  },\n})\n</script>\n"],"mappings":";;;AAsBA,MAAMA,cAAA,GAAiB;AAEvB,IAAAC,MAAA,GAAeC,eAAA,CAAgB;EAC7BC,IAAA,EAAMH,cAAA;EAENI,KAAA,EAAOC,kBAAA;EAEPC,MAAA,EAAQ;IACN,MAAMC,QAAA,GAAWC,kBAAA;IACjB,MAAMC,IAAA,GAAOC,MAAA,CAAqB;IAClC,IAAI,CAACD,IAAA,EAAME,UAAA,CAAWX,cAAA,EAAgB;IAEtC,MAAMY,YAAA,GAAeC,QAAA,CAAS,MAAM;MAClC,IAAIJ,IAAA,CAAKL,KAAA,CAAMU,QAAA,EAAU,OAAO;MAChC,IAAIC,OAAA,GAAU;MACd,IAAIC,MAAA,GAAST,QAAA,CAASS,MAAA;MACtB,OAAOA,MAAA,IAAUA,MAAA,CAAOC,IAAA,CAAKd,IAAA,KAAS,UAAU;QAC9C,IAAIa,MAAA,CAAOC,IAAA,CAAKd,IAAA,KAAS,aAAa;UACpCY,OAAA,IAAW;QAAA;QAEbC,MAAA,GAASA,MAAA,CAAOA,MAAA;MAAA;MAElB,OAAOD,OAAA;IAAA;IAGT,OAAO;MACLH;IAAA;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}