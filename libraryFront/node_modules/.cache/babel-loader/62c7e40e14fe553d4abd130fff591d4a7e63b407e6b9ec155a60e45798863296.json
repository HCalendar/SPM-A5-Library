{"ast":null,"code":"import { defineComponent, ref, inject, computed, Text } from 'vue';\nimport { useCssVar } from '@vueuse/core';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../tokens/index.mjs';\nimport { Loading } from '@element-plus/icons-vue';\nimport { darken, lighten } from '../../../utils/color.mjs';\nimport { buttonProps, buttonEmits } from './button.mjs';\nimport { buttonGroupContextKey } from '../../../tokens/button.mjs';\nimport { useGlobalConfig } from '../../../hooks/use-global-config/index.mjs';\nimport { useFormItem } from '../../../hooks/use-form-item/index.mjs';\nimport { useSize, useDisabled } from '../../../hooks/use-common-props/index.mjs';\nvar script = defineComponent({\n  name: \"ElButton\",\n  components: {\n    ElIcon,\n    Loading\n  },\n  props: buttonProps,\n  emits: buttonEmits,\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const buttonRef = ref();\n    const buttonGroupContext = inject(buttonGroupContextKey, void 0);\n    const globalConfig = useGlobalConfig(\"button\");\n    const autoInsertSpace = computed(() => {\n      var _a, _b, _c;\n      return (_c = (_b = props.autoInsertSpace) != null ? _b : (_a = globalConfig.value) == null ? void 0 : _a.autoInsertSpace) != null ? _c : false;\n    });\n    const shouldAddSpace = computed(() => {\n      var _a;\n      const defaultSlot = (_a = slots.default) == null ? void 0 : _a.call(slots);\n      if (autoInsertSpace.value && (defaultSlot == null ? void 0 : defaultSlot.length) === 1) {\n        const slot = defaultSlot[0];\n        if ((slot == null ? void 0 : slot.type) === Text) {\n          const text = slot.children;\n          return /^\\p{Unified_Ideograph}{2}$/u.test(text);\n        }\n      }\n      return false;\n    });\n    const {\n      form\n    } = useFormItem();\n    const buttonSize = useSize(computed(() => buttonGroupContext == null ? void 0 : buttonGroupContext.size));\n    const buttonDisabled = useDisabled();\n    const buttonType = computed(() => props.type || (buttonGroupContext == null ? void 0 : buttonGroupContext.type) || \"default\");\n    const typeColor = computed(() => useCssVar(`--el-color-${props.type}`).value);\n    const buttonStyle = computed(() => {\n      let styles = {};\n      const buttonColor = props.color || typeColor.value;\n      if (buttonColor) {\n        const darkenBgColor = darken(buttonColor, 0.1);\n        if (props.plain) {\n          styles = {\n            \"--el-button-bg-color\": lighten(buttonColor, 0.9),\n            \"--el-button-text-color\": buttonColor,\n            \"--el-button-hover-text-color\": \"var(--el-color-white)\",\n            \"--el-button-hover-bg-color\": buttonColor,\n            \"--el-button-hover-border-color\": buttonColor,\n            \"--el-button-active-bg-color\": darkenBgColor,\n            \"--el-button-active-text-color\": \"var(--el-color-white)\",\n            \"--el-button-active-border-color\": darkenBgColor\n          };\n        } else {\n          const lightenBgColor = lighten(buttonColor);\n          styles = {\n            \"--el-button-bg-color\": buttonColor,\n            \"--el-button-border-color\": buttonColor,\n            \"--el-button-hover-bg-color\": lightenBgColor,\n            \"--el-button-hover-border-color\": lightenBgColor,\n            \"--el-button-active-bg-color\": darkenBgColor,\n            \"--el-button-active-border-color\": darkenBgColor\n          };\n        }\n        if (buttonDisabled.value) {\n          const disabledButtonColor = lighten(buttonColor, 0.5);\n          styles[\"--el-button-disabled-bg-color\"] = disabledButtonColor;\n          styles[\"--el-button-disabled-border-color\"] = disabledButtonColor;\n        }\n      }\n      return styles;\n    });\n    const handleClick = evt => {\n      if (props.nativeType === \"reset\") {\n        form == null ? void 0 : form.resetFields();\n      }\n      emit(\"click\", evt);\n    };\n    return {\n      buttonRef,\n      buttonStyle,\n      buttonSize,\n      buttonType,\n      buttonDisabled,\n      shouldAddSpace,\n      handleClick\n    };\n  }\n});\nexport { script as default };","map":{"version":3,"names":["script","defineComponent","name","components","ElIcon","Loading","props","buttonProps","emits","buttonEmits","setup","emit","slots","buttonRef","ref","buttonGroupContext","inject","buttonGroupContextKey","globalConfig","useGlobalConfig","autoInsertSpace","computed","_c","_b","_a","value","shouldAddSpace","defaultSlot","default","call","length","slot","type","Text","text","children","test","form","useFormItem","buttonSize","useSize","size","buttonDisabled","useDisabled","buttonType","typeColor","useCssVar","buttonStyle","styles","buttonColor","color","darkenBgColor","darken","plain","lighten","lightenBgColor","disabledButtonColor","handleClick","evt","nativeType","resetFields"],"sources":["../../../../../../packages/components/button/src/button.vue"],"sourcesContent":["<template>\n  <button\n    ref=\"buttonRef\"\n    :class=\"[\n      'el-button',\n      buttonType ? 'el-button--' + buttonType : '',\n      buttonSize ? 'el-button--' + buttonSize : '',\n      {\n        'is-disabled': buttonDisabled,\n        'is-loading': loading,\n        'is-plain': plain,\n        'is-round': round,\n        'is-circle': circle,\n      },\n    ]\"\n    :disabled=\"buttonDisabled || loading\"\n    :autofocus=\"autofocus\"\n    :type=\"nativeType\"\n    :style=\"buttonStyle\"\n    @click=\"handleClick\"\n  >\n    <el-icon v-if=\"loading\" class=\"is-loading\">\n      <loading />\n    </el-icon>\n    <el-icon v-else-if=\"icon\">\n      <component :is=\"icon\" />\n    </el-icon>\n    <span\n      v-if=\"$slots.default\"\n      :class=\"{ 'el-button__text--expand': shouldAddSpace }\"\n    >\n      <slot></slot>\n    </span>\n  </button>\n</template>\n\n<script lang=\"ts\">\nimport { computed, inject, defineComponent, Text, ref } from 'vue'\nimport { useCssVar } from '@vueuse/core'\nimport { ElIcon } from '@element-plus/components/icon'\nimport {\n  useDisabled,\n  useFormItem,\n  useGlobalConfig,\n  useSize,\n} from '@element-plus/hooks'\nimport { buttonGroupContextKey } from '@element-plus/tokens'\nimport { Loading } from '@element-plus/icons-vue'\n\nimport { lighten, darken } from '@element-plus/utils/color'\n\nimport { buttonEmits, buttonProps } from './button'\n\nexport default defineComponent({\n  name: 'ElButton',\n\n  components: {\n    ElIcon,\n    Loading,\n  },\n\n  props: buttonProps,\n  emits: buttonEmits,\n\n  setup(props, { emit, slots }) {\n    const buttonRef = ref()\n    const buttonGroupContext = inject(buttonGroupContextKey, undefined)\n    const globalConfig = useGlobalConfig('button')\n    const autoInsertSpace = computed(\n      () =>\n        props.autoInsertSpace ?? globalConfig.value?.autoInsertSpace ?? false\n    )\n\n    // add space between two characters in Chinese\n    const shouldAddSpace = computed(() => {\n      const defaultSlot = slots.default?.()\n      if (autoInsertSpace.value && defaultSlot?.length === 1) {\n        const slot = defaultSlot[0]\n        if (slot?.type === Text) {\n          const text = slot.children\n          return /^\\p{Unified_Ideograph}{2}$/u.test(text as string)\n        }\n      }\n      return false\n    })\n\n    const { form } = useFormItem()\n    const buttonSize = useSize(computed(() => buttonGroupContext?.size))\n    const buttonDisabled = useDisabled()\n    const buttonType = computed(\n      () => props.type || buttonGroupContext?.type || 'default'\n    )\n\n    // calculate hover & active color by color\n    const typeColor = computed(\n      () => useCssVar(`--el-color-${props.type}`).value\n    )\n    const buttonStyle = computed(() => {\n      let styles = {}\n\n      const buttonColor = props.color || typeColor.value\n\n      if (buttonColor) {\n        const darkenBgColor = darken(buttonColor, 0.1)\n        if (props.plain) {\n          styles = {\n            '--el-button-bg-color': lighten(buttonColor, 0.9),\n            '--el-button-text-color': buttonColor,\n            '--el-button-hover-text-color': 'var(--el-color-white)',\n            '--el-button-hover-bg-color': buttonColor,\n            '--el-button-hover-border-color': buttonColor,\n            '--el-button-active-bg-color': darkenBgColor,\n            '--el-button-active-text-color': 'var(--el-color-white)',\n            '--el-button-active-border-color': darkenBgColor,\n          }\n        } else {\n          const lightenBgColor = lighten(buttonColor)\n          styles = {\n            '--el-button-bg-color': buttonColor,\n            '--el-button-border-color': buttonColor,\n            '--el-button-hover-bg-color': lightenBgColor,\n            '--el-button-hover-border-color': lightenBgColor,\n            '--el-button-active-bg-color': darkenBgColor,\n            '--el-button-active-border-color': darkenBgColor,\n          }\n        }\n\n        if (buttonDisabled.value) {\n          const disabledButtonColor = lighten(buttonColor, 0.5)\n          styles['--el-button-disabled-bg-color'] = disabledButtonColor\n          styles['--el-button-disabled-border-color'] = disabledButtonColor\n        }\n      }\n\n      return styles\n    })\n\n    const handleClick = (evt: MouseEvent) => {\n      if (props.nativeType === 'reset') {\n        form?.resetFields()\n      }\n      emit('click', evt)\n    }\n\n    return {\n      buttonRef,\n      buttonStyle,\n\n      buttonSize,\n      buttonType,\n      buttonDisabled,\n\n      shouldAddSpace,\n\n      handleClick,\n    }\n  },\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}