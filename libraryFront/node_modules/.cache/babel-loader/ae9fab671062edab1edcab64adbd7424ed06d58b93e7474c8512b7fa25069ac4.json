{"ast":null,"code":"import { inject, toRef } from 'vue';\nimport '../../tokens/index.mjs';\nimport { configProviderContextKey } from '../../tokens/config-provider.mjs';\nfunction useGlobalConfig(key) {\n  const config = inject(configProviderContextKey, {});\n  if (key) {\n    return toRef(config, key);\n  } else {\n    return config;\n  }\n}\nexport { useGlobalConfig };","map":{"version":3,"names":["key","config","inject","configProviderContextKey","toRef"],"sources":["../../../../../packages/hooks/use-global-config/index.ts"],"sourcesContent":["import { inject, toRef } from 'vue'\nimport { configProviderContextKey } from '@element-plus/tokens'\nimport type { Ref } from 'vue'\nimport type { ConfigProviderContext } from '@element-plus/tokens'\n\nexport function useGlobalConfig<K extends keyof ConfigProviderContext>(\n  key: K\n): Ref<ConfigProviderContext[K]>\nexport function useGlobalConfig(): ConfigProviderContext\nexport function useGlobalConfig(key?: keyof ConfigProviderContext) {\n  const config = inject(configProviderContextKey, {})\n  if (key) {\n    return toRef(config, key)\n  } else {\n    return config\n  }\n}\n"],"mappings":";;;yBASgCA,GAAA,EAAmC;EACjE,MAAMC,MAAA,GAASC,MAAA,CAAOC,wBAAA,EAA0B;EAChD,IAAIH,GAAA,EAAK;IACP,OAAOI,KAAA,CAAMH,MAAA,EAAQD,GAAA;EAAA,OAChB;IACL,OAAOC,MAAA;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}