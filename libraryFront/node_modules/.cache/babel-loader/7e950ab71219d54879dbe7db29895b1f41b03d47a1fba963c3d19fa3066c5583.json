{"ast":null,"code":"import { defineComponent, computed } from 'vue';\nimport '../../../hooks/index.mjs';\nimport './skeleton-item2.mjs';\nimport { skeletonProps } from './skeleton.mjs';\nimport script$1 from './skeleton-item.vue_vue_type_script_lang.mjs';\nimport { useThrottleRender } from '../../../hooks/use-throttle-render/index.mjs';\nvar script = defineComponent({\n  name: \"ElSkeleton\",\n  components: {\n    [script$1.name]: script$1\n  },\n  props: skeletonProps,\n  setup(props) {\n    const innerLoading = computed(() => {\n      return props.loading;\n    });\n    const uiLoading = useThrottleRender(innerLoading, props.throttle);\n    return {\n      uiLoading\n    };\n  }\n});\nexport { script as default };","map":{"version":3,"names":["script","defineComponent","name","components","script$1","props","skeletonProps","setup","innerLoading","computed","loading","uiLoading","useThrottleRender","throttle"],"sources":["../../../../../../packages/components/skeleton/src/skeleton.vue"],"sourcesContent":["<template>\n  <template v-if=\"uiLoading\">\n    <div\n      :class=\"['el-skeleton', animated ? 'is-animated' : '']\"\n      v-bind=\"$attrs\"\n    >\n      <template v-for=\"i in count\" :key=\"i\">\n        <slot v-if=\"loading\" :key=\"i\" name=\"template\">\n          <el-skeleton-item class=\"is-first\" variant=\"p\" />\n          <el-skeleton-item\n            v-for=\"item in rows\"\n            :key=\"item\"\n            :class=\"{\n              'el-skeleton__paragraph': true,\n              'is-last': item === rows && rows > 1,\n            }\"\n            variant=\"p\"\n          />\n        </slot>\n      </template>\n    </div>\n  </template>\n  <template v-else>\n    <slot v-bind=\"$attrs\"></slot>\n  </template>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed } from 'vue'\nimport { useThrottleRender } from '@element-plus/hooks'\nimport SkeletonItem from './skeleton-item.vue'\nimport { skeletonProps } from './skeleton'\n\nexport default defineComponent({\n  name: 'ElSkeleton',\n  components: {\n    [SkeletonItem.name]: SkeletonItem,\n  },\n  props: skeletonProps,\n  setup(props) {\n    const innerLoading = computed(() => {\n      return props.loading\n    })\n\n    const uiLoading = useThrottleRender(innerLoading, props.throttle)\n\n    return {\n      uiLoading,\n    }\n  },\n})\n</script>\n"],"mappings":";;;;;;AAiCA,IAAAA,MAAA,GAAeC,eAAA,CAAgB;EAC7BC,IAAA,EAAM;EACNC,UAAA,EAAY;IAAA,CACTC,QAAA,CAAaF,IAAA,GAAOE;EAAA;EAEvBC,KAAA,EAAOC,aAAA;EACPC,MAAMF,KAAA,EAAO;IACX,MAAMG,YAAA,GAAeC,QAAA,CAAS,MAAM;MAClC,OAAOJ,KAAA,CAAMK,OAAA;IAAA;IAGf,MAAMC,SAAA,GAAYC,iBAAA,CAAkBJ,YAAA,EAAcH,KAAA,CAAMQ,QAAA;IAExD,OAAO;MACLF;IAAA;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}