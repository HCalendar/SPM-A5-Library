{"ast":null,"code":"import { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../utils/constants.mjs';\nconst useMove = (props, checkedState, propsKey, emit) => {\n  const _emit = (value, type, checked) => {\n    emit(UPDATE_MODEL_EVENT, value);\n    emit(CHANGE_EVENT, value, type, checked);\n  };\n  const addToLeft = () => {\n    const currentValue = props.modelValue.slice();\n    checkedState.rightChecked.forEach(item => {\n      const index = currentValue.indexOf(item);\n      if (index > -1) {\n        currentValue.splice(index, 1);\n      }\n    });\n    _emit(currentValue, \"left\", checkedState.rightChecked);\n  };\n  const addToRight = () => {\n    let currentValue = props.modelValue.slice();\n    const itemsToBeMoved = props.data.filter(item => {\n      const itemKey = item[propsKey.value];\n      return checkedState.leftChecked.includes(itemKey) && !props.modelValue.includes(itemKey);\n    }).map(item => item[propsKey.value]);\n    currentValue = props.targetOrder === \"unshift\" ? itemsToBeMoved.concat(currentValue) : currentValue.concat(itemsToBeMoved);\n    if (props.targetOrder === \"original\") {\n      currentValue = props.data.filter(item => currentValue.includes(item[propsKey.value])).map(item => item[propsKey.value]);\n    }\n    _emit(currentValue, \"right\", checkedState.leftChecked);\n  };\n  return {\n    addToLeft,\n    addToRight\n  };\n};\nexport { useMove };","map":{"version":3,"names":["useMove","props","checkedState","propsKey","emit","_emit","value","type","checked","UPDATE_MODEL_EVENT","CHANGE_EVENT","addToLeft","currentValue","modelValue","slice","rightChecked","forEach","item","index","indexOf","splice","addToRight","itemsToBeMoved","data","filter","itemKey","leftChecked","includes","map","targetOrder","concat"],"sources":["../../../../../../packages/components/transfer/src/useMove.ts"],"sourcesContent":["import { CHANGE_EVENT, UPDATE_MODEL_EVENT } from '@element-plus/utils/constants'\n\nimport type { ComputedRef } from 'vue'\nimport type {\n  TransferProps,\n  TransferCheckedState,\n  DataItem,\n  Key,\n} from './transfer'\n\nexport const useMove = (\n  props: TransferProps,\n  checkedState: TransferCheckedState,\n  propsKey: ComputedRef<string>,\n  emit\n) => {\n  const _emit = (value, type: 'left' | 'right', checked: Key[]) => {\n    emit(UPDATE_MODEL_EVENT, value)\n    emit(CHANGE_EVENT, value, type, checked)\n  }\n\n  const addToLeft = () => {\n    const currentValue = props.modelValue.slice()\n\n    checkedState.rightChecked.forEach((item) => {\n      const index = currentValue.indexOf(item)\n      if (index > -1) {\n        currentValue.splice(index, 1)\n      }\n    })\n    _emit(currentValue, 'left', checkedState.rightChecked)\n  }\n\n  const addToRight = () => {\n    let currentValue = props.modelValue.slice()\n\n    const itemsToBeMoved = props.data\n      .filter((item: DataItem) => {\n        const itemKey = item[propsKey.value]\n        return (\n          checkedState.leftChecked.includes(itemKey) &&\n          !props.modelValue.includes(itemKey)\n        )\n      })\n      .map((item) => item[propsKey.value])\n\n    currentValue =\n      props.targetOrder === 'unshift'\n        ? itemsToBeMoved.concat(currentValue)\n        : currentValue.concat(itemsToBeMoved)\n\n    if (props.targetOrder === 'original') {\n      currentValue = props.data\n        .filter((item) => currentValue.includes(item[propsKey.value]))\n        .map((item) => item[propsKey.value])\n    }\n\n    _emit(currentValue, 'right', checkedState.leftChecked)\n  }\n\n  return {\n    addToLeft,\n    addToRight,\n  }\n}\n"],"mappings":";MAUaA,OAAA,GAAUA,CACrBC,KAAA,EACAC,YAAA,EACAC,QAAA,EACAC,IAAA,KACG;EACH,MAAMC,KAAA,GAAQA,CAACC,KAAA,EAAOC,IAAA,EAAwBC,OAAA,KAAmB;IAC/DJ,IAAA,CAAKK,kBAAA,EAAoBH,KAAA;IACzBF,IAAA,CAAKM,YAAA,EAAcJ,KAAA,EAAOC,IAAA,EAAMC,OAAA;EAAA;EAGlC,MAAMG,SAAA,GAAYA,CAAA,KAAM;IACtB,MAAMC,YAAA,GAAeX,KAAA,CAAMY,UAAA,CAAWC,KAAA;IAEtCZ,YAAA,CAAaa,YAAA,CAAaC,OAAA,CAASC,IAAA,IAAS;MAC1C,MAAMC,KAAA,GAAQN,YAAA,CAAaO,OAAA,CAAQF,IAAA;MACnC,IAAIC,KAAA,GAAQ,IAAI;QACdN,YAAA,CAAaQ,MAAA,CAAOF,KAAA,EAAO;MAAA;IAAA;IAG/Bb,KAAA,CAAMO,YAAA,EAAc,QAAQV,YAAA,CAAaa,YAAA;EAAA;EAG3C,MAAMM,UAAA,GAAaA,CAAA,KAAM;IACvB,IAAIT,YAAA,GAAeX,KAAA,CAAMY,UAAA,CAAWC,KAAA;IAEpC,MAAMQ,cAAA,GAAiBrB,KAAA,CAAMsB,IAAA,CAC1BC,MAAA,CAAQP,IAAA,IAAmB;MAC1B,MAAMQ,OAAA,GAAUR,IAAA,CAAKd,QAAA,CAASG,KAAA;MAC9B,OACEJ,YAAA,CAAawB,WAAA,CAAYC,QAAA,CAASF,OAAA,KAClC,CAACxB,KAAA,CAAMY,UAAA,CAAWc,QAAA,CAASF,OAAA;IAAA,GAG9BG,GAAA,CAAKX,IAAA,IAASA,IAAA,CAAKd,QAAA,CAASG,KAAA;IAE/BM,YAAA,GACEX,KAAA,CAAM4B,WAAA,KAAgB,YAClBP,cAAA,CAAeQ,MAAA,CAAOlB,YAAA,IACtBA,YAAA,CAAakB,MAAA,CAAOR,cAAA;IAE1B,IAAIrB,KAAA,CAAM4B,WAAA,KAAgB,YAAY;MACpCjB,YAAA,GAAeX,KAAA,CAAMsB,IAAA,CAClBC,MAAA,CAAQP,IAAA,IAASL,YAAA,CAAae,QAAA,CAASV,IAAA,CAAKd,QAAA,CAASG,KAAA,IACrDsB,GAAA,CAAKX,IAAA,IAASA,IAAA,CAAKd,QAAA,CAASG,KAAA;IAAA;IAGjCD,KAAA,CAAMO,YAAA,EAAc,SAASV,YAAA,CAAawB,WAAA;EAAA;EAG5C,OAAO;IACLf,SAAA;IACAU;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}