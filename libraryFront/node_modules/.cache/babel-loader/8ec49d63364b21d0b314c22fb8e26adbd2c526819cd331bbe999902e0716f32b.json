{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent, ref, getCurrentInstance, provide, reactive, toRefs, inject, onMounted, toRaw, watch } from 'vue';\nimport { selectGroupKey, selectKey } from './token.mjs';\nvar script = defineComponent({\n  name: \"ElOptionGroup\",\n  componentName: \"ElOptionGroup\",\n  props: {\n    label: String,\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup(props) {\n    const visible = ref(true);\n    const instance = getCurrentInstance();\n    const children = ref([]);\n    provide(selectGroupKey, reactive({\n      ...toRefs(props)\n    }));\n    const select = inject(selectKey);\n    onMounted(() => {\n      children.value = flattedChildren(instance.subTree);\n    });\n    const flattedChildren = node => {\n      const children2 = [];\n      if (Array.isArray(node.children)) {\n        node.children.forEach(child => {\n          var _a;\n          if (child.type && child.type.name === \"ElOption\" && child.component && child.component.proxy) {\n            children2.push(child.component.proxy);\n          } else if ((_a = child.children) == null ? void 0 : _a.length) {\n            children2.push(...flattedChildren(child));\n          }\n        });\n      }\n      return children2;\n    };\n    const {\n      groupQueryChange\n    } = toRaw(select);\n    watch(groupQueryChange, () => {\n      visible.value = children.value.some(option => option.visible === true);\n    });\n    return {\n      visible\n    };\n  }\n});\nexport { script as default };","map":{"version":3,"names":["script","defineComponent","name","componentName","props","label","String","disabled","type","Boolean","default","setup","visible","ref","instance","getCurrentInstance","children","provide","selectGroupKey","reactive","toRefs","select","inject","selectKey","onMounted","value","flattedChildren","subTree","node","children2","Array","isArray","forEach","child","component","proxy","push","_a","length","groupQueryChange","toRaw","watch","some","option"],"sources":["../../../../../../packages/components/select/src/option-group.vue"],"sourcesContent":["<template>\n  <ul v-show=\"visible\" class=\"el-select-group__wrap\">\n    <li class=\"el-select-group__title\">{{ label }}</li>\n    <li>\n      <ul class=\"el-select-group\">\n        <slot></slot>\n      </ul>\n    </li>\n  </ul>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  provide,\n  inject,\n  ref,\n  reactive,\n  toRefs,\n  getCurrentInstance,\n  onMounted,\n  watch,\n  toRaw,\n} from 'vue'\nimport { selectGroupKey, selectKey } from './token'\n\nexport default defineComponent({\n  name: 'ElOptionGroup',\n  componentName: 'ElOptionGroup',\n\n  props: {\n    label: String,\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  setup(props) {\n    const visible = ref(true)\n    const instance = getCurrentInstance()\n    const children = ref([])\n\n    provide(\n      selectGroupKey,\n      reactive({\n        ...toRefs(props),\n      })\n    )\n\n    const select = inject(selectKey)\n\n    onMounted(() => {\n      children.value = flattedChildren(instance.subTree)\n    })\n\n    // get all instances of options\n    const flattedChildren = (node) => {\n      const children = []\n      if (Array.isArray(node.children)) {\n        node.children.forEach((child) => {\n          if (\n            child.type &&\n            child.type.name === 'ElOption' &&\n            child.component &&\n            child.component.proxy\n          ) {\n            children.push(child.component.proxy)\n          } else if (child.children?.length) {\n            children.push(...flattedChildren(child))\n          }\n        })\n      }\n      return children\n    }\n\n    const { groupQueryChange } = toRaw(select)\n    watch(groupQueryChange, () => {\n      visible.value = children.value.some((option) => option.visible === true)\n    })\n\n    return {\n      visible,\n    }\n  },\n})\n</script>\n"],"mappings":";;;AA0BA,IAAAA,MAAA,GAAeC,eAAA,CAAgB;EAC7BC,IAAA,EAAM;EACNC,aAAA,EAAe;EAEfC,KAAA,EAAO;IACLC,KAAA,EAAOC,MAAA;IACPC,QAAA,EAAU;MACRC,IAAA,EAAMC,OAAA;MACNC,OAAA,EAAS;IAAA;EAAA;EAGbC,MAAMP,KAAA,EAAO;IACX,MAAMQ,OAAA,GAAUC,GAAA,CAAI;IACpB,MAAMC,QAAA,GAAWC,kBAAA;IACjB,MAAMC,QAAA,GAAWH,GAAA,CAAI;IAErBI,OAAA,CACEC,cAAA,EACAC,QAAA,CAAS;MAAA,GACJC,MAAA,CAAOhB,KAAA;IAAA;IAId,MAAMiB,MAAA,GAASC,MAAA,CAAOC,SAAA;IAEtBC,SAAA,CAAU,MAAM;MACdR,QAAA,CAASS,KAAA,GAAQC,eAAA,CAAgBZ,QAAA,CAASa,OAAA;IAAA;IAI5C,MAAMD,eAAA,GAAmBE,IAAA,IAAS;MAChC,MAAMC,SAAA,GAAW;MACjB,IAAIC,KAAA,CAAMC,OAAA,CAAQH,IAAA,CAAKZ,QAAA,GAAW;QAChCY,IAAA,CAAKZ,QAAA,CAASgB,OAAA,CAASC,KAAA,IAAU;;UAC/B,IACEA,KAAA,CAAMzB,IAAA,IACNyB,KAAA,CAAMzB,IAAA,CAAKN,IAAA,KAAS,cACpB+B,KAAA,CAAMC,SAAA,IACND,KAAA,CAAMC,SAAA,CAAUC,KAAA,EAChB;YACAN,SAAA,CAASO,IAAA,CAAKH,KAAA,CAAMC,SAAA,CAAUC,KAAA;UAAA,WACrB,CAAAE,EAAA,GAAAJ,KAAA,CAAMjB,QAAA,KAAN,gBAAAqB,EAAA,CAAgBC,MAAA,EAAQ;YACjCT,SAAA,CAASO,IAAA,CAAK,GAAGV,eAAA,CAAgBO,KAAA;UAAA;QAAA;MAAA;MAIvC,OAAOJ,SAAA;IAAA;IAGT,MAAM;MAAEU;IAAA,IAAqBC,KAAA,CAAMnB,MAAA;IACnCoB,KAAA,CAAMF,gBAAA,EAAkB,MAAM;MAC5B3B,OAAA,CAAQa,KAAA,GAAQT,QAAA,CAASS,KAAA,CAAMiB,IAAA,CAAMC,MAAA,IAAWA,MAAA,CAAO/B,OAAA,KAAY;IAAA;IAGrE,OAAO;MACLA;IAAA;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}