{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getCurrentInstance, computed } from 'vue';\nimport useMapState from './mapState-helper.mjs';\nfunction useStyle(props) {\n  const instance = getCurrentInstance();\n  const table = instance.parent;\n  const store = table.store;\n  const {\n    leftFixedLeafCount,\n    rightFixedLeafCount,\n    columnsCount,\n    leftFixedCount,\n    rightFixedCount,\n    columns\n  } = useMapState();\n  const hasGutter = computed(() => {\n    return !props.fixed && !table.layout.gutterWidth;\n  });\n  const isCellHidden = (index, columns2, column) => {\n    if (props.fixed || props.fixed === \"left\") {\n      return index >= leftFixedLeafCount.value;\n    } else if (props.fixed === \"right\") {\n      let before = 0;\n      for (let i = 0; i < index; i++) {\n        before += columns2[i].colSpan;\n      }\n      return before < columnsCount.value - rightFixedLeafCount.value;\n    } else if (!props.fixed && column.fixed) {\n      return true;\n    } else {\n      return index < leftFixedCount.value || index >= columnsCount.value - rightFixedCount.value;\n    }\n  };\n  const getRowClasses = (column, cellIndex) => {\n    const classes = [column.id, column.align, column.labelClassName];\n    if (column.className) {\n      classes.push(column.className);\n    }\n    if (isCellHidden(cellIndex, store.states.columns.value, column)) {\n      classes.push(\"is-hidden\");\n    }\n    if (!column.children) {\n      classes.push(\"is-leaf\");\n    }\n    return classes;\n  };\n  return {\n    hasGutter,\n    getRowClasses,\n    columns\n  };\n}\nexport { useStyle as default };","map":{"version":3,"names":["useStyle","props","instance","getCurrentInstance","table","parent","store","leftFixedLeafCount","rightFixedLeafCount","columnsCount","leftFixedCount","rightFixedCount","columns","useMapState","hasGutter","computed","fixed","layout","gutterWidth","isCellHidden","index","columns2","column","value","before","i","colSpan","getRowClasses","cellIndex","classes","id","align","labelClassName","className","push","states","children"],"sources":["../../../../../../../packages/components/table/src/table-footer/style-helper.ts"],"sourcesContent":["import { computed, getCurrentInstance } from 'vue'\nimport useMapState from './mapState-helper'\n\nimport type { Table } from '../table/defaults'\nimport type { TableColumnCtx } from '../table-column/defaults'\nimport type { TableFooter } from '.'\n\nfunction useStyle<T>(props: TableFooter<T>) {\n  const instance = getCurrentInstance()\n  const table = instance.parent as Table<T>\n  const store = table.store\n\n  const {\n    leftFixedLeafCount,\n    rightFixedLeafCount,\n    columnsCount,\n    leftFixedCount,\n    rightFixedCount,\n    columns,\n  } = useMapState<T>()\n\n  const hasGutter = computed(() => {\n    return !props.fixed && !table.layout.gutterWidth\n  })\n  const isCellHidden = (\n    index: number,\n    columns: TableColumnCtx<T>[],\n    column: TableColumnCtx<T>\n  ) => {\n    if (props.fixed || props.fixed === 'left') {\n      return index >= leftFixedLeafCount.value\n    } else if (props.fixed === 'right') {\n      let before = 0\n      for (let i = 0; i < index; i++) {\n        before += columns[i].colSpan\n      }\n      return before < columnsCount.value - rightFixedLeafCount.value\n    } else if (!props.fixed && column.fixed) {\n      // hide cell when footer instance is not fixed and column is fixed\n      return true\n    } else {\n      return (\n        index < leftFixedCount.value ||\n        index >= columnsCount.value - rightFixedCount.value\n      )\n    }\n  }\n  const getRowClasses = (column: TableColumnCtx<T>, cellIndex: number) => {\n    const classes = [column.id, column.align, column.labelClassName]\n    if (column.className) {\n      classes.push(column.className)\n    }\n    if (isCellHidden(cellIndex, store.states.columns.value, column)) {\n      classes.push('is-hidden')\n    }\n    if (!column.children) {\n      classes.push('is-leaf')\n    }\n    return classes\n  }\n\n  return {\n    hasGutter,\n    getRowClasses,\n    columns,\n  }\n}\n\nexport default useStyle\n"],"mappings":";;;AAOA,SAAAA,SAAqBC,KAAA,EAAuB;EAC1C,MAAMC,QAAA,GAAWC,kBAAA;EACjB,MAAMC,KAAA,GAAQF,QAAA,CAASG,MAAA;EACvB,MAAMC,KAAA,GAAQF,KAAA,CAAME,KAAA;EAEpB,MAAM;IACJC,kBAAA;IACAC,mBAAA;IACAC,YAAA;IACAC,cAAA;IACAC,eAAA;IACAC;EAAA,IACEC,WAAA;EAEJ,MAAMC,SAAA,GAAYC,QAAA,CAAS,MAAM;IAC/B,OAAO,CAACd,KAAA,CAAMe,KAAA,IAAS,CAACZ,KAAA,CAAMa,MAAA,CAAOC,WAAA;EAAA;EAEvC,MAAMC,YAAA,GAAeA,CACnBC,KAAA,EACAC,QAAA,EACAC,MAAA,KACG;IACH,IAAIrB,KAAA,CAAMe,KAAA,IAASf,KAAA,CAAMe,KAAA,KAAU,QAAQ;MACzC,OAAOI,KAAA,IAASb,kBAAA,CAAmBgB,KAAA;IAAA,WAC1BtB,KAAA,CAAMe,KAAA,KAAU,SAAS;MAClC,IAAIQ,MAAA,GAAS;MACb,SAASC,CAAA,GAAI,GAAGA,CAAA,GAAIL,KAAA,EAAOK,CAAA,IAAK;QAC9BD,MAAA,IAAUH,QAAA,CAAQI,CAAA,EAAGC,OAAA;MAAA;MAEvB,OAAOF,MAAA,GAASf,YAAA,CAAac,KAAA,GAAQf,mBAAA,CAAoBe,KAAA;IAAA,WAChD,CAACtB,KAAA,CAAMe,KAAA,IAASM,MAAA,CAAON,KAAA,EAAO;MAEvC,OAAO;IAAA,OACF;MACL,OACEI,KAAA,GAAQV,cAAA,CAAea,KAAA,IACvBH,KAAA,IAASX,YAAA,CAAac,KAAA,GAAQZ,eAAA,CAAgBY,KAAA;IAAA;EAAA;EAIpD,MAAMI,aAAA,GAAgBA,CAACL,MAAA,EAA2BM,SAAA,KAAsB;IACtE,MAAMC,OAAA,GAAU,CAACP,MAAA,CAAOQ,EAAA,EAAIR,MAAA,CAAOS,KAAA,EAAOT,MAAA,CAAOU,cAAA;IACjD,IAAIV,MAAA,CAAOW,SAAA,EAAW;MACpBJ,OAAA,CAAQK,IAAA,CAAKZ,MAAA,CAAOW,SAAA;IAAA;IAEtB,IAAId,YAAA,CAAaS,SAAA,EAAWtB,KAAA,CAAM6B,MAAA,CAAOvB,OAAA,CAAQW,KAAA,EAAOD,MAAA,GAAS;MAC/DO,OAAA,CAAQK,IAAA,CAAK;IAAA;IAEf,IAAI,CAACZ,MAAA,CAAOc,QAAA,EAAU;MACpBP,OAAA,CAAQK,IAAA,CAAK;IAAA;IAEf,OAAOL,OAAA;EAAA;EAGT,OAAO;IACLf,SAAA;IACAa,aAAA;IACAf;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}