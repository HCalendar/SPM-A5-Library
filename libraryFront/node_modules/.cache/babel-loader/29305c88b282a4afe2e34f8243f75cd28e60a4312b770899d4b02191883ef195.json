{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent, inject, ref, computed, nextTick, watch, onMounted, onBeforeUnmount } from 'vue';\nimport { isPromise } from '@vue/shared';\nimport debounce from 'lodash/debounce';\nimport _CascaderPanel from '../../cascader-panel/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport _Popper from '../../popper/index.mjs';\nimport { ElScrollbar } from '../../scrollbar/index.mjs';\nimport { ElTag } from '../../tag/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../directives/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { EVENT_CODE, focusNode, getSibling } from '../../../utils/aria.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../utils/constants.mjs';\nimport isServer from '../../../utils/isServer.mjs';\nimport { addResizeListener, removeResizeListener } from '../../../utils/resize-event.mjs';\nimport { isValidComponentSize } from '../../../utils/validators.mjs';\nimport { isKorean } from '../../../utils/isDef.mjs';\nimport { CircleClose, Check, ArrowDown } from '@element-plus/icons-vue';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\nimport { CommonProps } from '../../cascader-panel/src/config.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { elFormKey, elFormItemKey } from '../../../tokens/form.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { Effect } from '../../popper/src/use-popper/defaults.mjs';\nconst DEFAULT_INPUT_HEIGHT = 40;\nconst INPUT_HEIGHT_MAP = {\n  medium: 36,\n  small: 32,\n  mini: 28\n};\nconst popperOptions = {\n  modifiers: [{\n    name: \"arrowPosition\",\n    enabled: true,\n    phase: \"main\",\n    fn: ({\n      state\n    }) => {\n      const {\n        modifiersData,\n        placement\n      } = state;\n      if ([\"right\", \"left\"].includes(placement)) return;\n      modifiersData.arrow.x = 35;\n    },\n    requires: [\"arrow\"]\n  }]\n};\nvar script = defineComponent({\n  name: \"ElCascader\",\n  components: {\n    ElCascaderPanel: _CascaderPanel,\n    ElInput,\n    ElPopper: _Popper,\n    ElScrollbar,\n    ElTag,\n    ElIcon,\n    CircleClose,\n    Check,\n    ArrowDown\n  },\n  directives: {\n    Clickoutside: ClickOutside\n  },\n  props: {\n    ...CommonProps,\n    size: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    placeholder: {\n      type: String\n    },\n    disabled: Boolean,\n    clearable: Boolean,\n    filterable: Boolean,\n    filterMethod: {\n      type: Function,\n      default: (node, keyword) => node.text.includes(keyword)\n    },\n    separator: {\n      type: String,\n      default: \" / \"\n    },\n    showAllLevels: {\n      type: Boolean,\n      default: true\n    },\n    collapseTags: Boolean,\n    debounce: {\n      type: Number,\n      default: 300\n    },\n    beforeFilter: {\n      type: Function,\n      default: () => true\n    },\n    popperClass: {\n      type: String,\n      default: \"\"\n    },\n    popperAppendToBody: {\n      type: Boolean,\n      default: true\n    }\n  },\n  emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT, \"focus\", \"blur\", \"visible-change\", \"expand-change\", \"remove-tag\"],\n  setup(props, {\n    emit\n  }) {\n    let inputInitialHeight = 0;\n    let pressDeleteCount = 0;\n    const {\n      t\n    } = useLocale();\n    const elForm = inject(elFormKey, {});\n    const elFormItem = inject(elFormItemKey, {});\n    const popper = ref(null);\n    const input = ref(null);\n    const tagWrapper = ref(null);\n    const panel = ref(null);\n    const suggestionPanel = ref(null);\n    const popperVisible = ref(false);\n    const inputHover = ref(false);\n    const filtering = ref(false);\n    const inputValue = ref(\"\");\n    const searchInputValue = ref(\"\");\n    const presentTags = ref([]);\n    const suggestions = ref([]);\n    const isOnComposition = ref(false);\n    const isDisabled = computed(() => props.disabled || elForm.disabled);\n    const inputPlaceholder = computed(() => props.placeholder || t(\"el.cascader.placeholder\"));\n    const realSize = useSize();\n    const tagSize = computed(() => [\"small\", \"mini\"].includes(realSize.value) ? \"mini\" : \"small\");\n    const multiple = computed(() => !!props.props.multiple);\n    const readonly = computed(() => !props.filterable || multiple.value);\n    const searchKeyword = computed(() => multiple.value ? searchInputValue.value : inputValue.value);\n    const checkedNodes = computed(() => {\n      var _a;\n      return ((_a = panel.value) == null ? void 0 : _a.checkedNodes) || [];\n    });\n    const clearBtnVisible = computed(() => {\n      if (!props.clearable || isDisabled.value || filtering.value || !inputHover.value) return false;\n      return !!checkedNodes.value.length;\n    });\n    const presentText = computed(() => {\n      const {\n        showAllLevels,\n        separator\n      } = props;\n      const nodes = checkedNodes.value;\n      return nodes.length ? multiple.value ? \" \" : nodes[0].calcText(showAllLevels, separator) : \"\";\n    });\n    const checkedValue = computed({\n      get() {\n        return props.modelValue;\n      },\n      set(val) {\n        var _a;\n        emit(UPDATE_MODEL_EVENT, val);\n        emit(CHANGE_EVENT, val);\n        (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\");\n      }\n    });\n    const popperPaneRef = computed(() => {\n      var _a;\n      return (_a = popper.value) == null ? void 0 : _a.popperRef;\n    });\n    const togglePopperVisible = visible => {\n      var _a, _b, _c;\n      if (isDisabled.value) return;\n      visible = visible != null ? visible : !popperVisible.value;\n      if (visible !== popperVisible.value) {\n        popperVisible.value = visible;\n        (_b = (_a = input.value) == null ? void 0 : _a.input) == null ? void 0 : _b.setAttribute(\"aria-expanded\", `${visible}`);\n        if (visible) {\n          updatePopperPosition();\n          nextTick((_c = panel.value) == null ? void 0 : _c.scrollToExpandingNode);\n        } else if (props.filterable) {\n          const {\n            value\n          } = presentText;\n          inputValue.value = value;\n          searchInputValue.value = value;\n        }\n        emit(\"visible-change\", visible);\n      }\n    };\n    const updatePopperPosition = () => {\n      var _a;\n      nextTick((_a = popper.value) == null ? void 0 : _a.update);\n    };\n    const hideSuggestionPanel = () => {\n      filtering.value = false;\n    };\n    const genTag = node => {\n      const {\n        showAllLevels,\n        separator\n      } = props;\n      return {\n        node,\n        key: node.uid,\n        text: node.calcText(showAllLevels, separator),\n        hitState: false,\n        closable: !isDisabled.value && !node.isDisabled\n      };\n    };\n    const deleteTag = tag => {\n      var _a;\n      const node = tag.node;\n      node.doCheck(false);\n      (_a = panel.value) == null ? void 0 : _a.calculateCheckedValue();\n      emit(\"remove-tag\", node.valueByOption);\n    };\n    const calculatePresentTags = () => {\n      if (!multiple.value) return;\n      const nodes = checkedNodes.value;\n      const tags = [];\n      if (nodes.length) {\n        const [first, ...rest] = nodes;\n        const restCount = rest.length;\n        tags.push(genTag(first));\n        if (restCount) {\n          if (props.collapseTags) {\n            tags.push({\n              key: -1,\n              text: `+ ${restCount}`,\n              closable: false\n            });\n          } else {\n            rest.forEach(node => tags.push(genTag(node)));\n          }\n        }\n      }\n      presentTags.value = tags;\n    };\n    const calculateSuggestions = () => {\n      var _a, _b;\n      const {\n        filterMethod,\n        showAllLevels,\n        separator\n      } = props;\n      const res = (_b = (_a = panel.value) == null ? void 0 : _a.getFlattedNodes(!props.props.checkStrictly)) == null ? void 0 : _b.filter(node => {\n        if (node.isDisabled) return false;\n        node.calcText(showAllLevels, separator);\n        return filterMethod(node, searchKeyword.value);\n      });\n      if (multiple.value) {\n        presentTags.value.forEach(tag => {\n          tag.hitState = false;\n        });\n      }\n      filtering.value = true;\n      suggestions.value = res;\n      updatePopperPosition();\n    };\n    const focusFirstNode = () => {\n      var _a;\n      let firstNode;\n      if (filtering.value && suggestionPanel.value) {\n        firstNode = suggestionPanel.value.$el.querySelector(\".el-cascader__suggestion-item\");\n      } else {\n        firstNode = (_a = panel.value) == null ? void 0 : _a.$el.querySelector('.el-cascader-node[tabindex=\"-1\"]');\n      }\n      if (firstNode) {\n        firstNode.focus();\n        !filtering.value && firstNode.click();\n      }\n    };\n    const updateStyle = () => {\n      var _a, _b;\n      const inputInner = (_a = input.value) == null ? void 0 : _a.input;\n      const tagWrapperEl = tagWrapper.value;\n      const suggestionPanelEl = (_b = suggestionPanel.value) == null ? void 0 : _b.$el;\n      if (isServer || !inputInner) return;\n      if (suggestionPanelEl) {\n        const suggestionList = suggestionPanelEl.querySelector(\".el-cascader__suggestion-list\");\n        suggestionList.style.minWidth = `${inputInner.offsetWidth}px`;\n      }\n      if (tagWrapperEl) {\n        const {\n          offsetHeight\n        } = tagWrapperEl;\n        const height = presentTags.value.length > 0 ? `${Math.max(offsetHeight + 6, inputInitialHeight)}px` : `${inputInitialHeight}px`;\n        inputInner.style.height = height;\n        updatePopperPosition();\n      }\n    };\n    const getCheckedNodes = leafOnly => {\n      var _a;\n      return (_a = panel.value) == null ? void 0 : _a.getCheckedNodes(leafOnly);\n    };\n    const handleExpandChange = value => {\n      updatePopperPosition();\n      emit(\"expand-change\", value);\n    };\n    const handleComposition = event => {\n      var _a;\n      const text = (_a = event.target) == null ? void 0 : _a.value;\n      if (event.type === \"compositionend\") {\n        isOnComposition.value = false;\n        nextTick(() => handleInput(text));\n      } else {\n        const lastCharacter = text[text.length - 1] || \"\";\n        isOnComposition.value = !isKorean(lastCharacter);\n      }\n    };\n    const handleKeyDown = e => {\n      if (isOnComposition.value) return;\n      switch (e.code) {\n        case EVENT_CODE.enter:\n          togglePopperVisible();\n          break;\n        case EVENT_CODE.down:\n          togglePopperVisible(true);\n          nextTick(focusFirstNode);\n          e.preventDefault();\n          break;\n        case EVENT_CODE.esc:\n        case EVENT_CODE.tab:\n          togglePopperVisible(false);\n          break;\n      }\n    };\n    const handleClear = () => {\n      var _a;\n      (_a = panel.value) == null ? void 0 : _a.clearCheckedNodes();\n      togglePopperVisible(false);\n    };\n    const handleSuggestionClick = node => {\n      var _a, _b;\n      const {\n        checked\n      } = node;\n      if (multiple.value) {\n        (_a = panel.value) == null ? void 0 : _a.handleCheckChange(node, !checked, false);\n      } else {\n        !checked && ((_b = panel.value) == null ? void 0 : _b.handleCheckChange(node, true, false));\n        togglePopperVisible(false);\n      }\n    };\n    const handleSuggestionKeyDown = e => {\n      const target = e.target;\n      const {\n        code\n      } = e;\n      switch (code) {\n        case EVENT_CODE.up:\n        case EVENT_CODE.down:\n          {\n            const distance = code === EVENT_CODE.up ? -1 : 1;\n            focusNode(getSibling(target, distance, '.el-cascader__suggestion-item[tabindex=\"-1\"]'));\n            break;\n          }\n        case EVENT_CODE.enter:\n          target.click();\n          break;\n        case EVENT_CODE.esc:\n        case EVENT_CODE.tab:\n          togglePopperVisible(false);\n          break;\n      }\n    };\n    const handleDelete = () => {\n      const tags = presentTags.value;\n      const lastTag = tags[tags.length - 1];\n      pressDeleteCount = searchInputValue.value ? 0 : pressDeleteCount + 1;\n      if (!lastTag || !pressDeleteCount) return;\n      if (lastTag.hitState) {\n        deleteTag(lastTag);\n      } else {\n        lastTag.hitState = true;\n      }\n    };\n    const handleFilter = debounce(() => {\n      const {\n        value\n      } = searchKeyword;\n      if (!value) return;\n      const passed = props.beforeFilter(value);\n      if (isPromise(passed)) {\n        passed.then(calculateSuggestions).catch(() => {});\n      } else if (passed !== false) {\n        calculateSuggestions();\n      } else {\n        hideSuggestionPanel();\n      }\n    }, props.debounce);\n    const handleInput = (val, e) => {\n      !popperVisible.value && togglePopperVisible(true);\n      if (e == null ? void 0 : e.isComposing) return;\n      val ? handleFilter() : hideSuggestionPanel();\n    };\n    watch(filtering, updatePopperPosition);\n    watch([checkedNodes, isDisabled], calculatePresentTags);\n    watch(presentTags, () => {\n      nextTick(() => updateStyle());\n    });\n    watch(presentText, val => inputValue.value = val, {\n      immediate: true\n    });\n    onMounted(() => {\n      var _a;\n      const inputEl = (_a = input.value) == null ? void 0 : _a.$el;\n      inputInitialHeight = (inputEl == null ? void 0 : inputEl.offsetHeight) || INPUT_HEIGHT_MAP[realSize.value] || DEFAULT_INPUT_HEIGHT;\n      addResizeListener(inputEl, updateStyle);\n    });\n    onBeforeUnmount(() => {\n      var _a;\n      removeResizeListener((_a = input.value) == null ? void 0 : _a.$el, updateStyle);\n    });\n    return {\n      Effect,\n      popperOptions,\n      popper,\n      popperPaneRef,\n      input,\n      tagWrapper,\n      panel,\n      suggestionPanel,\n      popperVisible,\n      inputHover,\n      inputPlaceholder,\n      filtering,\n      presentText,\n      checkedValue,\n      inputValue,\n      searchInputValue,\n      presentTags,\n      suggestions,\n      isDisabled,\n      isOnComposition,\n      realSize,\n      tagSize,\n      multiple,\n      readonly,\n      clearBtnVisible,\n      t,\n      togglePopperVisible,\n      hideSuggestionPanel,\n      deleteTag,\n      focusFirstNode,\n      getCheckedNodes,\n      handleExpandChange,\n      handleKeyDown,\n      handleComposition,\n      handleClear,\n      handleSuggestionClick,\n      handleSuggestionKeyDown,\n      handleDelete,\n      handleInput\n    };\n  }\n});\nexport { script as default };","map":{"version":3,"names":["DEFAULT_INPUT_HEIGHT","INPUT_HEIGHT_MAP","medium","small","mini","popperOptions","modifiers","name","enabled","phase","fn","state","modifiersData","placement","includes","arrow","x","requires","script","defineComponent","components","ElCascaderPanel","_CascaderPanel","ElInput","ElPopper","_Popper","ElScrollbar","ElTag","ElIcon","CircleClose","Check","ArrowDown","directives","Clickoutside","ClickOutside","props","CommonProps","size","type","String","validator","isValidComponentSize","placeholder","disabled","Boolean","clearable","filterable","filterMethod","Function","default","node","keyword","text","separator","showAllLevels","collapseTags","debounce","Number","beforeFilter","popperClass","popperAppendToBody","emits","UPDATE_MODEL_EVENT","CHANGE_EVENT","setup","emit","inputInitialHeight","pressDeleteCount","t","useLocale","elForm","inject","elFormKey","elFormItem","elFormItemKey","popper","ref","input","tagWrapper","panel","suggestionPanel","popperVisible","inputHover","filtering","inputValue","searchInputValue","presentTags","suggestions","isOnComposition","isDisabled","computed","inputPlaceholder","realSize","useSize","tagSize","value","multiple","readonly","searchKeyword","checkedNodes","_a","clearBtnVisible","length","presentText","nodes","calcText","checkedValue","get","modelValue","set","val","validate","call","popperPaneRef","popperRef","togglePopperVisible","visible","_b","setAttribute","updatePopperPosition","nextTick","_c","scrollToExpandingNode","update","hideSuggestionPanel","genTag","key","uid","hitState","closable","deleteTag","tag","doCheck","calculateCheckedValue","valueByOption","calculatePresentTags","tags","first","rest","restCount","push","forEach","calculateSuggestions","res","getFlattedNodes","checkStrictly","filter","focusFirstNode","firstNode","$el","querySelector","focus","click","updateStyle","inputInner","tagWrapperEl","suggestionPanelEl","isServer","suggestionList","style","minWidth","offsetWidth","offsetHeight","height","Math","max","getCheckedNodes","leafOnly","handleExpandChange","handleComposition","event","target","handleInput","lastCharacter","isKorean","handleKeyDown","e","code","EVENT_CODE","enter","down","preventDefault","esc","tab","handleClear","clearCheckedNodes","handleSuggestionClick","checked","handleCheckChange","handleSuggestionKeyDown","up","distance","focusNode","getSibling","handleDelete","lastTag","handleFilter","passed","isPromise","then","catch","isComposing","watch","immediate","onMounted","inputEl","addResizeListener","onBeforeUnmount","removeResizeListener","Effect"],"sources":["../../../../../../packages/components/cascader/src/index.vue"],"sourcesContent":["<template>\n  <el-popper\n    ref=\"popper\"\n    v-model:visible=\"popperVisible\"\n    manual-mode\n    :append-to-body=\"popperAppendToBody\"\n    placement=\"bottom-start\"\n    :popper-class=\"`el-cascader__dropdown ${popperClass}`\"\n    :popper-options=\"popperOptions\"\n    :fallback-placements=\"['bottom-start', 'top-start', 'right', 'left']\"\n    :stop-popper-mouse-event=\"false\"\n    transition=\"el-zoom-in-top\"\n    :gpu-acceleration=\"false\"\n    :effect=\"Effect.LIGHT\"\n    pure\n    @after-leave=\"hideSuggestionPanel\"\n  >\n    <template #trigger>\n      <div\n        v-clickoutside:[popperPaneRef]=\"() => togglePopperVisible(false)\"\n        :class=\"[\n          'el-cascader',\n          realSize && `el-cascader--${realSize}`,\n          { 'is-disabled': isDisabled },\n        ]\"\n        @click=\"() => togglePopperVisible(readonly ? undefined : true)\"\n        @keydown=\"handleKeyDown\"\n        @mouseenter=\"inputHover = true\"\n        @mouseleave=\"inputHover = false\"\n      >\n        <el-input\n          ref=\"input\"\n          v-model.trim=\"inputValue\"\n          :placeholder=\"inputPlaceholder\"\n          :readonly=\"readonly\"\n          :disabled=\"isDisabled\"\n          :validate-event=\"false\"\n          :size=\"realSize\"\n          :class=\"{ 'is-focus': popperVisible }\"\n          @compositionstart=\"handleComposition\"\n          @compositionupdate=\"handleComposition\"\n          @compositionend=\"handleComposition\"\n          @focus=\"(e) => $emit('focus', e)\"\n          @blur=\"(e) => $emit('blur', e)\"\n          @input=\"handleInput\"\n        >\n          <template #suffix>\n            <el-icon\n              v-if=\"clearBtnVisible\"\n              key=\"clear\"\n              class=\"el-input__icon icon-circle-close\"\n              @click.stop=\"handleClear\"\n            >\n              <circle-close />\n            </el-icon>\n            <el-icon\n              v-else\n              key=\"arrow-down\"\n              :class=\"[\n                'el-input__icon',\n                'icon-arrow-down',\n                popperVisible && 'is-reverse',\n              ]\"\n              @click.stop=\"togglePopperVisible()\"\n            >\n              <arrow-down />\n            </el-icon>\n          </template>\n        </el-input>\n\n        <div v-if=\"multiple\" ref=\"tagWrapper\" class=\"el-cascader__tags\">\n          <el-tag\n            v-for=\"tag in presentTags\"\n            :key=\"tag.key\"\n            type=\"info\"\n            :size=\"tagSize\"\n            :hit=\"tag.hitState\"\n            :closable=\"tag.closable\"\n            disable-transitions\n            @close=\"deleteTag(tag)\"\n          >\n            <span>{{ tag.text }}</span>\n          </el-tag>\n          <input\n            v-if=\"filterable && !isDisabled\"\n            v-model.trim=\"searchInputValue\"\n            type=\"text\"\n            class=\"el-cascader__search-input\"\n            :placeholder=\"presentText ? '' : inputPlaceholder\"\n            @input=\"(e) => handleInput(searchInputValue, e)\"\n            @click.stop=\"togglePopperVisible(true)\"\n            @keydown.delete=\"handleDelete\"\n            @compositionstart=\"handleComposition\"\n            @compositionupdate=\"handleComposition\"\n            @compositionend=\"handleComposition\"\n          />\n        </div>\n      </div>\n    </template>\n\n    <template #default>\n      <el-cascader-panel\n        v-show=\"!filtering\"\n        ref=\"panel\"\n        v-model=\"checkedValue\"\n        :options=\"options\"\n        :props=\"props\"\n        :border=\"false\"\n        :render-label=\"$slots.default\"\n        @expand-change=\"handleExpandChange\"\n        @close=\"togglePopperVisible(false)\"\n      />\n      <el-scrollbar\n        v-if=\"filterable\"\n        v-show=\"filtering\"\n        ref=\"suggestionPanel\"\n        tag=\"ul\"\n        class=\"el-cascader__suggestion-panel\"\n        view-class=\"el-cascader__suggestion-list\"\n        @keydown=\"handleSuggestionKeyDown\"\n      >\n        <template v-if=\"suggestions.length\">\n          <li\n            v-for=\"item in suggestions\"\n            :key=\"item.uid\"\n            :class=\"[\n              'el-cascader__suggestion-item',\n              item.checked && 'is-checked',\n            ]\"\n            :tabindex=\"-1\"\n            @click=\"handleSuggestionClick(item)\"\n          >\n            <span>{{ item.text }}</span>\n            <el-icon v-if=\"item.checked\"><check /></el-icon>\n          </li>\n        </template>\n        <slot v-else name=\"empty\">\n          <li class=\"el-cascader__empty-text\">\n            {{ t('el.cascader.noMatch') }}\n          </li>\n        </slot>\n      </el-scrollbar>\n    </template>\n  </el-popper>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  inject,\n  nextTick,\n  onMounted,\n  onBeforeUnmount,\n  ref,\n  watch,\n} from 'vue'\nimport { isPromise } from '@vue/shared'\nimport debounce from 'lodash/debounce'\n\nimport ElCascaderPanel, {\n  CommonProps,\n} from '@element-plus/components/cascader-panel'\nimport ElInput from '@element-plus/components/input'\nimport ElPopper, { Effect } from '@element-plus/components/popper'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElTag from '@element-plus/components/tag'\nimport ElIcon from '@element-plus/components/icon'\n\nimport { elFormKey, elFormItemKey } from '@element-plus/tokens'\nimport { ClickOutside as Clickoutside } from '@element-plus/directives'\nimport { useLocale, useSize } from '@element-plus/hooks'\n\nimport { EVENT_CODE, focusNode, getSibling } from '@element-plus/utils/aria'\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '@element-plus/utils/constants'\nimport isServer from '@element-plus/utils/isServer'\nimport {\n  addResizeListener,\n  removeResizeListener,\n} from '@element-plus/utils/resize-event'\nimport { isValidComponentSize } from '@element-plus/utils/validators'\nimport { isKorean } from '@element-plus/utils/isDef'\nimport { CircleClose, Check, ArrowDown } from '@element-plus/icons-vue'\n\nimport type { Options } from '@element-plus/components/popper'\nimport type { ComputedRef, PropType, Ref } from 'vue'\nimport type { ElFormContext, ElFormItemContext } from '@element-plus/tokens'\nimport type {\n  CascaderValue,\n  CascaderNode,\n  Tag,\n} from '@element-plus/components/cascader-panel'\nimport type { ComponentSize } from '@element-plus/utils/types'\n\ntype cascaderPanelType = InstanceType<typeof ElCascaderPanel>\ntype popperType = InstanceType<typeof ElPopper>\ntype inputType = InstanceType<typeof ElInput>\ntype suggestionPanelType = InstanceType<typeof ElScrollbar>\n\nconst DEFAULT_INPUT_HEIGHT = 40\n\nconst INPUT_HEIGHT_MAP = {\n  medium: 36,\n  small: 32,\n  mini: 28,\n}\n\nconst popperOptions: Partial<Options> = {\n  modifiers: [\n    {\n      name: 'arrowPosition',\n      enabled: true,\n      phase: 'main',\n      fn: ({ state }) => {\n        const { modifiersData, placement } = state as any\n        if (['right', 'left'].includes(placement)) return\n        modifiersData.arrow.x = 35\n      },\n      requires: ['arrow'],\n    },\n  ],\n}\n\nexport default defineComponent({\n  name: 'ElCascader',\n\n  components: {\n    ElCascaderPanel,\n    ElInput,\n    ElPopper,\n    ElScrollbar,\n    ElTag,\n    ElIcon,\n    CircleClose,\n    Check,\n    ArrowDown,\n  },\n\n  directives: {\n    Clickoutside,\n  },\n\n  props: {\n    ...CommonProps,\n    size: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    placeholder: {\n      type: String,\n    },\n    disabled: Boolean,\n    clearable: Boolean,\n    filterable: Boolean,\n    filterMethod: {\n      type: Function as PropType<\n        (node: CascaderNode, keyword: string) => boolean\n      >,\n      default: (node: CascaderNode, keyword: string) =>\n        node.text.includes(keyword),\n    },\n    separator: {\n      type: String,\n      default: ' / ',\n    },\n    showAllLevels: {\n      type: Boolean,\n      default: true,\n    },\n    collapseTags: Boolean,\n    debounce: {\n      type: Number,\n      default: 300,\n    },\n    beforeFilter: {\n      type: Function as PropType<(value: string) => boolean | Promise<any>>,\n      default: () => true,\n    },\n    popperClass: {\n      type: String,\n      default: '',\n    },\n    popperAppendToBody: {\n      type: Boolean,\n      default: true,\n    },\n  },\n\n  emits: [\n    UPDATE_MODEL_EVENT,\n    CHANGE_EVENT,\n    'focus',\n    'blur',\n    'visible-change',\n    'expand-change',\n    'remove-tag',\n  ],\n\n  setup(props, { emit }) {\n    let inputInitialHeight = 0\n    let pressDeleteCount = 0\n\n    const { t } = useLocale()\n    const elForm = inject(elFormKey, {} as ElFormContext)\n    const elFormItem = inject(elFormItemKey, {} as ElFormItemContext)\n\n    const popper: Ref<popperType | null> = ref(null)\n    const input: Ref<inputType | null> = ref(null)\n    const tagWrapper = ref(null)\n    const panel: Ref<cascaderPanelType | null> = ref(null)\n    const suggestionPanel: Ref<suggestionPanelType | null> = ref(null)\n    const popperVisible = ref(false)\n    const inputHover = ref(false)\n    const filtering = ref(false)\n    const inputValue = ref('')\n    const searchInputValue = ref('')\n    const presentTags: Ref<Tag[]> = ref([])\n    const suggestions: Ref<CascaderNode[]> = ref([])\n    const isOnComposition = ref(false)\n\n    const isDisabled = computed(() => props.disabled || elForm.disabled)\n    const inputPlaceholder = computed(\n      () => props.placeholder || t('el.cascader.placeholder')\n    )\n    const realSize = useSize()\n    const tagSize = computed(() =>\n      ['small', 'mini'].includes(realSize.value) ? 'mini' : 'small'\n    )\n    const multiple = computed(() => !!props.props.multiple)\n    const readonly = computed(() => !props.filterable || multiple.value)\n    const searchKeyword = computed(() =>\n      multiple.value ? searchInputValue.value : inputValue.value\n    )\n    const checkedNodes: ComputedRef<CascaderNode[]> = computed(\n      () => panel.value?.checkedNodes || []\n    )\n    const clearBtnVisible = computed(() => {\n      if (\n        !props.clearable ||\n        isDisabled.value ||\n        filtering.value ||\n        !inputHover.value\n      )\n        return false\n\n      return !!checkedNodes.value.length\n    })\n    const presentText = computed(() => {\n      const { showAllLevels, separator } = props\n      const nodes = checkedNodes.value\n      return nodes.length\n        ? multiple.value\n          ? ' '\n          : nodes[0].calcText(showAllLevels, separator)\n        : ''\n    })\n\n    const checkedValue = computed<CascaderValue>({\n      get() {\n        return props.modelValue\n      },\n      set(val) {\n        emit(UPDATE_MODEL_EVENT, val)\n        emit(CHANGE_EVENT, val)\n        elFormItem.validate?.('change')\n      },\n    })\n\n    const popperPaneRef = computed(() => {\n      return popper.value?.popperRef\n    })\n\n    const togglePopperVisible = (visible?: boolean) => {\n      if (isDisabled.value) return\n\n      visible = visible ?? !popperVisible.value\n\n      if (visible !== popperVisible.value) {\n        popperVisible.value = visible\n        input.value?.input?.setAttribute('aria-expanded', `${visible}`)\n\n        if (visible) {\n          updatePopperPosition()\n          nextTick(panel.value?.scrollToExpandingNode)\n        } else if (props.filterable) {\n          const { value } = presentText\n          inputValue.value = value\n          searchInputValue.value = value\n        }\n\n        emit('visible-change', visible)\n      }\n    }\n\n    const updatePopperPosition = () => {\n      nextTick(popper.value?.update)\n    }\n\n    const hideSuggestionPanel = () => {\n      filtering.value = false\n    }\n\n    const genTag = (node: CascaderNode): Tag => {\n      const { showAllLevels, separator } = props\n      return {\n        node,\n        key: node.uid,\n        text: node.calcText(showAllLevels, separator),\n        hitState: false,\n        closable: !isDisabled.value && !node.isDisabled,\n      }\n    }\n\n    const deleteTag = (tag: Tag) => {\n      const node = tag.node as CascaderNode\n      node.doCheck(false)\n      panel.value?.calculateCheckedValue()\n      emit('remove-tag', node.valueByOption)\n    }\n\n    const calculatePresentTags = () => {\n      if (!multiple.value) return\n\n      const nodes = checkedNodes.value\n      const tags: Tag[] = []\n\n      if (nodes.length) {\n        const [first, ...rest] = nodes\n        const restCount = rest.length\n\n        tags.push(genTag(first))\n\n        if (restCount) {\n          if (props.collapseTags) {\n            tags.push({\n              key: -1,\n              text: `+ ${restCount}`,\n              closable: false,\n            })\n          } else {\n            rest.forEach((node) => tags.push(genTag(node)))\n          }\n        }\n      }\n\n      presentTags.value = tags\n    }\n\n    const calculateSuggestions = () => {\n      const { filterMethod, showAllLevels, separator } = props\n      const res = panel.value\n        ?.getFlattedNodes(!props.props.checkStrictly)\n        ?.filter((node) => {\n          if (node.isDisabled) return false\n          node.calcText(showAllLevels, separator)\n          return filterMethod(node, searchKeyword.value)\n        })\n\n      if (multiple.value) {\n        presentTags.value.forEach((tag) => {\n          tag.hitState = false\n        })\n      }\n\n      filtering.value = true\n      suggestions.value = res!\n      updatePopperPosition()\n    }\n\n    const focusFirstNode = () => {\n      let firstNode!: HTMLElement\n\n      if (filtering.value && suggestionPanel.value) {\n        firstNode = suggestionPanel.value.$el.querySelector(\n          '.el-cascader__suggestion-item'\n        )\n      } else {\n        firstNode = panel.value?.$el.querySelector(\n          '.el-cascader-node[tabindex=\"-1\"]'\n        )\n      }\n\n      if (firstNode) {\n        firstNode.focus()\n        !filtering.value && firstNode.click()\n      }\n    }\n\n    const updateStyle = () => {\n      const inputInner = input.value?.input\n      const tagWrapperEl = tagWrapper.value\n      const suggestionPanelEl = suggestionPanel.value?.$el\n\n      if (isServer || !inputInner) return\n\n      if (suggestionPanelEl) {\n        const suggestionList = suggestionPanelEl.querySelector(\n          '.el-cascader__suggestion-list'\n        )\n        suggestionList.style.minWidth = `${inputInner.offsetWidth}px`\n      }\n\n      if (tagWrapperEl) {\n        const { offsetHeight } = tagWrapperEl\n        const height =\n          presentTags.value.length > 0\n            ? `${Math.max(offsetHeight + 6, inputInitialHeight)}px`\n            : `${inputInitialHeight}px`\n        inputInner.style.height = height\n        updatePopperPosition()\n      }\n    }\n\n    const getCheckedNodes = (leafOnly: boolean) => {\n      return panel.value?.getCheckedNodes(leafOnly)\n    }\n\n    const handleExpandChange = (value: CascaderValue) => {\n      updatePopperPosition()\n      emit('expand-change', value)\n    }\n\n    const handleComposition = (event: CompositionEvent) => {\n      const text = (event.target as HTMLInputElement)?.value\n      if (event.type === 'compositionend') {\n        isOnComposition.value = false\n        nextTick(() => handleInput(text))\n      } else {\n        const lastCharacter = text[text.length - 1] || ''\n        isOnComposition.value = !isKorean(lastCharacter)\n      }\n    }\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isOnComposition.value) return\n\n      switch (e.code) {\n        case EVENT_CODE.enter:\n          togglePopperVisible()\n          break\n        case EVENT_CODE.down:\n          togglePopperVisible(true)\n          nextTick(focusFirstNode)\n          e.preventDefault()\n          break\n        case EVENT_CODE.esc:\n        case EVENT_CODE.tab:\n          togglePopperVisible(false)\n          break\n      }\n    }\n\n    const handleClear = () => {\n      panel.value?.clearCheckedNodes()\n      togglePopperVisible(false)\n    }\n\n    const handleSuggestionClick = (node: CascaderNode) => {\n      const { checked } = node\n\n      if (multiple.value) {\n        panel.value?.handleCheckChange(node, !checked, false)\n      } else {\n        !checked && panel.value?.handleCheckChange(node, true, false)\n        togglePopperVisible(false)\n      }\n    }\n\n    const handleSuggestionKeyDown = (e: KeyboardEvent) => {\n      const target = e.target as HTMLElement\n      const { code } = e\n\n      switch (code) {\n        case EVENT_CODE.up:\n        case EVENT_CODE.down: {\n          const distance = code === EVENT_CODE.up ? -1 : 1\n          focusNode(\n            getSibling(\n              target,\n              distance,\n              '.el-cascader__suggestion-item[tabindex=\"-1\"]'\n            )\n          )\n          break\n        }\n        case EVENT_CODE.enter:\n          target.click()\n          break\n        case EVENT_CODE.esc:\n        case EVENT_CODE.tab:\n          togglePopperVisible(false)\n          break\n      }\n    }\n\n    const handleDelete = () => {\n      const tags = presentTags.value\n      const lastTag = tags[tags.length - 1]\n      pressDeleteCount = searchInputValue.value ? 0 : pressDeleteCount + 1\n\n      if (!lastTag || !pressDeleteCount) return\n\n      if (lastTag.hitState) {\n        deleteTag(lastTag)\n      } else {\n        lastTag.hitState = true\n      }\n    }\n\n    const handleFilter = debounce(() => {\n      const { value } = searchKeyword\n\n      if (!value) return\n\n      const passed = props.beforeFilter(value)\n\n      if (isPromise(passed)) {\n        passed.then(calculateSuggestions).catch(() => {\n          /* prevent log error */\n        })\n      } else if (passed !== false) {\n        calculateSuggestions()\n      } else {\n        hideSuggestionPanel()\n      }\n    }, props.debounce)\n\n    const handleInput = (val: string, e?: KeyboardEvent) => {\n      !popperVisible.value && togglePopperVisible(true)\n\n      if (e?.isComposing) return\n\n      val ? handleFilter() : hideSuggestionPanel()\n    }\n\n    watch(filtering, updatePopperPosition)\n\n    watch([checkedNodes, isDisabled], calculatePresentTags)\n\n    watch(presentTags, () => {\n      nextTick(() => updateStyle())\n    })\n\n    watch(presentText, (val) => (inputValue.value = val), { immediate: true })\n\n    onMounted(() => {\n      const inputEl = input.value?.$el\n      inputInitialHeight =\n        inputEl?.offsetHeight ||\n        INPUT_HEIGHT_MAP[realSize.value] ||\n        DEFAULT_INPUT_HEIGHT\n      addResizeListener(inputEl, updateStyle)\n    })\n\n    onBeforeUnmount(() => {\n      removeResizeListener(input.value?.$el, updateStyle)\n    })\n\n    return {\n      Effect,\n      popperOptions,\n      popper,\n      popperPaneRef,\n      input,\n      tagWrapper,\n      panel,\n      suggestionPanel,\n      popperVisible,\n      inputHover,\n      inputPlaceholder,\n      filtering,\n      presentText,\n      checkedValue,\n      inputValue,\n      searchInputValue,\n      presentTags,\n      suggestions,\n      isDisabled,\n      isOnComposition,\n      realSize,\n      tagSize,\n      multiple,\n      readonly,\n      clearBtnVisible,\n      t,\n      togglePopperVisible,\n      hideSuggestionPanel,\n      deleteTag,\n      focusFirstNode,\n      getCheckedNodes,\n      handleExpandChange,\n      handleKeyDown,\n      handleComposition,\n      handleClear,\n      handleSuggestionClick,\n      handleSuggestionKeyDown,\n      handleDelete,\n      handleInput,\n    }\n  },\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}