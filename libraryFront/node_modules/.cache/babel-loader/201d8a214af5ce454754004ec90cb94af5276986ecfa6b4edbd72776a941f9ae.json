{"ast":null,"code":"import { defineComponent, getCurrentInstance, inject, ref, watch, nextTick } from 'vue';\nimport { capitalize } from '@vue/shared';\nimport { useResizeObserver } from '@vueuse/core';\nimport '../../../tokens/index.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nimport { tabBar } from './tab-bar.mjs';\nimport { tabsRootContextKey } from '../../../tokens/tabs.mjs';\nconst COMPONENT_NAME = \"ElTabBar\";\nvar script = defineComponent({\n  name: COMPONENT_NAME,\n  props: tabBar,\n  setup(props) {\n    const instance = getCurrentInstance();\n    const rootTabs = inject(tabsRootContextKey);\n    if (!rootTabs) throwError(COMPONENT_NAME, \"must use with ElTabs\");\n    const bar$ = ref();\n    const barStyle = ref();\n    const getBarStyle = () => {\n      let offset = 0;\n      let tabSize = 0;\n      const sizeName = [\"top\", \"bottom\"].includes(rootTabs.props.tabPosition) ? \"width\" : \"height\";\n      const sizeDir = sizeName === \"width\" ? \"x\" : \"y\";\n      props.tabs.every(tab => {\n        var _a, _b, _c, _d;\n        const $el = (_b = (_a = instance.parent) == null ? void 0 : _a.refs) == null ? void 0 : _b[`tab-${tab.paneName}`];\n        if (!$el) return false;\n        if (!tab.active) {\n          return true;\n        }\n        tabSize = $el[`client${capitalize(sizeName)}`];\n        const position = sizeDir === \"x\" ? \"left\" : \"top\";\n        offset = $el.getBoundingClientRect()[position] - ((_d = (_c = $el.parentElement) == null ? void 0 : _c.getBoundingClientRect()[position]) != null ? _d : 0);\n        const tabStyles = window.getComputedStyle($el);\n        if (sizeName === \"width\") {\n          if (props.tabs.length > 1) {\n            tabSize -= parseFloat(tabStyles.paddingLeft) + parseFloat(tabStyles.paddingRight);\n          }\n          offset += parseFloat(tabStyles.paddingLeft);\n        }\n        return false;\n      });\n      return {\n        [sizeName]: `${tabSize}px`,\n        transform: `translate${capitalize(sizeDir)}(${offset}px)`\n      };\n    };\n    const update = () => barStyle.value = getBarStyle();\n    watch(() => props.tabs, async () => {\n      await nextTick();\n      update();\n    }, {\n      immediate: true\n    });\n    useResizeObserver(bar$, () => update());\n    return {\n      bar$,\n      rootTabs,\n      barStyle,\n      update\n    };\n  }\n});\nexport { script as default };","map":{"version":3,"names":["COMPONENT_NAME","script","defineComponent","name","props","tabBar","setup","instance","getCurrentInstance","rootTabs","inject","tabsRootContextKey","throwError","bar$","ref","barStyle","getBarStyle","offset","tabSize","sizeName","includes","tabPosition","sizeDir","tabs","every","tab","$el","_b","_a","parent","refs","paneName","active","capitalize","position","getBoundingClientRect","_d","_c","parentElement","tabStyles","window","getComputedStyle","length","parseFloat","paddingLeft","paddingRight","transform","update","value","watch","nextTick","immediate","useResizeObserver"],"sources":["../../../../../../packages/components/tabs/src/tab-bar.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"bar$\"\n    :class=\"['el-tabs__active-bar', `is-${rootTabs.props.tabPosition}`]\"\n    :style=\"barStyle\"\n  ></div>\n</template>\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  inject,\n  getCurrentInstance,\n  watch,\n  nextTick,\n  ref,\n} from 'vue'\nimport { capitalize } from '@vue/shared'\nimport { useResizeObserver } from '@vueuse/core'\nimport { tabsRootContextKey } from '@element-plus/tokens'\nimport { throwError } from '@element-plus/utils/error'\nimport { tabBar } from './tab-bar'\n\nimport type { CSSProperties } from 'vue'\n\nconst COMPONENT_NAME = 'ElTabBar'\nexport default defineComponent({\n  name: COMPONENT_NAME,\n  props: tabBar,\n\n  setup(props) {\n    const instance = getCurrentInstance()!\n    const rootTabs = inject(tabsRootContextKey)\n    if (!rootTabs) throwError(COMPONENT_NAME, 'must use with ElTabs')\n\n    const bar$ = ref<HTMLDivElement>()\n    const barStyle = ref()\n\n    const getBarStyle = (): CSSProperties => {\n      let offset = 0\n      let tabSize = 0\n\n      const sizeName = ['top', 'bottom'].includes(rootTabs.props.tabPosition)\n        ? 'width'\n        : 'height'\n      const sizeDir = sizeName === 'width' ? 'x' : 'y'\n\n      props.tabs.every((tab) => {\n        const $el = instance.parent?.refs?.[\n          `tab-${tab.paneName}`\n        ] as HTMLElement\n        if (!$el) return false\n\n        if (!tab.active) {\n          return true\n        }\n\n        tabSize = $el[`client${capitalize(sizeName)}`]\n        const position = sizeDir === 'x' ? 'left' : 'top'\n        offset =\n          $el.getBoundingClientRect()[position] -\n          ($el.parentElement?.getBoundingClientRect()[position] ?? 0)\n        const tabStyles = window.getComputedStyle($el)\n\n        if (sizeName === 'width') {\n          if (props.tabs.length > 1) {\n            tabSize -=\n              parseFloat(tabStyles.paddingLeft) +\n              parseFloat(tabStyles.paddingRight)\n          }\n          offset += parseFloat(tabStyles.paddingLeft)\n        }\n        return false\n      })\n\n      return {\n        [sizeName]: `${tabSize}px`,\n        transform: `translate${capitalize(sizeDir)}(${offset}px)`,\n      }\n    }\n\n    const update = () => (barStyle.value = getBarStyle())\n\n    watch(\n      () => props.tabs,\n      async () => {\n        await nextTick()\n        update()\n      },\n      { immediate: true }\n    )\n    useResizeObserver(bar$, () => update())\n\n    return {\n      bar$,\n      rootTabs,\n      barStyle,\n      update,\n    }\n  },\n})\n</script>\n"],"mappings":";;;;;;;AAwBA,MAAMA,cAAA,GAAiB;AACvB,IAAAC,MAAA,GAAeC,eAAA,CAAgB;EAC7BC,IAAA,EAAMH,cAAA;EACNI,KAAA,EAAOC,MAAA;EAEPC,MAAMF,KAAA,EAAO;IACX,MAAMG,QAAA,GAAWC,kBAAA;IACjB,MAAMC,QAAA,GAAWC,MAAA,CAAOC,kBAAA;IACxB,IAAI,CAACF,QAAA,EAAUG,UAAA,CAAWZ,cAAA,EAAgB;IAE1C,MAAMa,IAAA,GAAOC,GAAA;IACb,MAAMC,QAAA,GAAWD,GAAA;IAEjB,MAAME,WAAA,GAAcA,CAAA,KAAqB;MACvC,IAAIC,MAAA,GAAS;MACb,IAAIC,OAAA,GAAU;MAEd,MAAMC,QAAA,GAAW,CAAC,OAAO,UAAUC,QAAA,CAASX,QAAA,CAASL,KAAA,CAAMiB,WAAA,IACvD,UACA;MACJ,MAAMC,OAAA,GAAUH,QAAA,KAAa,UAAU,MAAM;MAE7Cf,KAAA,CAAMmB,IAAA,CAAKC,KAAA,CAAOC,GAAA,IAAQ;;QACxB,MAAMC,GAAA,GAAM,CAAAC,EAAA,IAAAC,EAAA,GAAArB,QAAA,CAASsB,MAAA,KAAT,gBAAAD,EAAA,CAAiBE,IAAA,KAAjB,gBAAAH,EAAA,CACV,OAAOF,GAAA,CAAIM,QAAA;QAEb,IAAI,CAACL,GAAA,EAAK,OAAO;QAEjB,IAAI,CAACD,GAAA,CAAIO,MAAA,EAAQ;UACf,OAAO;QAAA;QAGTd,OAAA,GAAUQ,GAAA,CAAI,SAASO,UAAA,CAAWd,QAAA;QAClC,MAAMe,QAAA,GAAWZ,OAAA,KAAY,MAAM,SAAS;QAC5CL,MAAA,GACES,GAAA,CAAIS,qBAAA,GAAwBD,QAAA,MAAAE,EAAA,IAAAC,EAAA,GAAAX,GAAA,CACvBY,aAAA,KAAJ,gBAAAD,EAAA,CAAmBF,qBAAA,GAAwBD,QAAA,MAA3C,OAAAE,EAAA,GAAwD;QAC3D,MAAMG,SAAA,GAAYC,MAAA,CAAOC,gBAAA,CAAiBf,GAAA;QAE1C,IAAIP,QAAA,KAAa,SAAS;UACxB,IAAIf,KAAA,CAAMmB,IAAA,CAAKmB,MAAA,GAAS,GAAG;YACzBxB,OAAA,IACEyB,UAAA,CAAWJ,SAAA,CAAUK,WAAA,IACrBD,UAAA,CAAWJ,SAAA,CAAUM,YAAA;UAAA;UAEzB5B,MAAA,IAAU0B,UAAA,CAAWJ,SAAA,CAAUK,WAAA;QAAA;QAEjC,OAAO;MAAA;MAGT,OAAO;QAAA,CACJzB,QAAA,GAAW,GAAGD,OAAA;QACf4B,SAAA,EAAW,YAAYb,UAAA,CAAWX,OAAA,KAAYL,MAAA;MAAA;IAAA;IAIlD,MAAM8B,MAAA,GAASA,CAAA,KAAOhC,QAAA,CAASiC,KAAA,GAAQhC,WAAA;IAEvCiC,KAAA,CACE,MAAM7C,KAAA,CAAMmB,IAAA,EACZ,YAAY;MACV,MAAM2B,QAAA;MACNH,MAAA;IAAA,GAEF;MAAEI,SAAA,EAAW;IAAA;IAEfC,iBAAA,CAAkBvC,IAAA,EAAM,MAAMkC,MAAA;IAE9B,OAAO;MACLlC,IAAA;MACAJ,QAAA;MACAM,QAAA;MACAgC;IAAA;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}