{"ast":null,"code":"import { shallowRef, onMounted, onBeforeUnmount, onUpdated, watch } from 'vue';\nimport { EVENT_CODE } from '../../../../utils/aria.mjs';\nimport { on, off } from '../../../../utils/dom.mjs';\nfunction useKeydown({\n  el$\n}, store) {\n  const treeItems = shallowRef([]);\n  const checkboxItems = shallowRef([]);\n  onMounted(() => {\n    initTabIndex();\n    on(el$.value, \"keydown\", handleKeydown);\n  });\n  onBeforeUnmount(() => {\n    off(el$.value, \"keydown\", handleKeydown);\n  });\n  onUpdated(() => {\n    treeItems.value = Array.from(el$.value.querySelectorAll(\"[role=treeitem]\"));\n    checkboxItems.value = Array.from(el$.value.querySelectorAll(\"input[type=checkbox]\"));\n  });\n  watch(checkboxItems, val => {\n    val.forEach(checkbox => {\n      checkbox.setAttribute(\"tabindex\", \"-1\");\n    });\n  });\n  const handleKeydown = ev => {\n    const currentItem = ev.target;\n    if (currentItem.className.indexOf(\"el-tree-node\") === -1) return;\n    const code = ev.code;\n    treeItems.value = Array.from(el$.value.querySelectorAll(\".is-focusable[role=treeitem]\"));\n    const currentIndex = treeItems.value.indexOf(currentItem);\n    let nextIndex;\n    if ([EVENT_CODE.up, EVENT_CODE.down].indexOf(code) > -1) {\n      ev.preventDefault();\n      if (code === EVENT_CODE.up) {\n        nextIndex = currentIndex === -1 ? 0 : currentIndex !== 0 ? currentIndex - 1 : treeItems.value.length - 1;\n        const startIndex = nextIndex;\n        while (true) {\n          if (store.value.getNode(treeItems.value[nextIndex].dataset.key).canFocus) break;\n          nextIndex--;\n          if (nextIndex === startIndex) {\n            nextIndex = -1;\n            break;\n          }\n          if (nextIndex < 0) {\n            nextIndex = treeItems.value.length - 1;\n          }\n        }\n      } else {\n        nextIndex = currentIndex === -1 ? 0 : currentIndex < treeItems.value.length - 1 ? currentIndex + 1 : 0;\n        const startIndex = nextIndex;\n        while (true) {\n          if (store.value.getNode(treeItems.value[nextIndex].dataset.key).canFocus) break;\n          nextIndex++;\n          if (nextIndex === startIndex) {\n            nextIndex = -1;\n            break;\n          }\n          if (nextIndex >= treeItems.value.length) {\n            nextIndex = 0;\n          }\n        }\n      }\n      nextIndex !== -1 && treeItems.value[nextIndex].focus();\n    }\n    if ([EVENT_CODE.left, EVENT_CODE.right].indexOf(code) > -1) {\n      ev.preventDefault();\n      currentItem.click();\n    }\n    const hasInput = currentItem.querySelector('[type=\"checkbox\"]');\n    if ([EVENT_CODE.enter, EVENT_CODE.space].indexOf(code) > -1 && hasInput) {\n      ev.preventDefault();\n      hasInput.click();\n    }\n  };\n  const initTabIndex = () => {\n    var _a;\n    treeItems.value = Array.from(el$.value.querySelectorAll(\".is-focusable[role=treeitem]\"));\n    checkboxItems.value = Array.from(el$.value.querySelectorAll(\"input[type=checkbox]\"));\n    const checkedItem = el$.value.querySelectorAll(\".is-checked[role=treeitem]\");\n    if (checkedItem.length) {\n      checkedItem[0].setAttribute(\"tabindex\", \"0\");\n      return;\n    }\n    (_a = treeItems.value[0]) == null ? void 0 : _a.setAttribute(\"tabindex\", \"0\");\n  };\n}\nexport { useKeydown };","map":{"version":3,"names":["el$","store","treeItems","shallowRef","checkboxItems","onMounted","initTabIndex","on","value","handleKeydown","onBeforeUnmount","off","onUpdated","Array","from","querySelectorAll","watch","val","forEach","checkbox","setAttribute","ev","currentItem","target","className","indexOf","code","currentIndex","nextIndex","EVENT_CODE","up","down","preventDefault","length","startIndex","getNode","dataset","key","canFocus","focus","left","right","click","hasInput","querySelector","enter","space","_a","checkedItem"],"sources":["../../../../../../../packages/components/tree/src/model/useKeydown.ts"],"sourcesContent":["import { onMounted, onUpdated, onBeforeUnmount, watch, shallowRef } from 'vue'\nimport { EVENT_CODE } from '@element-plus/utils/aria'\nimport { on, off } from '@element-plus/utils/dom'\nimport type TreeStore from './tree-store'\n\nimport type { Ref } from 'vue'\nimport type { Nullable } from '@element-plus/utils/types'\n\ninterface UseKeydownOption {\n  el$: Ref<HTMLElement>\n}\nexport function useKeydown({ el$ }: UseKeydownOption, store: Ref<TreeStore>) {\n  const treeItems = shallowRef<Nullable<HTMLElement>[]>([])\n  const checkboxItems = shallowRef<Nullable<HTMLElement>[]>([])\n\n  onMounted(() => {\n    initTabIndex()\n    on(el$.value, 'keydown', handleKeydown)\n  })\n\n  onBeforeUnmount(() => {\n    off(el$.value, 'keydown', handleKeydown)\n  })\n\n  onUpdated(() => {\n    treeItems.value = Array.from(el$.value.querySelectorAll('[role=treeitem]'))\n    checkboxItems.value = Array.from(\n      el$.value.querySelectorAll('input[type=checkbox]')\n    )\n  })\n\n  watch(checkboxItems, (val) => {\n    val.forEach((checkbox) => {\n      checkbox.setAttribute('tabindex', '-1')\n    })\n  })\n\n  const handleKeydown = (ev: KeyboardEvent): void => {\n    const currentItem = ev.target as HTMLElement\n    if (currentItem.className.indexOf('el-tree-node') === -1) return\n    const code = ev.code\n    treeItems.value = Array.from(\n      el$.value.querySelectorAll('.is-focusable[role=treeitem]')\n    )\n    const currentIndex = treeItems.value.indexOf(currentItem)\n    let nextIndex\n    if ([EVENT_CODE.up, EVENT_CODE.down].indexOf(code) > -1) {\n      ev.preventDefault()\n      if (code === EVENT_CODE.up) {\n        nextIndex =\n          currentIndex === -1\n            ? 0\n            : currentIndex !== 0\n            ? currentIndex - 1\n            : treeItems.value.length - 1\n        const startIndex = nextIndex\n        while (true) {\n          if (\n            store.value.getNode(treeItems.value[nextIndex].dataset.key).canFocus\n          )\n            break\n          nextIndex--\n          if (nextIndex === startIndex) {\n            nextIndex = -1\n            break\n          }\n          if (nextIndex < 0) {\n            nextIndex = treeItems.value.length - 1\n          }\n        }\n      } else {\n        nextIndex =\n          currentIndex === -1\n            ? 0\n            : currentIndex < treeItems.value.length - 1\n            ? currentIndex + 1\n            : 0\n        const startIndex = nextIndex\n        while (true) {\n          if (\n            store.value.getNode(treeItems.value[nextIndex].dataset.key).canFocus\n          )\n            break\n          nextIndex++\n          if (nextIndex === startIndex) {\n            nextIndex = -1\n            break\n          }\n          if (nextIndex >= treeItems.value.length) {\n            nextIndex = 0\n          }\n        }\n      }\n      nextIndex !== -1 && treeItems.value[nextIndex].focus()\n    }\n    if ([EVENT_CODE.left, EVENT_CODE.right].indexOf(code) > -1) {\n      ev.preventDefault()\n      currentItem.click()\n    }\n    const hasInput = currentItem.querySelector(\n      '[type=\"checkbox\"]'\n    ) as Nullable<HTMLInputElement>\n    if ([EVENT_CODE.enter, EVENT_CODE.space].indexOf(code) > -1 && hasInput) {\n      ev.preventDefault()\n      hasInput.click()\n    }\n  }\n\n  const initTabIndex = (): void => {\n    treeItems.value = Array.from(\n      el$.value.querySelectorAll('.is-focusable[role=treeitem]')\n    )\n    checkboxItems.value = Array.from(\n      el$.value.querySelectorAll('input[type=checkbox]')\n    )\n    const checkedItem = el$.value.querySelectorAll('.is-checked[role=treeitem]')\n    if (checkedItem.length) {\n      checkedItem[0].setAttribute('tabindex', '0')\n      return\n    }\n    treeItems.value[0]?.setAttribute('tabindex', '0')\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}