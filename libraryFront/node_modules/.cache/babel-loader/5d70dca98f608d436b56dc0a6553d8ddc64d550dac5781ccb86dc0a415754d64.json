{"ast":null,"code":"import { defineComponent, ref, computed, nextTick, watch, onMounted, onUpdated } from 'vue';\nimport { NOOP, isArray } from '@vue/shared';\nimport debounce from 'lodash/debounce';\nimport '../../../hooks/index.mjs';\nimport '../../../directives/index.mjs';\nimport { generateId } from '../../../utils/util.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../utils/constants.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport { ElScrollbar } from '../../scrollbar/index.mjs';\nimport _Popper from '../../popper/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { Loading } from '@element-plus/icons-vue';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\nimport { useAttrs } from '../../../hooks/use-attrs/index.mjs';\nimport { Effect } from '../../popper/src/use-popper/defaults.mjs';\nvar script = defineComponent({\n  name: \"ElAutocomplete\",\n  components: {\n    ElPopper: _Popper,\n    ElInput,\n    ElScrollbar,\n    ElIcon,\n    Loading\n  },\n  directives: {\n    clickoutside: ClickOutside\n  },\n  inheritAttrs: false,\n  props: {\n    valueKey: {\n      type: String,\n      default: \"value\"\n    },\n    modelValue: {\n      type: [String, Number],\n      default: \"\"\n    },\n    debounce: {\n      type: Number,\n      default: 300\n    },\n    placement: {\n      type: String,\n      validator: val => {\n        return [\"top\", \"top-start\", \"top-end\", \"bottom\", \"bottom-start\", \"bottom-end\"].includes(val);\n      },\n      default: \"bottom-start\"\n    },\n    fetchSuggestions: {\n      type: Function,\n      default: NOOP\n    },\n    popperClass: {\n      type: String,\n      default: \"\"\n    },\n    triggerOnFocus: {\n      type: Boolean,\n      default: true\n    },\n    selectWhenUnmatched: {\n      type: Boolean,\n      default: false\n    },\n    hideLoading: {\n      type: Boolean,\n      default: false\n    },\n    popperAppendToBody: {\n      type: Boolean,\n      default: true\n    },\n    highlightFirstItem: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: [UPDATE_MODEL_EVENT, \"input\", \"change\", \"focus\", \"blur\", \"clear\", \"select\"],\n  setup(props, ctx) {\n    const attrs = useAttrs();\n    const suggestions = ref([]);\n    const highlightedIndex = ref(-1);\n    const dropdownWidth = ref(\"\");\n    const activated = ref(false);\n    const suggestionDisabled = ref(false);\n    const loading = ref(false);\n    const inputRef = ref(null);\n    const regionRef = ref(null);\n    const popper = ref(null);\n    const id = computed(() => {\n      return `el-autocomplete-${generateId()}`;\n    });\n    const suggestionVisible = computed(() => {\n      const isValidData = isArray(suggestions.value) && suggestions.value.length > 0;\n      return (isValidData || loading.value) && activated.value;\n    });\n    const suggestionLoading = computed(() => {\n      return !props.hideLoading && loading.value;\n    });\n    const updatePopperPosition = () => {\n      nextTick(popper.value.update);\n    };\n    watch(suggestionVisible, () => {\n      dropdownWidth.value = `${inputRef.value.$el.offsetWidth}px`;\n    });\n    onMounted(() => {\n      inputRef.value.inputOrTextarea.setAttribute(\"role\", \"textbox\");\n      inputRef.value.inputOrTextarea.setAttribute(\"aria-autocomplete\", \"list\");\n      inputRef.value.inputOrTextarea.setAttribute(\"aria-controls\", \"id\");\n      inputRef.value.inputOrTextarea.setAttribute(\"aria-activedescendant\", `${id.value}-item-${highlightedIndex.value}`);\n      const $ul = regionRef.value.querySelector(\".el-autocomplete-suggestion__list\");\n      $ul.setAttribute(\"role\", \"listbox\");\n      $ul.setAttribute(\"id\", id.value);\n    });\n    onUpdated(updatePopperPosition);\n    const getData = queryString => {\n      if (suggestionDisabled.value) {\n        return;\n      }\n      loading.value = true;\n      updatePopperPosition();\n      props.fetchSuggestions(queryString, suggestionsArg => {\n        loading.value = false;\n        if (suggestionDisabled.value) {\n          return;\n        }\n        if (isArray(suggestionsArg)) {\n          suggestions.value = suggestionsArg;\n          highlightedIndex.value = props.highlightFirstItem ? 0 : -1;\n        } else {\n          throwError(\"ElAutocomplete\", \"autocomplete suggestions must be an array\");\n        }\n      });\n    };\n    const debouncedGetData = debounce(getData, props.debounce);\n    const handleInput = value => {\n      ctx.emit(\"input\", value);\n      ctx.emit(UPDATE_MODEL_EVENT, value);\n      suggestionDisabled.value = false;\n      if (!props.triggerOnFocus && !value) {\n        suggestionDisabled.value = true;\n        suggestions.value = [];\n        return;\n      }\n      debouncedGetData(value);\n    };\n    const handleChange = value => {\n      ctx.emit(\"change\", value);\n    };\n    const handleFocus = e => {\n      activated.value = true;\n      ctx.emit(\"focus\", e);\n      if (props.triggerOnFocus) {\n        debouncedGetData(props.modelValue);\n      }\n    };\n    const handleBlur = e => {\n      ctx.emit(\"blur\", e);\n    };\n    const handleClear = () => {\n      activated.value = false;\n      ctx.emit(UPDATE_MODEL_EVENT, \"\");\n      ctx.emit(\"clear\");\n    };\n    const handleKeyEnter = () => {\n      if (suggestionVisible.value && highlightedIndex.value >= 0 && highlightedIndex.value < suggestions.value.length) {\n        select(suggestions.value[highlightedIndex.value]);\n      } else if (props.selectWhenUnmatched) {\n        ctx.emit(\"select\", {\n          value: props.modelValue\n        });\n        nextTick(() => {\n          suggestions.value = [];\n          highlightedIndex.value = -1;\n        });\n      }\n    };\n    const close = () => {\n      activated.value = false;\n    };\n    const focus = () => {\n      inputRef.value.focus();\n    };\n    const select = item => {\n      ctx.emit(\"input\", item[props.valueKey]);\n      ctx.emit(UPDATE_MODEL_EVENT, item[props.valueKey]);\n      ctx.emit(\"select\", item);\n      nextTick(() => {\n        suggestions.value = [];\n        highlightedIndex.value = -1;\n      });\n    };\n    const highlight = index => {\n      if (!suggestionVisible.value || loading.value) {\n        return;\n      }\n      if (index < 0) {\n        highlightedIndex.value = -1;\n        return;\n      }\n      if (index >= suggestions.value.length) {\n        index = suggestions.value.length - 1;\n      }\n      const suggestion = regionRef.value.querySelector(\".el-autocomplete-suggestion__wrap\");\n      const suggestionList = suggestion.querySelectorAll(\".el-autocomplete-suggestion__list li\");\n      const highlightItem = suggestionList[index];\n      const scrollTop = suggestion.scrollTop;\n      const {\n        offsetTop,\n        scrollHeight\n      } = highlightItem;\n      if (offsetTop + scrollHeight > scrollTop + suggestion.clientHeight) {\n        suggestion.scrollTop += scrollHeight;\n      }\n      if (offsetTop < scrollTop) {\n        suggestion.scrollTop -= scrollHeight;\n      }\n      highlightedIndex.value = index;\n      inputRef.value.inputOrTextarea.setAttribute(\"aria-activedescendant\", `${id.value}-item-${highlightedIndex.value}`);\n    };\n    return {\n      Effect,\n      attrs,\n      suggestions,\n      highlightedIndex,\n      dropdownWidth,\n      activated,\n      suggestionDisabled,\n      loading,\n      inputRef,\n      regionRef,\n      popper,\n      id,\n      suggestionVisible,\n      suggestionLoading,\n      getData,\n      handleInput,\n      handleChange,\n      handleFocus,\n      handleBlur,\n      handleClear,\n      handleKeyEnter,\n      close,\n      focus,\n      select,\n      highlight\n    };\n  }\n});\nexport { script as default };","map":{"version":3,"names":["script","defineComponent","name","components","ElPopper","_Popper","ElInput","ElScrollbar","ElIcon","Loading","directives","clickoutside","ClickOutside","inheritAttrs","props","valueKey","type","String","default","modelValue","Number","debounce","placement","validator","val","includes","fetchSuggestions","Function","NOOP","popperClass","triggerOnFocus","Boolean","selectWhenUnmatched","hideLoading","popperAppendToBody","highlightFirstItem","emits","UPDATE_MODEL_EVENT","setup","ctx","attrs","useAttrs","suggestions","ref","highlightedIndex","dropdownWidth","activated","suggestionDisabled","loading","inputRef","regionRef","popper","id","computed","generateId","suggestionVisible","isValidData","isArray","value","length","suggestionLoading","updatePopperPosition","nextTick","update","watch","$el","offsetWidth","onMounted","inputOrTextarea","setAttribute","$ul","querySelector","onUpdated","getData","queryString","suggestionsArg","throwError","debouncedGetData","handleInput","emit","handleChange","handleFocus","e","handleBlur","handleClear","handleKeyEnter","select","close","focus","item","highlight","index","suggestion","suggestionList","querySelectorAll","highlightItem","scrollTop","offsetTop","scrollHeight","clientHeight","Effect"],"sources":["../../../../../../packages/components/autocomplete/src/index.vue"],"sourcesContent":["<template>\n  <el-popper\n    ref=\"popper\"\n    v-model:visible=\"suggestionVisible\"\n    :placement=\"placement\"\n    :fallback-placements=\"['bottom-start', 'top-start']\"\n    :popper-class=\"`el-autocomplete__popper ${popperClass}`\"\n    :append-to-body=\"popperAppendToBody\"\n    pure\n    manual-mode\n    :effect=\"Effect.LIGHT\"\n    trigger=\"click\"\n    transition=\"el-zoom-in-top\"\n    :gpu-acceleration=\"false\"\n  >\n    <template #trigger>\n      <div\n        v-clickoutside=\"close\"\n        :class=\"['el-autocomplete', $attrs.class]\"\n        :style=\"$attrs.style\"\n        role=\"combobox\"\n        aria-haspopup=\"listbox\"\n        :aria-expanded=\"suggestionVisible\"\n        :aria-owns=\"id\"\n      >\n        <el-input\n          ref=\"inputRef\"\n          v-bind=\"attrs\"\n          :model-value=\"modelValue\"\n          @input=\"handleInput\"\n          @change=\"handleChange\"\n          @focus=\"handleFocus\"\n          @blur=\"handleBlur\"\n          @clear=\"handleClear\"\n          @keydown.up.prevent=\"highlight(highlightedIndex - 1)\"\n          @keydown.down.prevent=\"highlight(highlightedIndex + 1)\"\n          @keydown.enter=\"handleKeyEnter\"\n          @keydown.tab=\"close\"\n        >\n          <template v-if=\"$slots.prepend\" #prepend>\n            <slot name=\"prepend\"></slot>\n          </template>\n          <template v-if=\"$slots.append\" #append>\n            <slot name=\"append\"></slot>\n          </template>\n          <template v-if=\"$slots.prefix\" #prefix>\n            <slot name=\"prefix\"></slot>\n          </template>\n          <template v-if=\"$slots.suffix\" #suffix>\n            <slot name=\"suffix\"></slot>\n          </template>\n        </el-input>\n      </div>\n    </template>\n    <template #default>\n      <div\n        ref=\"regionRef\"\n        :class=\"[\n          'el-autocomplete-suggestion',\n          suggestionLoading && 'is-loading',\n        ]\"\n        :style=\"{ minWidth: dropdownWidth, outline: 'none' }\"\n        role=\"region\"\n      >\n        <el-scrollbar\n          tag=\"ul\"\n          wrap-class=\"el-autocomplete-suggestion__wrap\"\n          view-class=\"el-autocomplete-suggestion__list\"\n        >\n          <li v-if=\"suggestionLoading\">\n            <el-icon class=\"is-loading\"><loading /></el-icon>\n          </li>\n          <template v-else>\n            <li\n              v-for=\"(item, index) in suggestions\"\n              :id=\"`${id}-item-${index}`\"\n              :key=\"index\"\n              :class=\"{ highlighted: highlightedIndex === index }\"\n              role=\"option\"\n              :aria-selected=\"highlightedIndex === index\"\n              @click=\"select(item)\"\n            >\n              <slot :item=\"item\">{{ item[valueKey] }}</slot>\n            </li>\n          </template>\n        </el-scrollbar>\n      </div>\n    </template>\n  </el-popper>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  ref,\n  computed,\n  onMounted,\n  onUpdated,\n  nextTick,\n  watch,\n} from 'vue'\nimport { NOOP } from '@vue/shared'\nimport debounce from 'lodash/debounce'\nimport { useAttrs } from '@element-plus/hooks'\nimport { ClickOutside } from '@element-plus/directives'\nimport { generateId, isArray } from '@element-plus/utils/util'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/utils/constants'\nimport { throwError } from '@element-plus/utils/error'\nimport ElInput from '@element-plus/components/input'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElPopper, { Effect } from '@element-plus/components/popper'\nimport ElIcon from '@element-plus/components/icon'\nimport { Loading } from '@element-plus/icons-vue'\n\nimport type { Placement } from '@element-plus/components/popper'\nimport type { PropType } from 'vue'\n\nexport default defineComponent({\n  name: 'ElAutocomplete',\n  components: {\n    ElPopper,\n    ElInput,\n    ElScrollbar,\n    ElIcon,\n    Loading,\n  },\n  directives: {\n    clickoutside: ClickOutside,\n  },\n  inheritAttrs: false,\n  props: {\n    valueKey: {\n      type: String,\n      default: 'value',\n    },\n    modelValue: {\n      type: [String, Number],\n      default: '',\n    },\n    debounce: {\n      type: Number,\n      default: 300,\n    },\n    placement: {\n      type: String as PropType<Placement>,\n      validator: (val: string): boolean => {\n        return [\n          'top',\n          'top-start',\n          'top-end',\n          'bottom',\n          'bottom-start',\n          'bottom-end',\n        ].includes(val)\n      },\n      default: 'bottom-start',\n    },\n    fetchSuggestions: {\n      type: Function as PropType<\n        (queryString: string, cb: (data: any[]) => void) => void\n      >,\n      default: NOOP,\n    },\n    popperClass: {\n      type: String,\n      default: '',\n    },\n    triggerOnFocus: {\n      type: Boolean,\n      default: true,\n    },\n    selectWhenUnmatched: {\n      type: Boolean,\n      default: false,\n    },\n    hideLoading: {\n      type: Boolean,\n      default: false,\n    },\n    popperAppendToBody: {\n      type: Boolean,\n      default: true,\n    },\n    highlightFirstItem: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  emits: [\n    UPDATE_MODEL_EVENT,\n    'input',\n    'change',\n    'focus',\n    'blur',\n    'clear',\n    'select',\n  ],\n  setup(props, ctx) {\n    const attrs = useAttrs()\n    const suggestions = ref([])\n    const highlightedIndex = ref(-1)\n    const dropdownWidth = ref('')\n    const activated = ref(false)\n    const suggestionDisabled = ref(false)\n    const loading = ref(false)\n    const inputRef = ref(null)\n    const regionRef = ref(null)\n    const popper = ref(null)\n\n    const id = computed(() => {\n      return `el-autocomplete-${generateId()}`\n    })\n    const suggestionVisible = computed(() => {\n      const isValidData =\n        isArray(suggestions.value) && suggestions.value.length > 0\n      return (isValidData || loading.value) && activated.value\n    })\n    const suggestionLoading = computed(() => {\n      return !props.hideLoading && loading.value\n    })\n\n    const updatePopperPosition = () => {\n      nextTick(popper.value.update)\n    }\n\n    watch(suggestionVisible, () => {\n      dropdownWidth.value = `${inputRef.value.$el.offsetWidth}px`\n    })\n\n    onMounted(() => {\n      inputRef.value.inputOrTextarea.setAttribute('role', 'textbox')\n      inputRef.value.inputOrTextarea.setAttribute('aria-autocomplete', 'list')\n      inputRef.value.inputOrTextarea.setAttribute('aria-controls', 'id')\n      inputRef.value.inputOrTextarea.setAttribute(\n        'aria-activedescendant',\n        `${id.value}-item-${highlightedIndex.value}`\n      )\n      const $ul = regionRef.value.querySelector(\n        '.el-autocomplete-suggestion__list'\n      )\n      $ul.setAttribute('role', 'listbox')\n      $ul.setAttribute('id', id.value)\n    })\n\n    onUpdated(updatePopperPosition)\n\n    const getData = (queryString) => {\n      if (suggestionDisabled.value) {\n        return\n      }\n      loading.value = true\n      updatePopperPosition()\n      props.fetchSuggestions(queryString, (suggestionsArg) => {\n        loading.value = false\n        if (suggestionDisabled.value) {\n          return\n        }\n        if (isArray(suggestionsArg)) {\n          suggestions.value = suggestionsArg\n          highlightedIndex.value = props.highlightFirstItem ? 0 : -1\n        } else {\n          throwError(\n            'ElAutocomplete',\n            'autocomplete suggestions must be an array'\n          )\n        }\n      })\n    }\n    const debouncedGetData = debounce(getData, props.debounce)\n    const handleInput = (value) => {\n      ctx.emit('input', value)\n      ctx.emit(UPDATE_MODEL_EVENT, value)\n      suggestionDisabled.value = false\n      if (!props.triggerOnFocus && !value) {\n        suggestionDisabled.value = true\n        suggestions.value = []\n        return\n      }\n      debouncedGetData(value)\n    }\n    const handleChange = (value) => {\n      ctx.emit('change', value)\n    }\n    const handleFocus = (e) => {\n      activated.value = true\n      ctx.emit('focus', e)\n      if (props.triggerOnFocus) {\n        debouncedGetData(props.modelValue)\n      }\n    }\n    const handleBlur = (e) => {\n      ctx.emit('blur', e)\n    }\n    const handleClear = () => {\n      activated.value = false\n      ctx.emit(UPDATE_MODEL_EVENT, '')\n      ctx.emit('clear')\n    }\n    const handleKeyEnter = () => {\n      if (\n        suggestionVisible.value &&\n        highlightedIndex.value >= 0 &&\n        highlightedIndex.value < suggestions.value.length\n      ) {\n        select(suggestions.value[highlightedIndex.value])\n      } else if (props.selectWhenUnmatched) {\n        ctx.emit('select', { value: props.modelValue })\n        nextTick(() => {\n          suggestions.value = []\n          highlightedIndex.value = -1\n        })\n      }\n    }\n    const close = () => {\n      activated.value = false\n    }\n    const focus = () => {\n      inputRef.value.focus()\n    }\n    const select = (item) => {\n      ctx.emit('input', item[props.valueKey])\n      ctx.emit(UPDATE_MODEL_EVENT, item[props.valueKey])\n      ctx.emit('select', item)\n      nextTick(() => {\n        suggestions.value = []\n        highlightedIndex.value = -1\n      })\n    }\n    const highlight = (index) => {\n      if (!suggestionVisible.value || loading.value) {\n        return\n      }\n      if (index < 0) {\n        highlightedIndex.value = -1\n        return\n      }\n      if (index >= suggestions.value.length) {\n        index = suggestions.value.length - 1\n      }\n      const suggestion = regionRef.value.querySelector(\n        '.el-autocomplete-suggestion__wrap'\n      )\n      const suggestionList = suggestion.querySelectorAll(\n        '.el-autocomplete-suggestion__list li'\n      )\n      const highlightItem = suggestionList[index]\n      const scrollTop = suggestion.scrollTop\n      const { offsetTop, scrollHeight } = highlightItem\n\n      if (offsetTop + scrollHeight > scrollTop + suggestion.clientHeight) {\n        suggestion.scrollTop += scrollHeight\n      }\n      if (offsetTop < scrollTop) {\n        suggestion.scrollTop -= scrollHeight\n      }\n      highlightedIndex.value = index\n      inputRef.value.inputOrTextarea.setAttribute(\n        'aria-activedescendant',\n        `${id.value}-item-${highlightedIndex.value}`\n      )\n    }\n\n    return {\n      Effect,\n\n      attrs,\n      suggestions,\n      highlightedIndex,\n      dropdownWidth,\n      activated,\n      suggestionDisabled,\n      loading,\n      inputRef,\n      regionRef,\n      popper,\n\n      id,\n      suggestionVisible,\n      suggestionLoading,\n\n      getData,\n      handleInput,\n      handleChange,\n      handleFocus,\n      handleBlur,\n      handleClear,\n      handleKeyEnter,\n      close,\n      focus,\n      select,\n      highlight,\n    }\n  },\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}