{"ast":null,"code":"import { defineComponent, ref, computed } from 'vue';\nimport { Close } from '@element-plus/icons-vue';\nimport { ElOverlay } from '../../overlay/index.mjs';\nimport '../../dialog/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../directives/index.mjs';\nimport { drawerProps, drawerEmits } from './drawer.mjs';\nimport TrapFocus from '../../../directives/trap-focus/index.mjs';\nimport { useDialog } from '../../dialog/src/use-dialog.mjs';\nvar script = defineComponent({\n  name: \"ElDrawer\",\n  components: {\n    ElOverlay,\n    ElIcon,\n    Close\n  },\n  directives: {\n    TrapFocus\n  },\n  props: drawerProps,\n  emits: drawerEmits,\n  setup(props, ctx) {\n    const drawerRef = ref();\n    const isHorizontal = computed(() => props.direction === \"rtl\" || props.direction === \"ltr\");\n    const drawerSize = computed(() => typeof props.size === \"number\" ? `${props.size}px` : props.size);\n    return {\n      ...useDialog(props, ctx, drawerRef),\n      drawerRef,\n      isHorizontal,\n      drawerSize\n    };\n  }\n});\nexport { script as default };","map":{"version":3,"names":["script","defineComponent","name","components","ElOverlay","ElIcon","Close","directives","TrapFocus","props","drawerProps","emits","drawerEmits","setup","ctx","drawerRef","ref","isHorizontal","computed","direction","drawerSize","size","useDialog"],"sources":["../../../../../../packages/components/drawer/src/drawer.vue"],"sourcesContent":["<template>\n  <teleport to=\"body\" :disabled=\"!appendToBody\">\n    <transition\n      name=\"el-drawer-fade\"\n      @after-enter=\"afterEnter\"\n      @after-leave=\"afterLeave\"\n      @before-leave=\"beforeLeave\"\n    >\n      <el-overlay\n        v-show=\"visible\"\n        :mask=\"modal\"\n        :overlay-class=\"modalClass\"\n        :z-index=\"zIndex\"\n        @click=\"onModalClick\"\n      >\n        <div\n          ref=\"drawerRef\"\n          v-trap-focus\n          aria-modal=\"true\"\n          aria-labelledby=\"el-drawer__title\"\n          :aria-label=\"title\"\n          :class=\"['el-drawer', direction, visible && 'open', customClass]\"\n          :style=\"\n            isHorizontal ? 'width: ' + drawerSize : 'height: ' + drawerSize\n          \"\n          role=\"dialog\"\n          @click.stop\n        >\n          <header\n            v-if=\"withHeader\"\n            id=\"el-drawer__title\"\n            class=\"el-drawer__header\"\n          >\n            <slot name=\"title\">\n              <span role=\"heading\" :title=\"title\">\n                {{ title }}\n              </span>\n            </slot>\n            <button\n              v-if=\"showClose\"\n              :aria-label=\"'close ' + (title || 'drawer')\"\n              class=\"el-drawer__close-btn\"\n              type=\"button\"\n              @click=\"handleClose\"\n            >\n              <el-icon class=\"el-drawer__close\"><close /></el-icon>\n            </button>\n          </header>\n          <template v-if=\"rendered\">\n            <section class=\"el-drawer__body\">\n              <slot></slot>\n            </section>\n          </template>\n        </div>\n      </el-overlay>\n    </transition>\n  </teleport>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, ref } from 'vue'\nimport { Close } from '@element-plus/icons-vue'\n\nimport { ElOverlay } from '@element-plus/components/overlay'\nimport { useDialog } from '@element-plus/components/dialog'\nimport ElIcon from '@element-plus/components/icon'\nimport { TrapFocus } from '@element-plus/directives'\nimport { drawerProps, drawerEmits } from './drawer'\n\nexport default defineComponent({\n  name: 'ElDrawer',\n  components: {\n    ElOverlay,\n    ElIcon,\n    Close,\n  },\n  directives: {\n    TrapFocus,\n  },\n  props: drawerProps,\n  emits: drawerEmits,\n\n  setup(props, ctx) {\n    const drawerRef = ref<HTMLElement>()\n\n    const isHorizontal = computed(\n      () => props.direction === 'rtl' || props.direction === 'ltr'\n    )\n    const drawerSize = computed(() =>\n      typeof props.size === 'number' ? `${props.size}px` : props.size\n    )\n\n    return {\n      ...useDialog(props, ctx, drawerRef),\n      drawerRef,\n      isHorizontal,\n      drawerSize,\n    }\n  },\n})\n</script>\n"],"mappings":";;;;;;;;;AAqEA,IAAAA,MAAA,GAAeC,eAAA,CAAgB;EAC7BC,IAAA,EAAM;EACNC,UAAA,EAAY;IACVC,SAAA;IACAC,MAAA;IACAC;EAAA;EAEFC,UAAA,EAAY;IACVC;EAAA;EAEFC,KAAA,EAAOC,WAAA;EACPC,KAAA,EAAOC,WAAA;EAEPC,MAAMJ,KAAA,EAAOK,GAAA,EAAK;IAChB,MAAMC,SAAA,GAAYC,GAAA;IAElB,MAAMC,YAAA,GAAeC,QAAA,CACnB,MAAMT,KAAA,CAAMU,SAAA,KAAc,SAASV,KAAA,CAAMU,SAAA,KAAc;IAEzD,MAAMC,UAAA,GAAaF,QAAA,CAAS,MAC1B,OAAOT,KAAA,CAAMY,IAAA,KAAS,WAAW,GAAGZ,KAAA,CAAMY,IAAA,OAAWZ,KAAA,CAAMY,IAAA;IAG7D,OAAO;MAAA,GACFC,SAAA,CAAUb,KAAA,EAAOK,GAAA,EAAKC,SAAA;MACzBA,SAAA;MACAE,YAAA;MACAG;IAAA;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}