{"ast":null,"code":"import { resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createBlock, withCtx, createVNode, resolveDynamicComponent, createCommentVNode, renderSlot } from 'vue';\nconst _hoisted_1 = [\"disabled\", \"autofocus\", \"type\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_loading = resolveComponent(\"loading\");\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  return openBlock(), createElementBlock(\"button\", {\n    ref: \"buttonRef\",\n    class: normalizeClass([\"el-button\", _ctx.buttonType ? \"el-button--\" + _ctx.buttonType : \"\", _ctx.buttonSize ? \"el-button--\" + _ctx.buttonSize : \"\", {\n      \"is-disabled\": _ctx.buttonDisabled,\n      \"is-loading\": _ctx.loading,\n      \"is-plain\": _ctx.plain,\n      \"is-round\": _ctx.round,\n      \"is-circle\": _ctx.circle\n    }]),\n    disabled: _ctx.buttonDisabled || _ctx.loading,\n    autofocus: _ctx.autofocus,\n    type: _ctx.nativeType,\n    style: normalizeStyle(_ctx.buttonStyle),\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))\n  }, [_ctx.loading ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0,\n    class: \"is-loading\"\n  }, {\n    default: withCtx(() => [createVNode(_component_loading)]),\n    _: 1\n  })) : _ctx.icon ? (openBlock(), createBlock(_component_el_icon, {\n    key: 1\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.icon)))]),\n    _: 1\n  })) : createCommentVNode(\"v-if\", true), _ctx.$slots.default ? (openBlock(), createElementBlock(\"span\", {\n    key: 2,\n    class: normalizeClass({\n      \"el-button__text--expand\": _ctx.shouldAddSpace\n    })\n  }, [renderSlot(_ctx.$slots, \"default\")], 2)) : createCommentVNode(\"v-if\", true)], 14, _hoisted_1);\n}\nexport { render };","map":{"version":3,"names":["createElementBlock","ref","class","normalizeClass","disabled","_ctx","buttonDisabled","loading","autofocus","type","nativeType","style","normalizeStyle","buttonStyle","onClick","_cache","args","handleClick","openBlock","createBlock","_component_el_icon","createVNode","_component_loading","icon","key","resolveDynamicComponent","$slots","default","shouldAddSpace","renderSlot"],"sources":["../../../../../../packages/components/button/src/button.vue?vue&type=template&id=802c5c76&lang.js"],"sourcesContent":["<template>\n  <button\n    ref=\"buttonRef\"\n    :class=\"[\n      'el-button',\n      buttonType ? 'el-button--' + buttonType : '',\n      buttonSize ? 'el-button--' + buttonSize : '',\n      {\n        'is-disabled': buttonDisabled,\n        'is-loading': loading,\n        'is-plain': plain,\n        'is-round': round,\n        'is-circle': circle,\n      },\n    ]\"\n    :disabled=\"buttonDisabled || loading\"\n    :autofocus=\"autofocus\"\n    :type=\"nativeType\"\n    :style=\"buttonStyle\"\n    @click=\"handleClick\"\n  >\n    <el-icon v-if=\"loading\" class=\"is-loading\">\n      <loading />\n    </el-icon>\n    <el-icon v-else-if=\"icon\">\n      <component :is=\"icon\" />\n    </el-icon>\n    <span\n      v-if=\"$slots.default\"\n      :class=\"{ 'el-button__text--expand': shouldAddSpace }\"\n    >\n      <slot></slot>\n    </span>\n  </button>\n</template>\n\n<script lang=\"ts\">\nimport { computed, inject, defineComponent, Text, ref } from 'vue'\nimport { useCssVar } from '@vueuse/core'\nimport { ElIcon } from '@element-plus/components/icon'\nimport {\n  useDisabled,\n  useFormItem,\n  useGlobalConfig,\n  useSize,\n} from '@element-plus/hooks'\nimport { buttonGroupContextKey } from '@element-plus/tokens'\nimport { Loading } from '@element-plus/icons-vue'\n\nimport { lighten, darken } from '@element-plus/utils/color'\n\nimport { buttonEmits, buttonProps } from './button'\n\nexport default defineComponent({\n  name: 'ElButton',\n\n  components: {\n    ElIcon,\n    Loading,\n  },\n\n  props: buttonProps,\n  emits: buttonEmits,\n\n  setup(props, { emit, slots }) {\n    const buttonRef = ref()\n    const buttonGroupContext = inject(buttonGroupContextKey, undefined)\n    const globalConfig = useGlobalConfig('button')\n    const autoInsertSpace = computed(\n      () =>\n        props.autoInsertSpace ?? globalConfig.value?.autoInsertSpace ?? false\n    )\n\n    // add space between two characters in Chinese\n    const shouldAddSpace = computed(() => {\n      const defaultSlot = slots.default?.()\n      if (autoInsertSpace.value && defaultSlot?.length === 1) {\n        const slot = defaultSlot[0]\n        if (slot?.type === Text) {\n          const text = slot.children\n          return /^\\p{Unified_Ideograph}{2}$/u.test(text as string)\n        }\n      }\n      return false\n    })\n\n    const { form } = useFormItem()\n    const buttonSize = useSize(computed(() => buttonGroupContext?.size))\n    const buttonDisabled = useDisabled()\n    const buttonType = computed(\n      () => props.type || buttonGroupContext?.type || 'default'\n    )\n\n    // calculate hover & active color by color\n    const typeColor = computed(\n      () => useCssVar(`--el-color-${props.type}`).value\n    )\n    const buttonStyle = computed(() => {\n      let styles = {}\n\n      const buttonColor = props.color || typeColor.value\n\n      if (buttonColor) {\n        const darkenBgColor = darken(buttonColor, 0.1)\n        if (props.plain) {\n          styles = {\n            '--el-button-bg-color': lighten(buttonColor, 0.9),\n            '--el-button-text-color': buttonColor,\n            '--el-button-hover-text-color': 'var(--el-color-white)',\n            '--el-button-hover-bg-color': buttonColor,\n            '--el-button-hover-border-color': buttonColor,\n            '--el-button-active-bg-color': darkenBgColor,\n            '--el-button-active-text-color': 'var(--el-color-white)',\n            '--el-button-active-border-color': darkenBgColor,\n          }\n        } else {\n          const lightenBgColor = lighten(buttonColor)\n          styles = {\n            '--el-button-bg-color': buttonColor,\n            '--el-button-border-color': buttonColor,\n            '--el-button-hover-bg-color': lightenBgColor,\n            '--el-button-hover-border-color': lightenBgColor,\n            '--el-button-active-bg-color': darkenBgColor,\n            '--el-button-active-border-color': darkenBgColor,\n          }\n        }\n\n        if (buttonDisabled.value) {\n          const disabledButtonColor = lighten(buttonColor, 0.5)\n          styles['--el-button-disabled-bg-color'] = disabledButtonColor\n          styles['--el-button-disabled-border-color'] = disabledButtonColor\n        }\n      }\n\n      return styles\n    })\n\n    const handleClick = (evt: MouseEvent) => {\n      if (props.nativeType === 'reset') {\n        form?.resetFields()\n      }\n      emit('click', evt)\n    }\n\n    return {\n      buttonRef,\n      buttonStyle,\n\n      buttonSize,\n      buttonType,\n      buttonDisabled,\n\n      shouldAddSpace,\n\n      handleClick,\n    }\n  },\n})\n</script>\n"],"mappings":";;;;;sBACEA,kBAAA;IACEC,GAAA,EAAI;IACHC,KAAA,EAAAC,cAAA,E;;;;;;;IAYAC,QAAA,EAAUC,IAAA,CAAAC,cAAA,IAAkBD,IAAA,CAAAE,OAAA;IAC5BC,SAAA,EAAWH,IAAA,CAAAG,SAAA;IACXC,IAAA,EAAMJ,IAAA,CAAAK,UAAA;IACNC,KAAA,EAAAC,cAAA,CAAOP,IAAA,CAAAQ,WAAA;IACPC,OAAA,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAOX,IAAA,CAAAY,WAAA,IAAAZ,IAAA,CAAAY,WAAA,IAAAD,IAAA;MAEOX,IAAA,CAAAE,OAAA,IAAAW,SAAA,IAAfC,WAAA,CAAAC,kBAAA;;IAAwBlB,KAAA,EAAM;EAAA;qBAC5B,OAAAmB,WAAA,CAAAC,kBAAA,E;;QAEkBjB,IAAA,CAAAkB,IAAA,IAAAL,SAAA,IAApBC,WAAA,CAAAC,kBAAA;IAAAI,GAAA;EAAA;qBACE,Q,aAAAL,WAAA,CAAAM,uBAAA,CAAgBpB,IAAA,CAAAkB,IAAA,I;;0CAGVlB,IAAA,CAAAqB,MAAA,CAAOC,OAAA,IAAAT,SAAA,IADflB,kBAAA;;IAEGE,KAAA,EAAAC,cAAA;MAAA,2BAAoCE,IAAA,CAAAuB;IAAA;MAErCC,UAAA,CAAAxB,IAAA,CAAAqB,MAAA,a","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}