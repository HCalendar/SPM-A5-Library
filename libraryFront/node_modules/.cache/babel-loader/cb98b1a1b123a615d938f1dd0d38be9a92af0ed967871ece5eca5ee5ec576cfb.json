{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport request from \"../utils/request\";\nimport { ElMessage } from \"element-plus\";\nimport ValidCode from \"../components/Validate\";\nexport default {\n  name: \"LRegister\",\n  components: {\n    ValidCode\n  },\n  data() {\n    return {\n      form: {},\n      validCode: '',\n      rules: {\n        username: [{\n          required: true,\n          message: 'Please enter username',\n          trigger: 'blur'\n        }, {\n          min: 2,\n          max: 13,\n          message: 'Please enter it between 2 to 13',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: 'Please enter password',\n          trigger: 'blur'\n        }],\n        confirm: [{\n          required: true,\n          message: \"Please enter again\",\n          trigger: \"blur\"\n        }],\n        authorize: [{\n          required: true,\n          message: \"Please enter registration code\",\n          trigger: \"blur\"\n        }]\n      }\n    };\n  },\n  methods: {\n    createValidCode(data) {\n      this.validCode = data;\n    },\n    register() {\n      this.$refs['form'].validate(valid => {\n        if (valid) {\n          if (!this.form.validCode) {\n            ElMessage.error(\"Please enter verification code\");\n            return;\n          }\n          if (this.form.validCode.toLowerCase() !== this.validCode.toLowerCase()) {\n            ElMessage.error(\"Wrong verification code!\");\n            return;\n          }\n          if (this.form.password != this.form.confirm) {\n            ElMessage.error(\"The passwords entered twice are inconsistent!\");\n            return;\n          }\n          if (this.form.role == 1 && this.form.authorize != \"1234\") {\n            ElMessage.error(\"Wrong Registration Code!\");\n            return;\n          }\n          request.post(\"http://localhost:8181/user/register\", this.form).then(res => {\n            if (res.code == 0) {\n              ElMessage.success(\"Successfully register!\");\n              this.$router.push(\"/login\");\n            } else {\n              ElMessage.error(res.msg);\n            }\n          });\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["request","ElMessage","ValidCode","name","components","data","form","validCode","rules","username","required","message","trigger","min","max","password","confirm","authorize","methods","createValidCode","register","$refs","validate","valid","error","toLowerCase","role","post","then","res","code","success","$router","push","msg"],"sources":["G:\\SPM-A5-Library\\libraryFront\\src\\views\\Register.vue"],"sourcesContent":["<template>\r\n<div  class=\"login-container\"  >\r\n    <el-form ref=\"form\" :model=\"form\"    :rules=\"rules\" class=\"login-page\">\r\n      <h2 class=\"title\" style=\"margin-bottom: 20px\">Patron Register</h2>\r\n      <el-form-item prop=\"username\" >\r\n        <el-input v-model=\"form.username\" placeholder=\"Please enter username\" clearable >\r\n          <template #prefix>\r\n            <el-icon class=\"el-input__icon\"><User/></el-icon>\r\n          </template>\r\n        </el-input>\r\n      </el-form-item>\r\n      <el-form-item prop=\"password\">\r\n        <el-input v-model=\"form.password\"  placeholder=\"Please enter password\" clearable show-password>\r\n          <template #prefix>\r\n            <el-icon class=\"el-input__icon\"><Lock /></el-icon>\r\n          </template>\r\n        </el-input>\r\n      </el-form-item>\r\n      <el-form-item prop=\"confirm\">\r\n        <el-input v-model=\"form.confirm\" placeholder=\"Enter again\" clearable show-password>\r\n          <template #prefix>\r\n            <el-icon class=\"el-input__icon\"><Lock /></el-icon>\r\n          </template>\r\n        </el-input>\r\n      </el-form-item>\r\n      <el-form-item prop=\"role\">\r\n        <el-radio v-model=\"form.role\" label=\"2\">Patron</el-radio>\r\n        <el-radio v-model=\"form.role\" label=\"1\">Librarian</el-radio>\r\n      </el-form-item>\r\n      <el-form-item prop=\"authorize\" v-if=\"form.role==1\">\r\n        <el-input v-model=\"form.authorize\" placeholder=\"Please enter librarian registration code\" clearable show-password>\r\n          <template #prefix>\r\n            <el-icon class=\"el-input__icon\"><Lock /></el-icon>\r\n          </template>\r\n        </el-input>\r\n      </el-form-item>\r\n      <el-form-item>\r\n        <div style=\"display: flex\">\r\n          <el-input  v-model=\"form.validCode\" style=\"width: 45%;\" placeholder=\"Please enter verification code\"></el-input>\r\n          <ValidCode @input=\"createValidCode\" style=\"width: 50%\"/>\r\n        </div>\r\n      </el-form-item>\r\n      <el-form-item >\r\n        <el-button type=\"primary\" style=\" width: 100%\" @click=\"register\">Register</el-button>\r\n      </el-form-item>\r\n      <el-form-item><el-button type=\"text\" @click=\"$router.push('/login')\">Go to login>> </el-button></el-form-item>\r\n    </el-form>\r\n</div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport request from \"../utils/request\";\r\nimport {ElMessage} from \"element-plus\";\r\nimport ValidCode from \"../components/Validate\";\r\nexport default {\r\n  name: \"LRegister\",\r\n  components:{\r\n    ValidCode\r\n  },\r\n  data(){\r\n    return{\r\n      form:{},\r\n      validCode: '',\r\n      rules: {\r\n        username: [\r\n          {\r\n            required: true,\r\n            message: 'Please enter username',\r\n            trigger: 'blur',\r\n          },\r\n          {\r\n            min: 2,\r\n            max: 13,\r\n            message: 'Please enter it between 2 to 13',\r\n            trigger: 'blur',\r\n          },\r\n        ],\r\n        password: [\r\n          {\r\n            required: true,\r\n            message: 'Please enter password',\r\n            trigger: 'blur',\r\n          }\r\n        ],\r\n      confirm:[\r\n        {\r\n          required:true,\r\n          message:\"Please enter again\",\r\n          trigger:\"blur\"\r\n        }\r\n      ],\r\n        authorize:[\r\n          {\r\n            required:true,\r\n            message:\"Please enter registration code\",\r\n            trigger:\"blur\"\r\n          }\r\n        ],\r\n      }\r\n    }\r\n    },\r\n\r\n  methods:{\r\n    createValidCode(data){\r\n      this.validCode =data\r\n    },\r\n    register(){\r\n      this.$refs['form'].validate((valid) => {\r\n        if (valid) {\r\n          if (!this.form.validCode) {\r\n            ElMessage.error(\"Please enter verification code\")\r\n            return\r\n          }\r\n          if(this.form.validCode.toLowerCase() !== this.validCode.toLowerCase()) {\r\n            ElMessage.error(\"Wrong verification code!\")\r\n            return\r\n          }\r\n          if(this.form.password != this.form.confirm)\r\n          {\r\n            ElMessage.error(\"The passwords entered twice are inconsistent!\")\r\n            return\r\n          }\r\n          if(this.form.role == 1 && this.form.authorize != \"1234\")\r\n          {\r\n            ElMessage.error(\"Wrong Registration Code!\")\r\n            return\r\n          }\r\n          request.post(\"http://localhost:8181/user/register\",this.form).then(res=>{\r\n            if(res.code == 0)\r\n            {\r\n              ElMessage.success(\"Successfully register!\")\r\n              this.$router.push(\"/login\")\r\n            }\r\n            else {ElMessage.error(res.msg)}\r\n          })\r\n        }\r\n      })\r\n\r\n    }\r\n  }\r\n\r\n  }\r\n\r\n</script>\r\n\r\n<style scoped>\r\n.login-container {\r\n  position: fixed;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: url('../img/bg2.svg');\r\n  background-size: contain;\r\n}\r\n.login-page {\r\n  border-radius: 5px;\r\n  margin: 180px auto;\r\n  width: 350px;\r\n  padding: 35px 35px 15px;\r\n  background: #fff;\r\n  border: 1px solid #eaeaea;\r\n  box-shadow: 0 0 25px #cac6c6;\r\n}\r\n</style>\r\n"],"mappings":";AAoDA,OAAOA,OAAM,MAAO,kBAAkB;AACtC,SAAQC,SAAS,QAAO,cAAc;AACtC,OAAOC,SAAQ,MAAO,wBAAwB;AAC9C,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,UAAU,EAAC;IACTF;EACF,CAAC;EACDG,IAAIA,CAAA,EAAE;IACJ,OAAM;MACJC,IAAI,EAAC,CAAC,CAAC;MACPC,SAAS,EAAE,EAAE;MACbC,KAAK,EAAE;QACLC,QAAQ,EAAE,CACR;UACEC,QAAQ,EAAE,IAAI;UACdC,OAAO,EAAE,uBAAuB;UAChCC,OAAO,EAAE;QACX,CAAC,EACD;UACEC,GAAG,EAAE,CAAC;UACNC,GAAG,EAAE,EAAE;UACPH,OAAO,EAAE,iCAAiC;UAC1CC,OAAO,EAAE;QACX,CAAC,CACF;QACDG,QAAQ,EAAE,CACR;UACEL,QAAQ,EAAE,IAAI;UACdC,OAAO,EAAE,uBAAuB;UAChCC,OAAO,EAAE;QACX,EACD;QACHI,OAAO,EAAC,CACN;UACEN,QAAQ,EAAC,IAAI;UACbC,OAAO,EAAC,oBAAoB;UAC5BC,OAAO,EAAC;QACV,EACD;QACCK,SAAS,EAAC,CACR;UACEP,QAAQ,EAAC,IAAI;UACbC,OAAO,EAAC,gCAAgC;UACxCC,OAAO,EAAC;QACV;MAEJ;IACF;EACA,CAAC;EAEHM,OAAO,EAAC;IACNC,eAAeA,CAACd,IAAI,EAAC;MACnB,IAAI,CAACE,SAAQ,GAAGF,IAAG;IACrB,CAAC;IACDe,QAAQA,CAAA,EAAE;MACR,IAAI,CAACC,KAAK,CAAC,MAAM,CAAC,CAACC,QAAQ,CAAEC,KAAK,IAAK;QACrC,IAAIA,KAAK,EAAE;UACT,IAAI,CAAC,IAAI,CAACjB,IAAI,CAACC,SAAS,EAAE;YACxBN,SAAS,CAACuB,KAAK,CAAC,gCAAgC;YAChD;UACF;UACA,IAAG,IAAI,CAAClB,IAAI,CAACC,SAAS,CAACkB,WAAW,CAAC,MAAM,IAAI,CAAClB,SAAS,CAACkB,WAAW,CAAC,CAAC,EAAE;YACrExB,SAAS,CAACuB,KAAK,CAAC,0BAA0B;YAC1C;UACF;UACA,IAAG,IAAI,CAAClB,IAAI,CAACS,QAAO,IAAK,IAAI,CAACT,IAAI,CAACU,OAAO,EAC1C;YACEf,SAAS,CAACuB,KAAK,CAAC,+CAA+C;YAC/D;UACF;UACA,IAAG,IAAI,CAAClB,IAAI,CAACoB,IAAG,IAAK,KAAK,IAAI,CAACpB,IAAI,CAACW,SAAQ,IAAK,MAAM,EACvD;YACEhB,SAAS,CAACuB,KAAK,CAAC,0BAA0B;YAC1C;UACF;UACAxB,OAAO,CAAC2B,IAAI,CAAC,qCAAqC,EAAC,IAAI,CAACrB,IAAI,CAAC,CAACsB,IAAI,CAACC,GAAG,IAAE;YACtE,IAAGA,GAAG,CAACC,IAAG,IAAK,CAAC,EAChB;cACE7B,SAAS,CAAC8B,OAAO,CAAC,wBAAwB;cAC1C,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,QAAQ;YAC5B,OACK;cAAChC,SAAS,CAACuB,KAAK,CAACK,GAAG,CAACK,GAAG,CAAC;YAAA;UAChC,CAAC;QACH;MACF,CAAC;IAEH;EACF;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}