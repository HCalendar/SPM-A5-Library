{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { inject, reactive, ref, computed, nextTick, watch, onMounted, onBeforeMount } from 'vue';\nimport { isArray, isFunction, isObject } from '@vue/shared';\nimport isEqual from 'lodash/isEqual';\nimport debounce from 'lodash/debounce';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { CHANGE_EVENT, UPDATE_MODEL_EVENT } from '../../../utils/constants.mjs';\nimport { addResizeListener, removeResizeListener } from '../../../utils/resize-event.mjs';\nimport { getValueByPath } from '../../../utils/util.mjs';\nimport '../../popper/index.mjs';\nimport { ArrowUp } from '@element-plus/icons-vue';\nimport { useAllowCreate } from './useAllowCreate.mjs';\nimport { flattenOptions } from './util.mjs';\nimport { useInput } from './useInput.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { elFormKey } from '../../../tokens/form.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { Effect } from '../../popper/src/use-popper/defaults.mjs';\nconst DEFAULT_INPUT_PLACEHOLDER = \"\";\nconst MINIMUM_INPUT_WIDTH = 11;\nconst TAG_BASE_WIDTH = {\n  small: 42,\n  mini: 33\n};\nconst useSelect = (props, emit) => {\n  const {\n    t\n  } = useLocale();\n  const elForm = inject(elFormKey, {});\n  const states = reactive({\n    inputValue: DEFAULT_INPUT_PLACEHOLDER,\n    displayInputValue: DEFAULT_INPUT_PLACEHOLDER,\n    calculatedWidth: 0,\n    cachedPlaceholder: \"\",\n    cachedOptions: [],\n    createdOptions: [],\n    createdLabel: \"\",\n    createdSelected: false,\n    currentPlaceholder: \"\",\n    hoveringIndex: -1,\n    comboBoxHovering: false,\n    isOnComposition: false,\n    isSilentBlur: false,\n    isComposing: false,\n    inputLength: 20,\n    selectWidth: 200,\n    initialInputHeight: 0,\n    previousQuery: null,\n    previousValue: \"\",\n    query: \"\",\n    selectedLabel: \"\",\n    softFocus: false,\n    tagInMultiLine: false\n  });\n  const selectedIndex = ref(-1);\n  const popperSize = ref(-1);\n  const controlRef = ref(null);\n  const inputRef = ref(null);\n  const menuRef = ref(null);\n  const popper = ref(null);\n  const selectRef = ref(null);\n  const selectionRef = ref(null);\n  const calculatorRef = ref(null);\n  const expanded = ref(false);\n  const selectDisabled = computed(() => props.disabled || elForm.disabled);\n  const popupHeight = computed(() => {\n    const totalHeight = filteredOptions.value.length * 34;\n    return totalHeight > props.height ? props.height : totalHeight;\n  });\n  const hasModelValue = computed(() => {\n    return props.modelValue !== void 0 && props.modelValue !== null && props.modelValue !== \"\";\n  });\n  const showClearBtn = computed(() => {\n    const hasValue = props.multiple ? Array.isArray(props.modelValue) && props.modelValue.length > 0 : hasModelValue.value;\n    const criteria = props.clearable && !selectDisabled.value && states.comboBoxHovering && hasValue;\n    return criteria;\n  });\n  const iconComponent = computed(() => props.remote && props.filterable ? \"\" : ArrowUp);\n  const iconReverse = computed(() => iconComponent.value && expanded.value ? \"is-reverse\" : \"\");\n  const debounce$1 = computed(() => props.remote ? 300 : 0);\n  const emptyText = computed(() => {\n    const options = filteredOptions.value;\n    if (props.loading) {\n      return props.loadingText || t(\"el.select.loading\");\n    } else {\n      if (props.remote && states.inputValue === \"\" && options.length === 0) return false;\n      if (props.filterable && states.inputValue && options.length > 0) {\n        return props.noMatchText || t(\"el.select.noMatch\");\n      }\n      if (options.length === 0) {\n        return props.noDataText || t(\"el.select.noData\");\n      }\n    }\n    return null;\n  });\n  const filteredOptions = computed(() => {\n    const isValidOption = o => {\n      const query = states.inputValue;\n      const containsQueryString = query ? o.label.includes(query) : true;\n      return containsQueryString;\n    };\n    if (props.loading) {\n      return [];\n    }\n    return flattenOptions(props.options.concat(states.createdOptions).map(v => {\n      if (isArray(v.options)) {\n        const filtered = v.options.filter(isValidOption);\n        if (filtered.length > 0) {\n          return {\n            ...v,\n            options: filtered\n          };\n        }\n      } else {\n        if (props.remote || isValidOption(v)) {\n          return v;\n        }\n      }\n      return null;\n    }).filter(v => v !== null));\n  });\n  const optionsAllDisabled = computed(() => filteredOptions.value.every(option => option.disabled));\n  const selectSize = useSize();\n  const collapseTagSize = computed(() => [\"small\", \"mini\"].indexOf(selectSize.value) > -1 ? \"mini\" : \"small\");\n  const tagMaxWidth = computed(() => {\n    const select = selectionRef.value;\n    const size = collapseTagSize.value;\n    const paddingLeft = select ? parseInt(getComputedStyle(select).paddingLeft) : 0;\n    const paddingRight = select ? parseInt(getComputedStyle(select).paddingRight) : 0;\n    return states.selectWidth - paddingRight - paddingLeft - TAG_BASE_WIDTH[size];\n  });\n  const calculatePopperSize = () => {\n    var _a, _b, _c;\n    popperSize.value = ((_c = (_b = (_a = selectRef.value) == null ? void 0 : _a.getBoundingClientRect) == null ? void 0 : _b.call(_a)) == null ? void 0 : _c.width) || 200;\n  };\n  const inputWrapperStyle = computed(() => {\n    return {\n      width: `${states.calculatedWidth === 0 ? MINIMUM_INPUT_WIDTH : Math.ceil(states.calculatedWidth) + MINIMUM_INPUT_WIDTH}px`\n    };\n  });\n  const shouldShowPlaceholder = computed(() => {\n    if (isArray(props.modelValue)) {\n      return props.modelValue.length === 0 && !states.displayInputValue;\n    }\n    return props.filterable ? states.displayInputValue.length === 0 : true;\n  });\n  const currentPlaceholder = computed(() => {\n    const _placeholder = props.placeholder || t(\"el.select.placeholder\");\n    return props.multiple ? _placeholder : states.selectedLabel || _placeholder;\n  });\n  const popperRef = computed(() => {\n    var _a;\n    return (_a = popper.value) == null ? void 0 : _a.popperRef;\n  });\n  const indexRef = computed(() => {\n    if (props.multiple) {\n      const len = props.modelValue.length;\n      if (props.modelValue.length > 0) {\n        return filteredOptions.value.findIndex(o => o.value === props.modelValue[len - 1]);\n      }\n    } else {\n      if (props.modelValue) {\n        return filteredOptions.value.findIndex(o => o.value === props.modelValue);\n      }\n    }\n    return -1;\n  });\n  const dropdownMenuVisible = computed(() => {\n    return expanded.value && emptyText.value !== false;\n  });\n  const {\n    createNewOption,\n    removeNewOption,\n    selectNewOption,\n    clearAllNewOption\n  } = useAllowCreate(props, states);\n  const {\n    handleCompositionStart,\n    handleCompositionUpdate,\n    handleCompositionEnd\n  } = useInput(e => onInput(e));\n  const focusAndUpdatePopup = () => {\n    var _a, _b, _c, _d;\n    (_b = (_a = inputRef.value).focus) == null ? void 0 : _b.call(_a);\n    (_d = (_c = popper.value).update) == null ? void 0 : _d.call(_c);\n  };\n  const toggleMenu = () => {\n    if (props.automaticDropdown) return;\n    if (!selectDisabled.value) {\n      if (states.isComposing) states.softFocus = true;\n      return nextTick(() => {\n        var _a, _b;\n        expanded.value = !expanded.value;\n        (_b = (_a = inputRef.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);\n      });\n    }\n  };\n  const onInputChange = () => {\n    if (props.filterable && states.inputValue !== states.selectedLabel) {\n      states.query = states.selectedLabel;\n    }\n    handleQueryChange(states.inputValue);\n    return nextTick(() => {\n      createNewOption(states.inputValue);\n    });\n  };\n  const debouncedOnInputChange = debounce(onInputChange, debounce$1.value);\n  const handleQueryChange = val => {\n    if (states.previousQuery === val) {\n      return;\n    }\n    states.previousQuery = val;\n    if (props.filterable && isFunction(props.filterMethod)) {\n      props.filterMethod(val);\n    } else if (props.filterable && props.remote && isFunction(props.remoteMethod)) {\n      props.remoteMethod(val);\n    }\n  };\n  const emitChange = val => {\n    if (!isEqual(props.modelValue, val)) {\n      emit(CHANGE_EVENT, val);\n    }\n  };\n  const update = val => {\n    emit(UPDATE_MODEL_EVENT, val);\n    emitChange(val);\n    states.previousValue = val.toString();\n  };\n  const getValueIndex = (arr = [], value) => {\n    if (!isObject(value)) {\n      return arr.indexOf(value);\n    }\n    const valueKey = props.valueKey;\n    let index = -1;\n    arr.some((item, i) => {\n      if (getValueByPath(item, valueKey) === getValueByPath(value, valueKey)) {\n        index = i;\n        return true;\n      }\n      return false;\n    });\n    return index;\n  };\n  const getValueKey = item => {\n    return isObject(item) ? getValueByPath(item, props.valueKey) : item;\n  };\n  const getLabel = item => {\n    return isObject(item) ? item.label : item;\n  };\n  const resetInputHeight = () => {\n    if (props.collapseTags && !props.filterable) {\n      return;\n    }\n    return nextTick(() => {\n      var _a, _b;\n      if (!inputRef.value) return;\n      const selection = selectionRef.value;\n      selectRef.value.height = selection.offsetHeight;\n      if (expanded.value && emptyText.value !== false) {\n        (_b = (_a = popper.value) == null ? void 0 : _a.update) == null ? void 0 : _b.call(_a);\n      }\n    });\n  };\n  const handleResize = () => {\n    var _a, _b;\n    resetInputWidth();\n    calculatePopperSize();\n    (_b = (_a = popper.value) == null ? void 0 : _a.update) == null ? void 0 : _b.call(_a);\n    if (props.multiple) {\n      return resetInputHeight();\n    }\n  };\n  const resetInputWidth = () => {\n    const select = selectionRef.value;\n    if (select) {\n      states.selectWidth = select.getBoundingClientRect().width;\n    }\n  };\n  const onSelect = (option, idx, byClick = true) => {\n    var _a, _b;\n    if (props.multiple) {\n      let selectedOptions = props.modelValue.slice();\n      const index = getValueIndex(selectedOptions, getValueKey(option));\n      if (index > -1) {\n        selectedOptions = [...selectedOptions.slice(0, index), ...selectedOptions.slice(index + 1)];\n        states.cachedOptions.splice(index, 1);\n        removeNewOption(option);\n      } else if (props.multipleLimit <= 0 || selectedOptions.length < props.multipleLimit) {\n        selectedOptions = [...selectedOptions, getValueKey(option)];\n        states.cachedOptions.push(option);\n        selectNewOption(option);\n        updateHoveringIndex(idx);\n      }\n      update(selectedOptions);\n      if (option.created) {\n        states.query = \"\";\n        handleQueryChange(\"\");\n        states.inputLength = 20;\n      }\n      if (props.filterable) {\n        (_b = (_a = inputRef.value).focus) == null ? void 0 : _b.call(_a);\n        onUpdateInputValue(\"\");\n      }\n      if (props.filterable) {\n        states.calculatedWidth = calculatorRef.value.getBoundingClientRect().width;\n      }\n      resetInputHeight();\n      setSoftFocus();\n    } else {\n      selectedIndex.value = idx;\n      states.selectedLabel = option.label;\n      update(getValueKey(option));\n      expanded.value = false;\n      states.isComposing = false;\n      states.isSilentBlur = byClick;\n      selectNewOption(option);\n      if (!option.created) {\n        clearAllNewOption();\n      }\n      updateHoveringIndex(idx);\n    }\n  };\n  const deleteTag = (event, tag) => {\n    const index = props.modelValue.indexOf(tag.value);\n    if (index > -1 && !selectDisabled.value) {\n      const value = [...props.modelValue.slice(0, index), ...props.modelValue.slice(index + 1)];\n      states.cachedOptions.splice(index, 1);\n      update(value);\n      emit(\"remove-tag\", tag.value);\n      states.softFocus = true;\n      removeNewOption(tag);\n      return nextTick(focusAndUpdatePopup);\n    }\n    event.stopPropagation();\n  };\n  const handleFocus = event => {\n    const focused = states.isComposing;\n    states.isComposing = true;\n    if (!states.softFocus) {\n      if (!focused) emit(\"focus\", event);\n    } else {\n      states.softFocus = false;\n    }\n  };\n  const handleBlur = () => {\n    states.softFocus = false;\n    return nextTick(() => {\n      var _a, _b;\n      (_b = (_a = inputRef.value) == null ? void 0 : _a.blur) == null ? void 0 : _b.call(_a);\n      if (calculatorRef.value) {\n        states.calculatedWidth = calculatorRef.value.getBoundingClientRect().width;\n      }\n      if (states.isSilentBlur) {\n        states.isSilentBlur = false;\n      } else {\n        if (states.isComposing) {\n          emit(\"blur\");\n        }\n      }\n      states.isComposing = false;\n    });\n  };\n  const handleEsc = () => {\n    if (states.displayInputValue.length > 0) {\n      onUpdateInputValue(\"\");\n    } else {\n      expanded.value = false;\n    }\n  };\n  const handleDel = e => {\n    if (states.displayInputValue.length === 0) {\n      e.preventDefault();\n      const selected = props.modelValue.slice();\n      selected.pop();\n      removeNewOption(states.cachedOptions.pop());\n      update(selected);\n    }\n  };\n  const handleClear = () => {\n    let emptyValue;\n    if (isArray(props.modelValue)) {\n      emptyValue = [];\n    } else {\n      emptyValue = \"\";\n    }\n    states.softFocus = true;\n    if (props.multiple) {\n      states.cachedOptions = [];\n    } else {\n      states.selectedLabel = \"\";\n    }\n    expanded.value = false;\n    update(emptyValue);\n    emit(\"clear\");\n    clearAllNewOption();\n    return nextTick(focusAndUpdatePopup);\n  };\n  const onUpdateInputValue = val => {\n    states.displayInputValue = val;\n    states.inputValue = val;\n  };\n  const onKeyboardNavigate = (direction, hoveringIndex = void 0) => {\n    const options = filteredOptions.value;\n    if (![\"forward\", \"backward\"].includes(direction) || selectDisabled.value || options.length <= 0 || optionsAllDisabled.value) {\n      return;\n    }\n    if (!expanded.value) {\n      return toggleMenu();\n    }\n    if (hoveringIndex === void 0) {\n      hoveringIndex = states.hoveringIndex;\n    }\n    let newIndex = -1;\n    if (direction === \"forward\") {\n      newIndex = hoveringIndex + 1;\n      if (newIndex >= options.length) {\n        newIndex = 0;\n      }\n    } else if (direction === \"backward\") {\n      newIndex = hoveringIndex - 1;\n      if (newIndex < 0) {\n        newIndex = options.length - 1;\n      }\n    }\n    const option = options[newIndex];\n    if (option.disabled || option.type === \"Group\") {\n      return onKeyboardNavigate(direction, newIndex);\n    } else {\n      updateHoveringIndex(newIndex);\n      scrollToItem(newIndex);\n    }\n  };\n  const onKeyboardSelect = () => {\n    if (!expanded.value) {\n      return toggleMenu();\n    } else if (~states.hoveringIndex) {\n      onSelect(filteredOptions.value[states.hoveringIndex], states.hoveringIndex, false);\n    }\n  };\n  const updateHoveringIndex = idx => {\n    states.hoveringIndex = idx;\n  };\n  const resetHoveringIndex = () => {\n    states.hoveringIndex = -1;\n  };\n  const setSoftFocus = () => {\n    var _a;\n    const _input = inputRef.value;\n    if (_input) {\n      (_a = _input.focus) == null ? void 0 : _a.call(_input);\n    }\n  };\n  const onInput = event => {\n    const value = event.target.value;\n    onUpdateInputValue(value);\n    if (states.displayInputValue.length > 0 && !expanded.value) {\n      expanded.value = true;\n    }\n    states.calculatedWidth = calculatorRef.value.getBoundingClientRect().width;\n    if (props.multiple) {\n      resetInputHeight();\n    }\n    if (props.remote) {\n      debouncedOnInputChange();\n    } else {\n      return onInputChange();\n    }\n  };\n  const handleClickOutside = () => {\n    expanded.value = false;\n    return handleBlur();\n  };\n  const handleMenuEnter = () => {\n    states.inputValue = states.displayInputValue;\n    return nextTick(() => {\n      if (~indexRef.value) {\n        updateHoveringIndex(indexRef.value);\n        scrollToItem(states.hoveringIndex);\n      }\n    });\n  };\n  const scrollToItem = index => {\n    menuRef.value.scrollToItem(index);\n  };\n  const initStates = () => {\n    resetHoveringIndex();\n    if (props.multiple) {\n      if (props.modelValue.length > 0) {\n        let initHovering = false;\n        states.cachedOptions.length = 0;\n        props.modelValue.map(selected => {\n          const itemIndex = filteredOptions.value.findIndex(option => getValueKey(option) === selected);\n          if (~itemIndex) {\n            states.cachedOptions.push(filteredOptions.value[itemIndex]);\n            if (!initHovering) {\n              updateHoveringIndex(itemIndex);\n            }\n            initHovering = true;\n          }\n        });\n      } else {\n        states.cachedOptions = [];\n      }\n    } else {\n      if (hasModelValue.value) {\n        const options = filteredOptions.value;\n        const selectedItemIndex = options.findIndex(option => getValueKey(option) === props.modelValue);\n        if (~selectedItemIndex) {\n          states.selectedLabel = options[selectedItemIndex].label;\n          updateHoveringIndex(selectedItemIndex);\n        } else {\n          states.selectedLabel = `${props.modelValue}`;\n        }\n      } else {\n        states.selectedLabel = \"\";\n      }\n    }\n    calculatePopperSize();\n  };\n  watch(expanded, val => {\n    var _a, _b;\n    emit(\"visible-change\", val);\n    if (val) {\n      (_b = (_a = popper.value).update) == null ? void 0 : _b.call(_a);\n    } else {\n      states.displayInputValue = \"\";\n      createNewOption(\"\");\n    }\n  });\n  watch(() => props.modelValue, val => {\n    if (!val || val.toString() !== states.previousValue) {\n      initStates();\n    }\n  }, {\n    deep: true\n  });\n  watch(() => props.options, () => {\n    const input = inputRef.value;\n    if (!input || input && document.activeElement !== input) {\n      initStates();\n    }\n  }, {\n    deep: true\n  });\n  watch(filteredOptions, () => {\n    return nextTick(menuRef.value.resetScrollTop);\n  });\n  onMounted(() => {\n    initStates();\n    addResizeListener(selectRef.value, handleResize);\n  });\n  onBeforeMount(() => {\n    removeResizeListener(selectRef.value, handleResize);\n  });\n  return {\n    collapseTagSize,\n    currentPlaceholder,\n    expanded,\n    emptyText,\n    popupHeight,\n    debounce: debounce$1,\n    filteredOptions,\n    iconComponent,\n    iconReverse,\n    inputWrapperStyle,\n    popperSize,\n    dropdownMenuVisible,\n    hasModelValue,\n    shouldShowPlaceholder,\n    selectDisabled,\n    selectSize,\n    showClearBtn,\n    states,\n    tagMaxWidth,\n    calculatorRef,\n    controlRef,\n    inputRef,\n    menuRef,\n    popper,\n    selectRef,\n    selectionRef,\n    popperRef,\n    Effect,\n    debouncedOnInputChange,\n    deleteTag,\n    getLabel,\n    getValueKey,\n    handleBlur,\n    handleClear,\n    handleClickOutside,\n    handleDel,\n    handleEsc,\n    handleFocus,\n    handleMenuEnter,\n    handleResize,\n    toggleMenu,\n    scrollTo: scrollToItem,\n    onInput,\n    onKeyboardNavigate,\n    onKeyboardSelect,\n    onSelect,\n    onHover: updateHoveringIndex,\n    onUpdateInputValue,\n    handleCompositionStart,\n    handleCompositionEnd,\n    handleCompositionUpdate\n  };\n};\nexport { useSelect as default };","map":{"version":3,"names":["DEFAULT_INPUT_PLACEHOLDER","MINIMUM_INPUT_WIDTH","TAG_BASE_WIDTH","small","mini","useSelect","props","emit","t","useLocale","elForm","inject","elFormKey","states","reactive","inputValue","displayInputValue","calculatedWidth","cachedPlaceholder","cachedOptions","createdOptions","createdLabel","createdSelected","currentPlaceholder","hoveringIndex","comboBoxHovering","isOnComposition","isSilentBlur","isComposing","inputLength","selectWidth","initialInputHeight","previousQuery","previousValue","query","selectedLabel","softFocus","tagInMultiLine","selectedIndex","ref","popperSize","controlRef","inputRef","menuRef","popper","selectRef","selectionRef","calculatorRef","expanded","selectDisabled","computed","disabled","popupHeight","totalHeight","filteredOptions","value","length","height","hasModelValue","modelValue","showClearBtn","hasValue","multiple","Array","isArray","criteria","clearable","iconComponent","remote","filterable","ArrowUp","iconReverse","debounce$1","emptyText","options","loading","loadingText","noMatchText","noDataText","isValidOption","o","containsQueryString","label","includes","flattenOptions","concat","map","v","filtered","filter","optionsAllDisabled","every","option","selectSize","useSize","collapseTagSize","indexOf","tagMaxWidth","select","size","paddingLeft","parseInt","getComputedStyle","paddingRight","calculatePopperSize","_a","_b","_c","getBoundingClientRect","call","width","inputWrapperStyle","Math","ceil","shouldShowPlaceholder","_placeholder","placeholder","popperRef","indexRef","len","findIndex","dropdownMenuVisible","createNewOption","removeNewOption","selectNewOption","clearAllNewOption","useAllowCreate","handleCompositionStart","handleCompositionUpdate","handleCompositionEnd","useInput","e","onInput","focusAndUpdatePopup","_d","focus","update","toggleMenu","automaticDropdown","nextTick","onInputChange","handleQueryChange","debouncedOnInputChange","debounce","val","isFunction","filterMethod","remoteMethod","emitChange","isEqual","CHANGE_EVENT","UPDATE_MODEL_EVENT","toString","getValueIndex","arr","isObject","valueKey","index","some","item","i","getValueByPath","getValueKey","getLabel","resetInputHeight","collapseTags","selection","offsetHeight","handleResize","resetInputWidth","onSelect","idx","byClick","selectedOptions","slice","splice","multipleLimit","push","updateHoveringIndex","created","onUpdateInputValue","setSoftFocus","deleteTag","event","tag","stopPropagation","handleFocus","focused","handleBlur","blur","handleEsc","handleDel","preventDefault","selected","pop","handleClear","emptyValue","onKeyboardNavigate","direction","newIndex","type","scrollToItem","onKeyboardSelect","resetHoveringIndex","_input","target","handleClickOutside","handleMenuEnter","initStates","initHovering","itemIndex","selectedItemIndex","watch","deep","input","document","activeElement","resetScrollTop","onMounted","addResizeListener","onBeforeMount","removeResizeListener","Effect","scrollTo","onHover"],"sources":["../../../../../../packages/components/select-v2/src/useSelect.ts"],"sourcesContent":["import {\n  computed,\n  watch,\n  ref,\n  reactive,\n  nextTick,\n  inject,\n  onMounted,\n  onBeforeMount,\n} from 'vue'\nimport { isArray, isFunction, isObject } from '@vue/shared'\nimport isEqual from 'lodash/isEqual'\nimport lodashDebounce from 'lodash/debounce'\nimport { elFormKey } from '@element-plus/tokens'\nimport { useLocale, useSize } from '@element-plus/hooks'\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '@element-plus/utils/constants'\nimport {\n  addResizeListener,\n  removeResizeListener,\n} from '@element-plus/utils/resize-event'\nimport { getValueByPath } from '@element-plus/utils/util'\nimport { Effect } from '@element-plus/components/popper'\n\nimport { ArrowUp } from '@element-plus/icons-vue'\nimport { useAllowCreate } from './useAllowCreate'\n\nimport { flattenOptions } from './util'\n\nimport { useInput } from './useInput'\nimport type { SelectProps } from './defaults'\nimport type { ExtractPropTypes, CSSProperties } from 'vue'\nimport type { ElFormContext } from '@element-plus/tokens'\nimport type { OptionType, Option } from './select.types'\n\nconst DEFAULT_INPUT_PLACEHOLDER = ''\nconst MINIMUM_INPUT_WIDTH = 11\nconst TAG_BASE_WIDTH = {\n  small: 42,\n  mini: 33,\n}\n\nconst useSelect = (props: ExtractPropTypes<typeof SelectProps>, emit) => {\n  // inject\n  const { t } = useLocale()\n  const elForm = inject(elFormKey, {} as ElFormContext)\n\n  const states = reactive({\n    inputValue: DEFAULT_INPUT_PLACEHOLDER,\n    displayInputValue: DEFAULT_INPUT_PLACEHOLDER,\n    calculatedWidth: 0,\n    cachedPlaceholder: '',\n    cachedOptions: [] as Option[],\n    createdOptions: [] as Option[],\n    createdLabel: '',\n    createdSelected: false,\n    currentPlaceholder: '',\n    hoveringIndex: -1,\n    comboBoxHovering: false,\n    isOnComposition: false,\n    isSilentBlur: false,\n    isComposing: false,\n    inputLength: 20,\n    selectWidth: 200,\n    initialInputHeight: 0,\n    previousQuery: null,\n    previousValue: '',\n    query: '',\n    selectedLabel: '',\n    softFocus: false,\n    tagInMultiLine: false,\n  })\n\n  // data refs\n  const selectedIndex = ref(-1)\n  const popperSize = ref(-1)\n\n  // DOM & Component refs\n  const controlRef = ref(null)\n  const inputRef = ref(null) // el-input ref\n  const menuRef = ref(null)\n  const popper = ref(null)\n  const selectRef = ref(null)\n  const selectionRef = ref(null) // tags ref\n  const calculatorRef = ref<HTMLElement>(null)\n\n  // the controller of the expanded popup\n  const expanded = ref(false)\n\n  const selectDisabled = computed(() => props.disabled || elForm.disabled)\n\n  const popupHeight = computed(() => {\n    const totalHeight = filteredOptions.value.length * 34\n    return totalHeight > props.height ? props.height : totalHeight\n  })\n\n  const hasModelValue = computed(() => {\n    return (\n      props.modelValue !== undefined &&\n      props.modelValue !== null &&\n      props.modelValue !== ''\n    )\n  })\n\n  const showClearBtn = computed(() => {\n    const hasValue = props.multiple\n      ? Array.isArray(props.modelValue) && props.modelValue.length > 0\n      : hasModelValue.value\n\n    const criteria =\n      props.clearable &&\n      !selectDisabled.value &&\n      states.comboBoxHovering &&\n      hasValue\n    return criteria\n  })\n\n  const iconComponent = computed(() =>\n    props.remote && props.filterable ? '' : ArrowUp\n  )\n\n  const iconReverse = computed(() =>\n    iconComponent.value && expanded.value ? 'is-reverse' : ''\n  )\n\n  const debounce = computed(() => (props.remote ? 300 : 0))\n\n  // filteredOptions includes flatten the data into one dimensional array.\n  const emptyText = computed(() => {\n    const options = filteredOptions.value\n    if (props.loading) {\n      return props.loadingText || t('el.select.loading')\n    } else {\n      if (props.remote && states.inputValue === '' && options.length === 0)\n        return false\n      if (props.filterable && states.inputValue && options.length > 0) {\n        return props.noMatchText || t('el.select.noMatch')\n      }\n      if (options.length === 0) {\n        return props.noDataText || t('el.select.noData')\n      }\n    }\n    return null\n  })\n\n  const filteredOptions = computed(() => {\n    const isValidOption = (o: Option): boolean => {\n      // fill the conditions here.\n      const query = states.inputValue\n      // when query was given, we should test on the label see whether the label contains the given query\n      const containsQueryString = query ? o.label.includes(query) : true\n      return containsQueryString\n    }\n    if (props.loading) {\n      return []\n    }\n    return flattenOptions(\n      (props.options as OptionType[])\n        .concat(states.createdOptions)\n        .map((v) => {\n          if (isArray(v.options)) {\n            const filtered = v.options.filter(isValidOption)\n            if (filtered.length > 0) {\n              return {\n                ...v,\n                options: filtered,\n              }\n            }\n          } else {\n            if (props.remote || isValidOption(v as Option)) {\n              return v\n            }\n          }\n          return null\n        })\n        .filter((v) => v !== null)\n    )\n  })\n\n  const optionsAllDisabled = computed(() =>\n    filteredOptions.value.every((option) => option.disabled)\n  )\n\n  const selectSize = useSize()\n\n  const collapseTagSize = computed(() =>\n    ['small', 'mini'].indexOf(selectSize.value) > -1 ? 'mini' : 'small'\n  )\n\n  const tagMaxWidth = computed(() => {\n    const select = selectionRef.value\n    const size = collapseTagSize.value\n    const paddingLeft = select\n      ? parseInt(getComputedStyle(select).paddingLeft)\n      : 0\n    const paddingRight = select\n      ? parseInt(getComputedStyle(select).paddingRight)\n      : 0\n    return (\n      states.selectWidth - paddingRight - paddingLeft - TAG_BASE_WIDTH[size]\n    )\n  })\n\n  const calculatePopperSize = () => {\n    popperSize.value = selectRef.value?.getBoundingClientRect?.()?.width || 200\n  }\n\n  const inputWrapperStyle = computed(() => {\n    return {\n      width: `${\n        states.calculatedWidth === 0\n          ? MINIMUM_INPUT_WIDTH\n          : Math.ceil(states.calculatedWidth) + MINIMUM_INPUT_WIDTH\n      }px`,\n    } as CSSProperties\n  })\n\n  const shouldShowPlaceholder = computed(() => {\n    if (isArray(props.modelValue)) {\n      return props.modelValue.length === 0 && !states.displayInputValue\n    }\n\n    // when it's not multiple mode, we only determine this flag based on filterable and expanded\n    // when filterable flag is true, which means we have input box on the screen\n    return props.filterable ? states.displayInputValue.length === 0 : true\n  })\n\n  const currentPlaceholder = computed(() => {\n    const _placeholder = props.placeholder || t('el.select.placeholder')\n    return props.multiple ? _placeholder : states.selectedLabel || _placeholder\n  })\n\n  // this obtains the actual popper DOM element.\n  const popperRef = computed(() => popper.value?.popperRef)\n\n  // the index with current value in options\n  const indexRef = computed<number>(() => {\n    if (props.multiple) {\n      const len = (props.modelValue as []).length\n      if ((props.modelValue as Array<any>).length > 0) {\n        return filteredOptions.value.findIndex(\n          (o) => o.value === props.modelValue[len - 1]\n        )\n      }\n    } else {\n      if (props.modelValue) {\n        return filteredOptions.value.findIndex(\n          (o) => o.value === props.modelValue\n        )\n      }\n    }\n    return -1\n  })\n\n  const dropdownMenuVisible = computed(() => {\n    return expanded.value && emptyText.value !== false\n  })\n\n  // hooks\n  const {\n    createNewOption,\n    removeNewOption,\n    selectNewOption,\n    clearAllNewOption,\n  } = useAllowCreate(props, states)\n  const {\n    handleCompositionStart,\n    handleCompositionUpdate,\n    handleCompositionEnd,\n  } = useInput((e) => onInput(e))\n\n  // methods\n  const focusAndUpdatePopup = () => {\n    inputRef.value.focus?.()\n    popper.value.update?.()\n  }\n\n  const toggleMenu = () => {\n    if (props.automaticDropdown) return\n    if (!selectDisabled.value) {\n      if (states.isComposing) states.softFocus = true\n      return nextTick(() => {\n        expanded.value = !expanded.value\n        inputRef.value?.focus?.()\n      })\n    }\n  }\n\n  const onInputChange = () => {\n    if (props.filterable && states.inputValue !== states.selectedLabel) {\n      states.query = states.selectedLabel\n    }\n    handleQueryChange(states.inputValue)\n    return nextTick(() => {\n      createNewOption(states.inputValue)\n    })\n  }\n\n  const debouncedOnInputChange = lodashDebounce(onInputChange, debounce.value)\n\n  const handleQueryChange = (val: string) => {\n    if (states.previousQuery === val) {\n      return\n    }\n    states.previousQuery = val\n    if (props.filterable && isFunction(props.filterMethod)) {\n      props.filterMethod(val)\n    } else if (\n      props.filterable &&\n      props.remote &&\n      isFunction(props.remoteMethod)\n    ) {\n      props.remoteMethod(val)\n    }\n  }\n\n  const emitChange = (val: any | any[]) => {\n    if (!isEqual(props.modelValue, val)) {\n      emit(CHANGE_EVENT, val)\n    }\n  }\n\n  const update = (val: any) => {\n    emit(UPDATE_MODEL_EVENT, val)\n    emitChange(val)\n    states.previousValue = val.toString()\n  }\n\n  const getValueIndex = (arr = [], value: unknown) => {\n    if (!isObject(value)) {\n      return arr.indexOf(value)\n    }\n    const valueKey = props.valueKey\n    let index = -1\n    arr.some((item, i) => {\n      if (getValueByPath(item, valueKey) === getValueByPath(value, valueKey)) {\n        index = i\n        return true\n      }\n      return false\n    })\n    return index\n  }\n\n  const getValueKey = (item: unknown) => {\n    return isObject(item) ? getValueByPath(item, props.valueKey) : item\n  }\n\n  // if the selected item is item then we get label via indexing\n  // otherwise it should be string we simply return the item itself.\n  const getLabel = (item: unknown) => {\n    return isObject(item) ? item.label : item\n  }\n\n  const resetInputHeight = () => {\n    if (props.collapseTags && !props.filterable) {\n      return\n    }\n    return nextTick(() => {\n      if (!inputRef.value) return\n      const selection = selectionRef.value\n\n      selectRef.value.height = selection.offsetHeight\n      if (expanded.value && emptyText.value !== false) {\n        popper.value?.update?.()\n      }\n    })\n  }\n\n  const handleResize = () => {\n    resetInputWidth()\n    calculatePopperSize()\n    popper.value?.update?.()\n    if (props.multiple) {\n      return resetInputHeight()\n    }\n  }\n\n  const resetInputWidth = () => {\n    const select = selectionRef.value\n    if (select) {\n      states.selectWidth = select.getBoundingClientRect().width\n    }\n  }\n\n  const onSelect = (option: Option, idx: number, byClick = true) => {\n    if (props.multiple) {\n      let selectedOptions = (props.modelValue as any[]).slice()\n\n      const index = getValueIndex(selectedOptions, getValueKey(option))\n      if (index > -1) {\n        selectedOptions = [\n          ...selectedOptions.slice(0, index),\n          ...selectedOptions.slice(index + 1),\n        ]\n        states.cachedOptions.splice(index, 1)\n        removeNewOption(option)\n      } else if (\n        props.multipleLimit <= 0 ||\n        selectedOptions.length < props.multipleLimit\n      ) {\n        selectedOptions = [...selectedOptions, getValueKey(option)]\n        states.cachedOptions.push(option)\n        selectNewOption(option)\n        updateHoveringIndex(idx)\n      }\n      update(selectedOptions)\n      if (option.created) {\n        states.query = ''\n        handleQueryChange('')\n        states.inputLength = 20\n      }\n      if (props.filterable) {\n        inputRef.value.focus?.()\n        onUpdateInputValue('')\n      }\n      if (props.filterable) {\n        states.calculatedWidth =\n          calculatorRef.value.getBoundingClientRect().width\n      }\n      resetInputHeight()\n      setSoftFocus()\n    } else {\n      selectedIndex.value = idx\n      states.selectedLabel = option.label\n      update(getValueKey(option))\n      expanded.value = false\n      states.isComposing = false\n      states.isSilentBlur = byClick\n      selectNewOption(option)\n      if (!option.created) {\n        clearAllNewOption()\n      }\n      updateHoveringIndex(idx)\n    }\n  }\n\n  const deleteTag = (event: MouseEvent, tag: Option) => {\n    const index = (props.modelValue as Array<any>).indexOf(tag.value)\n\n    if (index > -1 && !selectDisabled.value) {\n      const value = [\n        ...(props.modelValue as Array<unknown>).slice(0, index),\n        ...(props.modelValue as Array<unknown>).slice(index + 1),\n      ]\n      states.cachedOptions.splice(index, 1)\n      update(value)\n      emit('remove-tag', tag.value)\n      states.softFocus = true\n      removeNewOption(tag)\n      return nextTick(focusAndUpdatePopup)\n    }\n    event.stopPropagation()\n  }\n\n  const handleFocus = (event: FocusEvent) => {\n    const focused = states.isComposing\n    states.isComposing = true\n    if (!states.softFocus) {\n      // If already in the focus state, shouldn't trigger event\n      if (!focused) emit('focus', event)\n    } else {\n      states.softFocus = false\n    }\n  }\n\n  const handleBlur = () => {\n    states.softFocus = false\n\n    // reset input value when blurred\n    // https://github.com/ElemeFE/element/pull/10822\n    return nextTick(() => {\n      inputRef.value?.blur?.()\n      if (calculatorRef.value) {\n        states.calculatedWidth =\n          calculatorRef.value.getBoundingClientRect().width\n      }\n      if (states.isSilentBlur) {\n        states.isSilentBlur = false\n      } else {\n        if (states.isComposing) {\n          emit('blur')\n        }\n      }\n      states.isComposing = false\n    })\n  }\n\n  // keyboard handlers\n  const handleEsc = () => {\n    if (states.displayInputValue.length > 0) {\n      onUpdateInputValue('')\n    } else {\n      expanded.value = false\n    }\n  }\n\n  const handleDel = (e: KeyboardEvent) => {\n    if (states.displayInputValue.length === 0) {\n      e.preventDefault()\n      const selected = (props.modelValue as Array<any>).slice()\n      selected.pop()\n      removeNewOption(states.cachedOptions.pop())\n      update(selected)\n    }\n  }\n\n  const handleClear = () => {\n    let emptyValue: string | any[]\n    if (isArray(props.modelValue)) {\n      emptyValue = []\n    } else {\n      emptyValue = ''\n    }\n\n    states.softFocus = true\n    if (props.multiple) {\n      states.cachedOptions = []\n    } else {\n      states.selectedLabel = ''\n    }\n    expanded.value = false\n    update(emptyValue)\n    emit('clear')\n    clearAllNewOption()\n    return nextTick(focusAndUpdatePopup)\n  }\n\n  const onUpdateInputValue = (val: string) => {\n    states.displayInputValue = val\n    states.inputValue = val\n  }\n\n  const onKeyboardNavigate = (\n    direction: 'forward' | 'backward',\n    hoveringIndex: number = undefined\n  ) => {\n    const options = filteredOptions.value\n    if (\n      !['forward', 'backward'].includes(direction) ||\n      selectDisabled.value ||\n      options.length <= 0 ||\n      optionsAllDisabled.value\n    ) {\n      return\n    }\n    if (!expanded.value) {\n      return toggleMenu()\n    }\n    if (hoveringIndex === undefined) {\n      hoveringIndex = states.hoveringIndex\n    }\n    let newIndex = -1\n    if (direction === 'forward') {\n      newIndex = hoveringIndex + 1\n      if (newIndex >= options.length) {\n        // return to the first option\n        newIndex = 0\n      }\n    } else if (direction === 'backward') {\n      newIndex = hoveringIndex - 1\n      if (newIndex < 0) {\n        // navigate to the last one\n        newIndex = options.length - 1\n      }\n    }\n    const option = options[newIndex]\n    if (option.disabled || option.type === 'Group') {\n      // prevent dispatching multiple nextTick callbacks.\n      return onKeyboardNavigate(direction, newIndex)\n    } else {\n      updateHoveringIndex(newIndex)\n      scrollToItem(newIndex)\n    }\n  }\n\n  const onKeyboardSelect = () => {\n    if (!expanded.value) {\n      return toggleMenu()\n    } else if (~states.hoveringIndex) {\n      onSelect(\n        filteredOptions.value[states.hoveringIndex],\n        states.hoveringIndex,\n        false\n      )\n    }\n  }\n\n  const updateHoveringIndex = (idx: number) => {\n    states.hoveringIndex = idx\n  }\n\n  const resetHoveringIndex = () => {\n    states.hoveringIndex = -1\n  }\n\n  const setSoftFocus = () => {\n    const _input = inputRef.value\n    if (_input) {\n      _input.focus?.()\n    }\n  }\n\n  const onInput = (event) => {\n    const value = event.target.value\n    onUpdateInputValue(value)\n    if (states.displayInputValue.length > 0 && !expanded.value) {\n      expanded.value = true\n    }\n\n    states.calculatedWidth = calculatorRef.value.getBoundingClientRect().width\n    if (props.multiple) {\n      resetInputHeight()\n    }\n    if (props.remote) {\n      debouncedOnInputChange()\n    } else {\n      return onInputChange()\n    }\n  }\n\n  const handleClickOutside = () => {\n    expanded.value = false\n    return handleBlur()\n  }\n\n  const handleMenuEnter = () => {\n    states.inputValue = states.displayInputValue\n    return nextTick(() => {\n      if (~indexRef.value) {\n        updateHoveringIndex(indexRef.value)\n        scrollToItem(states.hoveringIndex)\n      }\n    })\n  }\n\n  const scrollToItem = (index: number) => {\n    menuRef.value.scrollToItem(index)\n  }\n\n  const initStates = () => {\n    resetHoveringIndex()\n    if (props.multiple) {\n      if ((props.modelValue as Array<any>).length > 0) {\n        let initHovering = false\n        states.cachedOptions.length = 0\n        ;(props.modelValue as Array<any>).map((selected) => {\n          const itemIndex = filteredOptions.value.findIndex(\n            (option) => getValueKey(option) === selected\n          )\n          if (~itemIndex) {\n            states.cachedOptions.push(\n              filteredOptions.value[itemIndex] as Option\n            )\n            if (!initHovering) {\n              updateHoveringIndex(itemIndex)\n            }\n            initHovering = true\n          }\n        })\n      } else {\n        states.cachedOptions = []\n      }\n    } else {\n      if (hasModelValue.value) {\n        const options = filteredOptions.value\n        const selectedItemIndex = options.findIndex(\n          (option) => getValueKey(option) === props.modelValue\n        )\n        if (~selectedItemIndex) {\n          states.selectedLabel = options[selectedItemIndex].label\n          updateHoveringIndex(selectedItemIndex)\n        } else {\n          states.selectedLabel = `${props.modelValue}`\n        }\n      } else {\n        states.selectedLabel = ''\n      }\n    }\n    calculatePopperSize()\n  }\n\n  // in order to track these individually, we need to turn them into refs instead of watching the entire\n  // reactive object which could cause perf penalty when unnecessary field gets changed the watch method will\n  // be invoked.\n\n  watch(expanded, (val) => {\n    emit('visible-change', val)\n    if (val) {\n      popper.value.update?.()\n      // the purpose of this function is to differ the blur event trigger mechanism\n    } else {\n      states.displayInputValue = ''\n      createNewOption('')\n    }\n  })\n\n  watch(\n    () => props.modelValue,\n    (val) => {\n      if (!val || val.toString() !== states.previousValue) {\n        initStates()\n      }\n    },\n    {\n      deep: true,\n    }\n  )\n\n  watch(\n    () => props.options,\n    () => {\n      const input = inputRef.value\n      // filter or remote-search scenarios are not initialized\n      if (!input || (input && document.activeElement !== input)) {\n        initStates()\n      }\n    },\n    {\n      deep: true,\n    }\n  )\n\n  // fix the problem that scrollTop is not reset in filterable mode\n  watch(filteredOptions, () => {\n    return nextTick(menuRef.value.resetScrollTop)\n  })\n\n  onMounted(() => {\n    initStates()\n    addResizeListener(selectRef.value, handleResize)\n  })\n\n  onBeforeMount(() => {\n    removeResizeListener(selectRef.value, handleResize)\n  })\n\n  return {\n    // data exports\n    collapseTagSize,\n    currentPlaceholder,\n    expanded,\n    emptyText,\n    popupHeight,\n    debounce,\n    filteredOptions,\n    iconComponent,\n    iconReverse,\n    inputWrapperStyle,\n    popperSize,\n    dropdownMenuVisible,\n    hasModelValue,\n    // readonly,\n    shouldShowPlaceholder,\n    selectDisabled,\n    selectSize,\n    showClearBtn,\n    states,\n    tagMaxWidth,\n\n    // refs items exports\n    calculatorRef,\n    controlRef,\n    inputRef,\n    menuRef,\n    popper,\n    selectRef,\n    selectionRef,\n\n    popperRef,\n\n    Effect,\n\n    // methods exports\n    debouncedOnInputChange,\n    deleteTag,\n    getLabel,\n    getValueKey,\n    handleBlur,\n    handleClear,\n    handleClickOutside,\n    handleDel,\n    handleEsc,\n    handleFocus,\n    handleMenuEnter,\n    handleResize,\n    toggleMenu,\n    scrollTo: scrollToItem,\n    onInput,\n    onKeyboardNavigate,\n    onKeyboardSelect,\n    onSelect,\n    onHover: updateHoveringIndex,\n    onUpdateInputValue,\n    handleCompositionStart,\n    handleCompositionEnd,\n    handleCompositionUpdate,\n  }\n}\n\nexport default useSelect\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}