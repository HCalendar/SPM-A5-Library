{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { isLeaf } from '../../../utils/aria.mjs';\nconst getMenuIndex = el => {\n  if (!el) return 0;\n  const pieces = el.id.split(\"-\");\n  return Number(pieces[pieces.length - 2]);\n};\nconst checkNode = el => {\n  if (!el) return;\n  const input = el.querySelector(\"input\");\n  if (input) {\n    input.click();\n  } else if (isLeaf(el)) {\n    el.click();\n  }\n};\nconst sortByOriginalOrder = (oldNodes, newNodes) => {\n  const newNodesCopy = newNodes.slice(0);\n  const newIds = newNodesCopy.map(node => node.uid);\n  const res = oldNodes.reduce((acc, item) => {\n    const index = newIds.indexOf(item.uid);\n    if (index > -1) {\n      acc.push(item);\n      newNodesCopy.splice(index, 1);\n      newIds.splice(index, 1);\n    }\n    return acc;\n  }, []);\n  res.push(...newNodesCopy);\n  return res;\n};\nexport { checkNode, getMenuIndex, sortByOriginalOrder };","map":{"version":3,"names":["getMenuIndex","el","pieces","id","split","Number","length","checkNode","input","querySelector","click","isLeaf","sortByOriginalOrder","oldNodes","newNodes","newNodesCopy","slice","newIds","map","node","uid","res","reduce","acc","item","index","indexOf","push","splice"],"sources":["../../../../../../packages/components/cascader-panel/src/utils.ts"],"sourcesContent":["import { isLeaf } from '@element-plus/utils/aria'\nimport type { default as CascaderNode } from './node'\n\nexport const getMenuIndex = (el: HTMLElement) => {\n  if (!el) return 0\n  const pieces = el.id.split('-')\n  return Number(pieces[pieces.length - 2])\n}\n\nexport const checkNode = (el) => {\n  if (!el) return\n\n  const input = el.querySelector('input')\n  if (input) {\n    input.click()\n  } else if (isLeaf(el)) {\n    el.click()\n  }\n}\n\nexport const sortByOriginalOrder = (\n  oldNodes: CascaderNode[],\n  newNodes: CascaderNode[]\n) => {\n  const newNodesCopy = newNodes.slice(0)\n  const newIds = newNodesCopy.map((node) => node.uid)\n  const res = oldNodes.reduce((acc, item) => {\n    const index = newIds.indexOf(item.uid)\n    if (index > -1) {\n      acc.push(item)\n      newNodesCopy.splice(index, 1)\n      newIds.splice(index, 1)\n    }\n    return acc\n  }, [] as CascaderNode[])\n\n  res.push(...newNodesCopy)\n\n  return res\n}\n"],"mappings":";;MAGaA,YAAA,GAAgBC,EAAA,IAAoB;EAC/C,IAAI,CAACA,EAAA,EAAI,OAAO;EAChB,MAAMC,MAAA,GAASD,EAAA,CAAGE,EAAA,CAAGC,KAAA,CAAM;EAC3B,OAAOC,MAAA,CAAOH,MAAA,CAAOA,MAAA,CAAOI,MAAA,GAAS;AAAA;MAG1BC,SAAA,GAAaN,EAAA,IAAO;EAC/B,IAAI,CAACA,EAAA,EAAI;EAET,MAAMO,KAAA,GAAQP,EAAA,CAAGQ,aAAA,CAAc;EAC/B,IAAID,KAAA,EAAO;IACTA,KAAA,CAAME,KAAA;EAAA,WACGC,MAAA,CAAOV,EAAA,GAAK;IACrBA,EAAA,CAAGS,KAAA;EAAA;AAAA;MAIME,mBAAA,GAAsBA,CACjCC,QAAA,EACAC,QAAA,KACG;EACH,MAAMC,YAAA,GAAeD,QAAA,CAASE,KAAA,CAAM;EACpC,MAAMC,MAAA,GAASF,YAAA,CAAaG,GAAA,CAAKC,IAAA,IAASA,IAAA,CAAKC,GAAA;EAC/C,MAAMC,GAAA,GAAMR,QAAA,CAASS,MAAA,CAAO,CAACC,GAAA,EAAKC,IAAA,KAAS;IACzC,MAAMC,KAAA,GAAQR,MAAA,CAAOS,OAAA,CAAQF,IAAA,CAAKJ,GAAA;IAClC,IAAIK,KAAA,GAAQ,IAAI;MACdF,GAAA,CAAII,IAAA,CAAKH,IAAA;MACTT,YAAA,CAAaa,MAAA,CAAOH,KAAA,EAAO;MAC3BR,MAAA,CAAOW,MAAA,CAAOH,KAAA,EAAO;IAAA;IAEvB,OAAOF,GAAA;EAAA,GACN;EAEHF,GAAA,CAAIM,IAAA,CAAK,GAAGZ,YAAA;EAEZ,OAAOM,GAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}