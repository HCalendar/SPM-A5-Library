{"ast":null,"code":"import { isNumber } from '../../../utils/util.mjs';\nlet hiddenTextarea = void 0;\nconst HIDDEN_STYLE = `\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important;\n`;\nconst CONTEXT_STYLE = [\"letter-spacing\", \"line-height\", \"padding-top\", \"padding-bottom\", \"font-family\", \"font-weight\", \"font-size\", \"text-rendering\", \"text-transform\", \"width\", \"text-indent\", \"padding-left\", \"padding-right\", \"border-width\", \"box-sizing\"];\nfunction calculateNodeStyling(targetElement) {\n  const style = window.getComputedStyle(targetElement);\n  const boxSizing = style.getPropertyValue(\"box-sizing\");\n  const paddingSize = parseFloat(style.getPropertyValue(\"padding-bottom\")) + parseFloat(style.getPropertyValue(\"padding-top\"));\n  const borderSize = parseFloat(style.getPropertyValue(\"border-bottom-width\")) + parseFloat(style.getPropertyValue(\"border-top-width\"));\n  const contextStyle = CONTEXT_STYLE.map(name => `${name}:${style.getPropertyValue(name)}`).join(\";\");\n  return {\n    contextStyle,\n    paddingSize,\n    borderSize,\n    boxSizing\n  };\n}\nfunction calcTextareaHeight(targetElement, minRows = 1, maxRows) {\n  var _a;\n  if (!hiddenTextarea) {\n    hiddenTextarea = document.createElement(\"textarea\");\n    document.body.appendChild(hiddenTextarea);\n  }\n  const {\n    paddingSize,\n    borderSize,\n    boxSizing,\n    contextStyle\n  } = calculateNodeStyling(targetElement);\n  hiddenTextarea.setAttribute(\"style\", `${contextStyle};${HIDDEN_STYLE}`);\n  hiddenTextarea.value = targetElement.value || targetElement.placeholder || \"\";\n  let height = hiddenTextarea.scrollHeight;\n  const result = {};\n  if (boxSizing === \"border-box\") {\n    height = height + borderSize;\n  } else if (boxSizing === \"content-box\") {\n    height = height - paddingSize;\n  }\n  hiddenTextarea.value = \"\";\n  const singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;\n  if (isNumber(minRows)) {\n    let minHeight = singleRowHeight * minRows;\n    if (boxSizing === \"border-box\") {\n      minHeight = minHeight + paddingSize + borderSize;\n    }\n    height = Math.max(minHeight, height);\n    result.minHeight = `${minHeight}px`;\n  }\n  if (isNumber(maxRows)) {\n    let maxHeight = singleRowHeight * maxRows;\n    if (boxSizing === \"border-box\") {\n      maxHeight = maxHeight + paddingSize + borderSize;\n    }\n    height = Math.min(maxHeight, height);\n  }\n  result.height = `${height}px`;\n  (_a = hiddenTextarea.parentNode) == null ? void 0 : _a.removeChild(hiddenTextarea);\n  hiddenTextarea = void 0;\n  return result;\n}\nexport { calcTextareaHeight };","map":{"version":3,"names":["hiddenTextarea","HIDDEN_STYLE","CONTEXT_STYLE","calculateNodeStyling","targetElement","style","window","getComputedStyle","boxSizing","getPropertyValue","paddingSize","parseFloat","borderSize","contextStyle","map","name","join","minRows","maxRows","_a","document","createElement","body","appendChild","setAttribute","value","placeholder","height","scrollHeight","result","singleRowHeight","isNumber","minHeight","Math","max","maxHeight","min","parentNode","removeChild"],"sources":["../../../../../../packages/components/input/src/calc-textarea-height.ts"],"sourcesContent":["import { isNumber } from '@element-plus/utils/util'\n\nlet hiddenTextarea: HTMLTextAreaElement | undefined = undefined\n\nconst HIDDEN_STYLE = `\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important;\n`\n\nconst CONTEXT_STYLE = [\n  'letter-spacing',\n  'line-height',\n  'padding-top',\n  'padding-bottom',\n  'font-family',\n  'font-weight',\n  'font-size',\n  'text-rendering',\n  'text-transform',\n  'width',\n  'text-indent',\n  'padding-left',\n  'padding-right',\n  'border-width',\n  'box-sizing',\n]\n\ntype NodeStyle = {\n  contextStyle: string\n  boxSizing: string\n  paddingSize: number\n  borderSize: number\n}\n\ntype TextAreaHeight = {\n  height: string\n  minHeight?: string\n}\n\nfunction calculateNodeStyling(targetElement: Element): NodeStyle {\n  const style = window.getComputedStyle(targetElement)\n\n  const boxSizing = style.getPropertyValue('box-sizing')\n\n  const paddingSize =\n    parseFloat(style.getPropertyValue('padding-bottom')) +\n    parseFloat(style.getPropertyValue('padding-top'))\n\n  const borderSize =\n    parseFloat(style.getPropertyValue('border-bottom-width')) +\n    parseFloat(style.getPropertyValue('border-top-width'))\n\n  const contextStyle = CONTEXT_STYLE.map(\n    (name) => `${name}:${style.getPropertyValue(name)}`\n  ).join(';')\n\n  return { contextStyle, paddingSize, borderSize, boxSizing }\n}\n\nexport function calcTextareaHeight(\n  targetElement: HTMLTextAreaElement,\n  minRows = 1,\n  maxRows?: number\n): TextAreaHeight {\n  if (!hiddenTextarea) {\n    hiddenTextarea = document.createElement('textarea')\n    document.body.appendChild(hiddenTextarea)\n  }\n\n  const { paddingSize, borderSize, boxSizing, contextStyle } =\n    calculateNodeStyling(targetElement)\n\n  hiddenTextarea.setAttribute('style', `${contextStyle};${HIDDEN_STYLE}`)\n  hiddenTextarea.value = targetElement.value || targetElement.placeholder || ''\n\n  let height = hiddenTextarea.scrollHeight\n  const result = {} as TextAreaHeight\n\n  if (boxSizing === 'border-box') {\n    height = height + borderSize\n  } else if (boxSizing === 'content-box') {\n    height = height - paddingSize\n  }\n\n  hiddenTextarea.value = ''\n  const singleRowHeight = hiddenTextarea.scrollHeight - paddingSize\n\n  if (isNumber(minRows)) {\n    let minHeight = singleRowHeight * minRows\n    if (boxSizing === 'border-box') {\n      minHeight = minHeight + paddingSize + borderSize\n    }\n    height = Math.max(minHeight, height)\n    result.minHeight = `${minHeight}px`\n  }\n  if (isNumber(maxRows)) {\n    let maxHeight = singleRowHeight * maxRows\n    if (boxSizing === 'border-box') {\n      maxHeight = maxHeight + paddingSize + borderSize\n    }\n    height = Math.min(maxHeight, height)\n  }\n  result.height = `${height}px`\n  hiddenTextarea.parentNode?.removeChild(hiddenTextarea)\n  hiddenTextarea = undefined\n\n  return result\n}\n"],"mappings":";AAEA,IAAIA,cAAA,GAAkD;AAEtD,MAAMC,YAAA,GAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUrB,MAAMC,aAAA,GAAgB,CACpB,kBACA,eACA,eACA,kBACA,eACA,eACA,aACA,kBACA,kBACA,SACA,eACA,gBACA,iBACA,gBACA;AAeF,SAAAC,qBAA8BC,aAAA,EAAmC;EAC/D,MAAMC,KAAA,GAAQC,MAAA,CAAOC,gBAAA,CAAiBH,aAAA;EAEtC,MAAMI,SAAA,GAAYH,KAAA,CAAMI,gBAAA,CAAiB;EAEzC,MAAMC,WAAA,GACJC,UAAA,CAAWN,KAAA,CAAMI,gBAAA,CAAiB,qBAClCE,UAAA,CAAWN,KAAA,CAAMI,gBAAA,CAAiB;EAEpC,MAAMG,UAAA,GACJD,UAAA,CAAWN,KAAA,CAAMI,gBAAA,CAAiB,0BAClCE,UAAA,CAAWN,KAAA,CAAMI,gBAAA,CAAiB;EAEpC,MAAMI,YAAA,GAAeX,aAAA,CAAcY,GAAA,CAChCC,IAAA,IAAS,GAAGA,IAAA,IAAQV,KAAA,CAAMI,gBAAA,CAAiBM,IAAA,KAC5CC,IAAA,CAAK;EAEP,OAAO;IAAEH,YAAA;IAAcH,WAAA;IAAaE,UAAA;IAAYJ;EAAA;AAAA;4BAIhDJ,aAAA,EACAa,OAAA,GAAU,GACVC,OAAA,EACgB;EApElB,IAAAC,EAAA;EAqEE,IAAI,CAACnB,cAAA,EAAgB;IACnBA,cAAA,GAAiBoB,QAAA,CAASC,aAAA,CAAc;IACxCD,QAAA,CAASE,IAAA,CAAKC,WAAA,CAAYvB,cAAA;EAAA;EAG5B,MAAM;IAAEU,WAAA;IAAaE,UAAA;IAAYJ,SAAA;IAAWK;EAAA,IAC1CV,oBAAA,CAAqBC,aAAA;EAEvBJ,cAAA,CAAewB,YAAA,CAAa,SAAS,GAAGX,YAAA,IAAgBZ,YAAA;EACxDD,cAAA,CAAeyB,KAAA,GAAQrB,aAAA,CAAcqB,KAAA,IAASrB,aAAA,CAAcsB,WAAA,IAAe;EAE3E,IAAIC,MAAA,GAAS3B,cAAA,CAAe4B,YAAA;EAC5B,MAAMC,MAAA,GAAS;EAEf,IAAIrB,SAAA,KAAc,cAAc;IAC9BmB,MAAA,GAASA,MAAA,GAASf,UAAA;EAAA,WACTJ,SAAA,KAAc,eAAe;IACtCmB,MAAA,GAASA,MAAA,GAASjB,WAAA;EAAA;EAGpBV,cAAA,CAAeyB,KAAA,GAAQ;EACvB,MAAMK,eAAA,GAAkB9B,cAAA,CAAe4B,YAAA,GAAelB,WAAA;EAEtD,IAAIqB,QAAA,CAASd,OAAA,GAAU;IACrB,IAAIe,SAAA,GAAYF,eAAA,GAAkBb,OAAA;IAClC,IAAIT,SAAA,KAAc,cAAc;MAC9BwB,SAAA,GAAYA,SAAA,GAAYtB,WAAA,GAAcE,UAAA;IAAA;IAExCe,MAAA,GAASM,IAAA,CAAKC,GAAA,CAAIF,SAAA,EAAWL,MAAA;IAC7BE,MAAA,CAAOG,SAAA,GAAY,GAAGA,SAAA;EAAA;EAExB,IAAID,QAAA,CAASb,OAAA,GAAU;IACrB,IAAIiB,SAAA,GAAYL,eAAA,GAAkBZ,OAAA;IAClC,IAAIV,SAAA,KAAc,cAAc;MAC9B2B,SAAA,GAAYA,SAAA,GAAYzB,WAAA,GAAcE,UAAA;IAAA;IAExCe,MAAA,GAASM,IAAA,CAAKG,GAAA,CAAID,SAAA,EAAWR,MAAA;EAAA;EAE/BE,MAAA,CAAOF,MAAA,GAAS,GAAGA,MAAA;EACnB,CAAAR,EAAA,GAAAnB,cAAA,CAAeqC,UAAA,KAAf,gBAAAlB,EAAA,CAA2BmB,WAAA,CAAYtC,cAAA;EACvCA,cAAA,GAAiB;EAEjB,OAAO6B,MAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}