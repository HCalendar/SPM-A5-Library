{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { isVNode, createVNode, render } from 'vue';\nimport '../../../utils/util.mjs';\nimport PopupManager from '../../../utils/popup-manager.mjs';\nimport isServer from '../../../utils/isServer.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport './message2.mjs';\nimport { messageTypes } from './message.mjs';\nimport script from './message.vue_vue_type_script_lang.mjs';\nconst instances = [];\nlet seed = 1;\nconst message = function (options = {}) {\n  if (isServer) return {\n    close: () => void 0\n  };\n  if (!isVNode(options) && typeof options === \"object\" && options.grouping && !isVNode(options.message) && instances.length) {\n    const tempVm = instances.find(item => {\n      var _a, _b, _c;\n      return `${(_b = (_a = item.vm.props) == null ? void 0 : _a.message) != null ? _b : \"\"}` === `${(_c = options.message) != null ? _c : \"\"}`;\n    });\n    if (tempVm) {\n      tempVm.vm.component.props.repeatNum += 1;\n      tempVm.vm.component.props.type = options == null ? void 0 : options.type;\n      return {\n        close: () => vm.component.proxy.visible = false\n      };\n    }\n  }\n  if (typeof options === \"string\" || isVNode(options)) {\n    options = {\n      message: options\n    };\n  }\n  let verticalOffset = options.offset || 20;\n  instances.forEach(({\n    vm: vm2\n  }) => {\n    var _a;\n    verticalOffset += (((_a = vm2.el) == null ? void 0 : _a.offsetHeight) || 0) + 16;\n  });\n  verticalOffset += 16;\n  const id = `message_${seed++}`;\n  const userOnClose = options.onClose;\n  const props = {\n    zIndex: PopupManager.nextZIndex(),\n    offset: verticalOffset,\n    ...options,\n    id,\n    onClose: () => {\n      close(id, userOnClose);\n    }\n  };\n  let appendTo = document.body;\n  if (options.appendTo instanceof HTMLElement) {\n    appendTo = options.appendTo;\n  } else if (typeof options.appendTo === \"string\") {\n    appendTo = document.querySelector(options.appendTo);\n  }\n  if (!(appendTo instanceof HTMLElement)) {\n    debugWarn(\"ElMessage\", \"the appendTo option is not an HTMLElement. Falling back to document.body.\");\n    appendTo = document.body;\n  }\n  const container = document.createElement(\"div\");\n  container.className = `container_${id}`;\n  const message2 = props.message;\n  const vm = createVNode(script, props, isVNode(props.message) ? {\n    default: () => message2\n  } : null);\n  vm.props.onDestroy = () => {\n    render(null, container);\n  };\n  render(vm, container);\n  instances.push({\n    vm\n  });\n  appendTo.appendChild(container.firstElementChild);\n  return {\n    close: () => vm.component.proxy.visible = false\n  };\n};\nmessageTypes.forEach(type => {\n  message[type] = (options = {}) => {\n    if (typeof options === \"string\" || isVNode(options)) {\n      options = {\n        message: options\n      };\n    }\n    return message({\n      ...options,\n      type\n    });\n  };\n});\nfunction close(id, userOnClose) {\n  const idx = instances.findIndex(({\n    vm: vm2\n  }) => id === vm2.component.props.id);\n  if (idx === -1) return;\n  const {\n    vm\n  } = instances[idx];\n  if (!vm) return;\n  userOnClose == null ? void 0 : userOnClose(vm);\n  const removedHeight = vm.el.offsetHeight;\n  instances.splice(idx, 1);\n  const len = instances.length;\n  if (len < 1) return;\n  for (let i = idx; i < len; i++) {\n    const pos = parseInt(instances[i].vm.el.style[\"top\"], 10) - removedHeight - 16;\n    instances[i].vm.component.props.offset = pos;\n  }\n}\nfunction closeAll() {\n  var _a;\n  for (let i = instances.length - 1; i >= 0; i--) {\n    const instance = instances[i].vm.component;\n    (_a = instance == null ? void 0 : instance.proxy) == null ? void 0 : _a.close();\n  }\n}\nmessage.closeAll = closeAll;\nexport { close, closeAll, message as default };","map":{"version":3,"names":["instances","seed","message","options","isServer","close","isVNode","grouping","length","tempVm","find","item","_a","_b","_c","vm","props","component","repeatNum","type","proxy","visible","verticalOffset","offset","forEach","vm2","el","offsetHeight","id","userOnClose","onClose","zIndex","PopupManager","nextZIndex","appendTo","document","body","HTMLElement","querySelector","debugWarn","container","createElement","className","message2","createVNode","script","default","onDestroy","render","push","appendChild","firstElementChild","messageTypes","idx","findIndex","removedHeight","splice","len","i","pos","parseInt","style","instance","closeAll"],"sources":["../../../../../../packages/components/message/src/message-method.ts"],"sourcesContent":["import { createVNode, render } from 'vue'\nimport { isVNode } from '@element-plus/utils/util'\nimport PopupManager from '@element-plus/utils/popup-manager'\nimport isServer from '@element-plus/utils/isServer'\nimport { debugWarn } from '@element-plus/utils/error'\nimport MessageConstructor from './message.vue'\nimport { messageTypes } from './message'\n\nimport type { Message, MessageFn, MessageQueue, MessageProps } from './message'\nimport type { ComponentPublicInstance, VNode } from 'vue'\n\nconst instances: MessageQueue = []\nlet seed = 1\n\n// TODO: Since Notify.ts is basically the same like this file. So we could do some encapsulation against them to reduce code duplication.\n\nconst message: MessageFn & Partial<Message> = function (options = {}) {\n  if (isServer) return { close: () => undefined }\n\n  if (\n    !isVNode(options) &&\n    typeof options === 'object' &&\n    options.grouping &&\n    !isVNode(options.message) &&\n    instances.length\n  ) {\n    const tempVm: any = instances.find(\n      (item) =>\n        `${item.vm.props?.message ?? ''}` ===\n        `${(options as any).message ?? ''}`\n    )\n    if (tempVm) {\n      tempVm.vm.component!.props.repeatNum += 1\n      tempVm.vm.component!.props.type = options?.type\n      return {\n        close: () =>\n          ((\n            vm.component!.proxy as ComponentPublicInstance<{ visible: boolean }>\n          ).visible = false),\n      }\n    }\n  }\n\n  if (typeof options === 'string' || isVNode(options)) {\n    options = { message: options }\n  }\n\n  let verticalOffset = options.offset || 20\n  instances.forEach(({ vm }) => {\n    verticalOffset += (vm.el?.offsetHeight || 0) + 16\n  })\n  verticalOffset += 16\n\n  const id = `message_${seed++}`\n  const userOnClose = options.onClose\n  const props: Partial<MessageProps> = {\n    zIndex: PopupManager.nextZIndex(),\n    offset: verticalOffset,\n    ...options,\n    id,\n    onClose: () => {\n      close(id, userOnClose)\n    },\n  }\n\n  let appendTo: HTMLElement | null = document.body\n  if (options.appendTo instanceof HTMLElement) {\n    appendTo = options.appendTo\n  } else if (typeof options.appendTo === 'string') {\n    appendTo = document.querySelector(options.appendTo)\n  }\n  // should fallback to default value with a warning\n  if (!(appendTo instanceof HTMLElement)) {\n    debugWarn(\n      'ElMessage',\n      'the appendTo option is not an HTMLElement. Falling back to document.body.'\n    )\n    appendTo = document.body\n  }\n\n  const container = document.createElement('div')\n\n  container.className = `container_${id}`\n\n  const message = props.message\n  const vm = createVNode(\n    MessageConstructor,\n    props,\n    isVNode(props.message) ? { default: () => message } : null\n  )\n\n  // clean message element preventing mem leak\n  vm.props!.onDestroy = () => {\n    render(null, container)\n    // since the element is destroy, then the VNode should be collected by GC as well\n    // we do not want cause any mem leak because we have returned vm as a reference to users\n    // so that we manually set it to false.\n  }\n\n  render(vm, container)\n  // instances will remove this item when close function gets called. So we do not need to worry about it.\n  instances.push({ vm })\n  appendTo.appendChild(container.firstElementChild!)\n\n  return {\n    // instead of calling the onClose function directly, setting this value so that we can have the full lifecycle\n    // for out component, so that all closing steps will not be skipped.\n    close: () =>\n      ((\n        vm.component!.proxy as ComponentPublicInstance<{ visible: boolean }>\n      ).visible = false),\n  }\n}\n\nmessageTypes.forEach((type) => {\n  message[type] = (options = {}) => {\n    if (typeof options === 'string' || isVNode(options)) {\n      options = {\n        message: options,\n      }\n    }\n    return message({\n      ...options,\n      type,\n    })\n  }\n})\n\nexport function close(id: string, userOnClose?: (vm: VNode) => void): void {\n  const idx = instances.findIndex(({ vm }) => id === vm.component!.props.id)\n  if (idx === -1) return\n\n  const { vm } = instances[idx]\n  if (!vm) return\n  userOnClose?.(vm)\n\n  const removedHeight = vm.el!.offsetHeight\n  instances.splice(idx, 1)\n\n  // adjust other instances vertical offset\n  const len = instances.length\n  if (len < 1) return\n  for (let i = idx; i < len; i++) {\n    const pos =\n      parseInt(instances[i].vm.el!.style['top'], 10) - removedHeight - 16\n\n    instances[i].vm.component!.props.offset = pos\n  }\n}\n\nexport function closeAll(): void {\n  for (let i = instances.length - 1; i >= 0; i--) {\n    const instance = instances[i].vm.component\n    ;(instance?.proxy as any)?.close()\n  }\n}\n\nmessage.closeAll = closeAll\n\nexport default message as Message\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}