{"ast":null,"code":"import { defineComponent, ref, computed, onMounted, watch } from 'vue';\nimport { useTimeoutFn, useEventListener } from '@vueuse/core';\nimport { EVENT_CODE } from '../../../utils/aria.mjs';\nimport { ElBadge } from '../../badge/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { TypeComponents, TypeComponentsMap } from '../../../utils/icon.mjs';\nimport { messageProps, messageEmits } from './message.mjs';\nvar script = defineComponent({\n  name: \"ElMessage\",\n  components: {\n    ElBadge,\n    ElIcon,\n    ...TypeComponents\n  },\n  props: messageProps,\n  emits: messageEmits,\n  setup(props) {\n    const visible = ref(false);\n    const badgeType = ref(props.type ? props.type === \"error\" ? \"danger\" : props.type : \"info\");\n    let stopTimer = void 0;\n    const typeClass = computed(() => {\n      const type = props.type;\n      return type && TypeComponentsMap[type] ? `el-message-icon--${type}` : \"\";\n    });\n    const iconComponent = computed(() => {\n      return props.icon || TypeComponentsMap[props.type] || \"\";\n    });\n    const customStyle = computed(() => ({\n      top: `${props.offset}px`,\n      zIndex: props.zIndex\n    }));\n    function startTimer() {\n      if (props.duration > 0) {\n        ;\n        ({\n          stop: stopTimer\n        } = useTimeoutFn(() => {\n          if (visible.value) close();\n        }, props.duration));\n      }\n    }\n    function clearTimer() {\n      stopTimer == null ? void 0 : stopTimer();\n    }\n    function close() {\n      visible.value = false;\n    }\n    function keydown({\n      code\n    }) {\n      if (code === EVENT_CODE.esc) {\n        if (visible.value) {\n          close();\n        }\n      } else {\n        startTimer();\n      }\n    }\n    onMounted(() => {\n      startTimer();\n      visible.value = true;\n    });\n    watch(() => props.repeatNum, () => {\n      clearTimer();\n      startTimer();\n    });\n    useEventListener(document, \"keydown\", keydown);\n    return {\n      typeClass,\n      iconComponent,\n      customStyle,\n      visible,\n      badgeType,\n      close,\n      clearTimer,\n      startTimer\n    };\n  }\n});\nexport { script as default };","map":{"version":3,"names":["script","defineComponent","name","components","ElBadge","ElIcon","TypeComponents","props","messageProps","emits","messageEmits","setup","visible","ref","badgeType","type","stopTimer","typeClass","computed","TypeComponentsMap","iconComponent","icon","customStyle","top","offset","zIndex","startTimer","duration","stop","useTimeoutFn","value","close","clearTimer","keydown","code","EVENT_CODE","esc","onMounted","watch","repeatNum","useEventListener","document"],"sources":["../../../../../../packages/components/message/src/message.vue"],"sourcesContent":["<template>\n  <transition\n    name=\"el-message-fade\"\n    @before-leave=\"onClose\"\n    @after-leave=\"$emit('destroy')\"\n  >\n    <div\n      v-show=\"visible\"\n      :id=\"id\"\n      :class=\"[\n        'el-message',\n        type && !icon ? `el-message--${type}` : '',\n        center ? 'is-center' : '',\n        showClose ? 'is-closable' : '',\n        customClass,\n      ]\"\n      :style=\"customStyle\"\n      role=\"alert\"\n      @mouseenter=\"clearTimer\"\n      @mouseleave=\"startTimer\"\n    >\n      <el-badge\n        v-if=\"repeatNum > 1\"\n        :value=\"repeatNum\"\n        :type=\"badgeType\"\n        class=\"el-message__badge\"\n      >\n      </el-badge>\n      <el-icon v-if=\"iconComponent\" class=\"el-message__icon\" :class=\"typeClass\">\n        <component :is=\"iconComponent\" />\n      </el-icon>\n      <slot>\n        <p v-if=\"!dangerouslyUseHTMLString\" class=\"el-message__content\">\n          {{ message }}\n        </p>\n        <!-- Caution here, message could've been compromised, never use user's input as message -->\n        <p v-else class=\"el-message__content\" v-html=\"message\"></p>\n      </slot>\n      <el-icon\n        v-if=\"showClose\"\n        class=\"el-message__closeBtn\"\n        @click.stop=\"close\"\n      >\n        <close />\n      </el-icon>\n    </div>\n  </transition>\n</template>\n<script lang=\"ts\">\nimport { defineComponent, computed, ref, onMounted, watch } from 'vue'\nimport { useEventListener, useTimeoutFn } from '@vueuse/core'\nimport { EVENT_CODE } from '@element-plus/utils/aria'\nimport ElBadge from '@element-plus/components/badge'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { TypeComponents, TypeComponentsMap } from '@element-plus/utils/icon'\n\nimport { messageEmits, messageProps } from './message'\nimport type { BadgeProps } from '@element-plus/components/badge'\n\nimport type { CSSProperties } from 'vue'\n\nexport default defineComponent({\n  name: 'ElMessage',\n\n  components: {\n    ElBadge,\n    ElIcon,\n    ...TypeComponents,\n  },\n\n  props: messageProps,\n  emits: messageEmits,\n\n  setup(props) {\n    const visible = ref(false)\n    const badgeType = ref<BadgeProps['type']>(\n      props.type ? (props.type === 'error' ? 'danger' : props.type) : 'info'\n    )\n    let stopTimer: (() => void) | undefined = undefined\n\n    const typeClass = computed(() => {\n      const type = props.type\n      return type && TypeComponentsMap[type] ? `el-message-icon--${type}` : ''\n    })\n\n    const iconComponent = computed(() => {\n      return props.icon || TypeComponentsMap[props.type] || ''\n    })\n\n    const customStyle = computed<CSSProperties>(() => ({\n      top: `${props.offset}px`,\n      zIndex: props.zIndex,\n    }))\n\n    function startTimer() {\n      if (props.duration > 0) {\n        ;({ stop: stopTimer } = useTimeoutFn(() => {\n          if (visible.value) close()\n        }, props.duration))\n      }\n    }\n\n    function clearTimer() {\n      stopTimer?.()\n    }\n\n    function close() {\n      visible.value = false\n    }\n\n    function keydown({ code }: KeyboardEvent) {\n      if (code === EVENT_CODE.esc) {\n        // press esc to close the message\n        if (visible.value) {\n          close()\n        }\n      } else {\n        startTimer() // resume timer\n      }\n    }\n\n    onMounted(() => {\n      startTimer()\n      visible.value = true\n    })\n\n    watch(\n      () => props.repeatNum,\n      () => {\n        clearTimer()\n        startTimer()\n      }\n    )\n\n    useEventListener(document, 'keydown', keydown)\n\n    return {\n      typeClass,\n      iconComponent,\n      customStyle,\n      visible,\n      badgeType,\n\n      close,\n      clearTimer,\n      startTimer,\n    }\n  },\n})\n</script>\n"],"mappings":";;;;;;;AA6DA,IAAAA,MAAA,GAAeC,eAAA,CAAgB;EAC7BC,IAAA,EAAM;EAENC,UAAA,EAAY;IACVC,OAAA;IACAC,MAAA;IAAA,GACGC;EAAA;EAGLC,KAAA,EAAOC,YAAA;EACPC,KAAA,EAAOC,YAAA;EAEPC,MAAMJ,KAAA,EAAO;IACX,MAAMK,OAAA,GAAUC,GAAA,CAAI;IACpB,MAAMC,SAAA,GAAYD,GAAA,CAChBN,KAAA,CAAMQ,IAAA,GAAQR,KAAA,CAAMQ,IAAA,KAAS,UAAU,WAAWR,KAAA,CAAMQ,IAAA,GAAQ;IAElE,IAAIC,SAAA,GAAsC;IAE1C,MAAMC,SAAA,GAAYC,QAAA,CAAS,MAAM;MAC/B,MAAMH,IAAA,GAAOR,KAAA,CAAMQ,IAAA;MACnB,OAAOA,IAAA,IAAQI,iBAAA,CAAkBJ,IAAA,IAAQ,oBAAoBA,IAAA,KAAS;IAAA;IAGxE,MAAMK,aAAA,GAAgBF,QAAA,CAAS,MAAM;MACnC,OAAOX,KAAA,CAAMc,IAAA,IAAQF,iBAAA,CAAkBZ,KAAA,CAAMQ,IAAA,KAAS;IAAA;IAGxD,MAAMO,WAAA,GAAcJ,QAAA,CAAwB;MAC1CK,GAAA,EAAK,GAAGhB,KAAA,CAAMiB,MAAA;MACdC,MAAA,EAAQlB,KAAA,CAAMkB;IAAA;IAGhB,SAAAC,WAAA,EAAsB;MACpB,IAAInB,KAAA,CAAMoB,QAAA,GAAW,GAAG;QACtB;QAAE;UAAEC,IAAA,EAAMZ;QAAA,IAAca,YAAA,CAAa,MAAM;UACzC,IAAIjB,OAAA,CAAQkB,KAAA,EAAOC,KAAA;QAAA,GAClBxB,KAAA,CAAMoB,QAAA;MAAA;IAAA;IAIb,SAAAK,WAAA,EAAsB;MACpBhB,SAAA,oBAAAA,SAAA;IAAA;IAGF,SAAAe,MAAA,EAAiB;MACfnB,OAAA,CAAQkB,KAAA,GAAQ;IAAA;IAGlB,SAAAG,QAAiB;MAAEC;IAAA,GAAuB;MACxC,IAAIA,IAAA,KAASC,UAAA,CAAWC,GAAA,EAAK;QAE3B,IAAIxB,OAAA,CAAQkB,KAAA,EAAO;UACjBC,KAAA;QAAA;MAAA,OAEG;QACLL,UAAA;MAAA;IAAA;IAIJW,SAAA,CAAU,MAAM;MACdX,UAAA;MACAd,OAAA,CAAQkB,KAAA,GAAQ;IAAA;IAGlBQ,KAAA,CACE,MAAM/B,KAAA,CAAMgC,SAAA,EACZ,MAAM;MACJP,UAAA;MACAN,UAAA;IAAA;IAIJc,gBAAA,CAAiBC,QAAA,EAAU,WAAWR,OAAA;IAEtC,OAAO;MACLhB,SAAA;MACAG,aAAA;MACAE,WAAA;MACAV,OAAA;MACAE,SAAA;MAEAiB,KAAA;MACAC,UAAA;MACAN;IAAA;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}