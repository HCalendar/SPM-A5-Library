{"ast":null,"code":"import { ref, computed, watch } from 'vue';\nimport '../../../utils/util.mjs';\nimport '../../popper/index.mjs';\nimport PopupManager from '../../../utils/popup-manager.mjs';\nimport { isString } from '@vue/shared';\nimport usePopper from '../../popper/src/use-popper/index.mjs';\nconst SHOW_EVENT = \"show\";\nconst HIDE_EVENT = \"hide\";\nfunction usePopover(props, ctx) {\n  const zIndex = ref(PopupManager.nextZIndex());\n  const width = computed(() => {\n    if (isString(props.width)) {\n      return props.width;\n    }\n    return `${props.width}px`;\n  });\n  const popperStyle = computed(() => {\n    return {\n      width: width.value,\n      zIndex: zIndex.value\n    };\n  });\n  const popperProps = usePopper(props, ctx);\n  watch(popperProps.visibility, val => {\n    if (val) {\n      zIndex.value = PopupManager.nextZIndex();\n    }\n    ctx.emit(val ? SHOW_EVENT : HIDE_EVENT);\n  });\n  return {\n    ...popperProps,\n    popperStyle\n  };\n}\nexport { HIDE_EVENT, SHOW_EVENT, usePopover as default };","map":{"version":3,"names":["SHOW_EVENT","HIDE_EVENT","props","ctx","zIndex","ref","PopupManager","nextZIndex","width","computed","isString","popperStyle","value","popperProps","usePopper","watch","visibility","val","emit"],"sources":["../../../../../../packages/components/popover/src/usePopover.ts"],"sourcesContent":["import { computed, ref, watch } from 'vue'\nimport { isString } from '@element-plus/utils/util'\nimport { usePopper } from '@element-plus/components/popper'\nimport PopupManager from '@element-plus/utils/popup-manager'\n\nimport type { SetupContext } from 'vue'\nimport type { IPopperOptions, EmitType } from '@element-plus/components/popper'\nexport interface IUsePopover extends IPopperOptions {\n  width: number | string\n}\n\nexport const SHOW_EVENT = 'show'\nexport const HIDE_EVENT = 'hide'\n\nexport default function usePopover(\n  props: IUsePopover,\n  ctx: SetupContext<string[]>\n) {\n  const zIndex = ref(PopupManager.nextZIndex())\n  const width = computed(() => {\n    if (isString(props.width)) {\n      return props.width as string\n    }\n    return `${props.width}px`\n  })\n\n  const popperStyle = computed(() => {\n    return {\n      width: width.value,\n      zIndex: zIndex.value,\n    }\n  })\n\n  const popperProps = usePopper(props, ctx as SetupContext<EmitType[]>)\n\n  watch(popperProps.visibility, (val) => {\n    if (val) {\n      zIndex.value = PopupManager.nextZIndex()\n    }\n    ctx.emit(val ? SHOW_EVENT : HIDE_EVENT)\n  })\n\n  return {\n    ...popperProps,\n    popperStyle,\n  }\n}\n"],"mappings":";;;;;;MAWaA,UAAA,GAAa;MACbC,UAAA,GAAa;oBAGxBC,KAAA,EACAC,GAAA,EACA;EACA,MAAMC,MAAA,GAASC,GAAA,CAAIC,YAAA,CAAaC,UAAA;EAChC,MAAMC,KAAA,GAAQC,QAAA,CAAS,MAAM;IAC3B,IAAIC,QAAA,CAASR,KAAA,CAAMM,KAAA,GAAQ;MACzB,OAAON,KAAA,CAAMM,KAAA;IAAA;IAEf,OAAO,GAAGN,KAAA,CAAMM,KAAA;EAAA;EAGlB,MAAMG,WAAA,GAAcF,QAAA,CAAS,MAAM;IACjC,OAAO;MACLD,KAAA,EAAOA,KAAA,CAAMI,KAAA;MACbR,MAAA,EAAQA,MAAA,CAAOQ;IAAA;EAAA;EAInB,MAAMC,WAAA,GAAcC,SAAA,CAAUZ,KAAA,EAAOC,GAAA;EAErCY,KAAA,CAAMF,WAAA,CAAYG,UAAA,EAAaC,GAAA,IAAQ;IACrC,IAAIA,GAAA,EAAK;MACPb,MAAA,CAAOQ,KAAA,GAAQN,YAAA,CAAaC,UAAA;IAAA;IAE9BJ,GAAA,CAAIe,IAAA,CAAKD,GAAA,GAAMjB,UAAA,GAAaC,UAAA;EAAA;EAG9B,OAAO;IAAA,GACFY,WAAA;IACHF;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}