{"ast":null,"code":"import { openBlock, createElementBlock, normalizeClass, withModifiers, renderSlot } from 'vue';\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass({\n      \"el-upload-dragger\": true,\n      \"is-dragover\": _ctx.dragover\n    }),\n    onDrop: _cache[0] || (_cache[0] = withModifiers((...args) => _ctx.onDrop && _ctx.onDrop(...args), [\"prevent\"])),\n    onDragover: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.onDragover && _ctx.onDragover(...args), [\"prevent\"])),\n    onDragleave: _cache[2] || (_cache[2] = withModifiers($event => _ctx.dragover = false, [\"prevent\"]))\n  }, [renderSlot(_ctx.$slots, \"default\")], 34);\n}\nexport { render };","map":{"version":3,"names":["createElementBlock","class","normalizeClass","onDrop","_cache","withModifiers","args","_ctx","onDragover","onDragleave","$event","dragover","renderSlot","$slots"],"sources":["../../../../../../packages/components/upload/src/upload-dragger.vue?vue&type=template&id=4f8ef690&lang.js"],"sourcesContent":["<template>\n  <div\n    :class=\"{\n      'el-upload-dragger': true,\n      'is-dragover': dragover,\n    }\"\n    @drop.prevent=\"onDrop\"\n    @dragover.prevent=\"onDragover\"\n    @dragleave.prevent=\"dragover = false\"\n  >\n    <slot></slot>\n  </div>\n</template>\n<script lang=\"ts\">\nimport { defineComponent, ref, inject } from 'vue'\n\nimport type { ElUpload } from './upload.type'\n\nexport default defineComponent({\n  name: 'ElUploadDrag',\n  props: {\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  emits: ['file'],\n  setup(props, { emit }) {\n    const uploader = inject('uploader', {} as ElUpload)\n    const dragover = ref(false)\n\n    function onDrop(e: DragEvent) {\n      if (props.disabled || !uploader) return\n      const accept = uploader.props?.accept || uploader.accept\n      dragover.value = false\n      if (!accept) {\n        emit('file', e.dataTransfer.files)\n        return\n      }\n      emit(\n        'file',\n        Array.from(e.dataTransfer.files).filter((file) => {\n          const { type, name } = file\n          const extension =\n            name.indexOf('.') > -1 ? `.${name.split('.').pop()}` : ''\n          const baseType = type.replace(/\\/.*$/, '')\n          return accept\n            .split(',')\n            .map((type) => type.trim())\n            .filter((type) => type)\n            .some((acceptedType) => {\n              if (acceptedType.startsWith('.')) {\n                return extension === acceptedType\n              }\n              if (/\\/\\*$/.test(acceptedType)) {\n                return baseType === acceptedType.replace(/\\/\\*$/, '')\n              }\n              if (/^[^/]+\\/[^/]+$/.test(acceptedType)) {\n                return type === acceptedType\n              }\n              return false\n            })\n        })\n      )\n    }\n\n    function onDragover() {\n      if (!props.disabled) dragover.value = true\n    }\n\n    return {\n      dragover,\n      onDrop,\n      onDragover,\n    }\n  },\n})\n</script>\n"],"mappings":";;sBACEA,kBAAA;IACGC,KAAA,EAAAC,cAAA;;;;IAIAC,MAAA,EAAAC,MAAA,QAAAA,MAAA,MAAAC,aAAA,KAAAC,IAAA,KAAcC,IAAA,CAAAJ,MAAA,IAAAI,IAAA,CAAAJ,MAAA,IAAAG,IAAA;IACdE,UAAA,EAAAJ,MAAA,QAAAA,MAAA,MAAAC,aAAA,KAAAC,IAAA,KAAkBC,IAAA,CAAAC,UAAA,IAAAD,IAAA,CAAAC,UAAA,IAAAF,IAAA;IAClBG,WAAA,EAAAL,MAAA,QAAAA,MAAA,MAAAC,aAAA,CAAAK,MAAA,IAAmBH,IAAA,CAAAI,QAAA;MAEpBC,UAAA,CAAAL,IAAA,CAAAM,MAAA,a","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}