{"ast":null,"code":"import { resolveComponent, openBlock, createElementBlock, createElementVNode, renderSlot, toDisplayString, createVNode, withCtx, createTextVNode, createCommentVNode, createSlots, normalizeProps, guardReactiveProps, Fragment, renderList, createBlock } from 'vue';\nconst _hoisted_1 = {\n  class: \"el-calendar\"\n};\nconst _hoisted_2 = {\n  class: \"el-calendar__header\"\n};\nconst _hoisted_3 = {\n  class: \"el-calendar__title\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"el-calendar__button-group\"\n};\nconst _hoisted_5 = {\n  key: 0,\n  class: \"el-calendar__body\"\n};\nconst _hoisted_6 = {\n  key: 1,\n  class: \"el-calendar__body\"\n};\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_button = resolveComponent(\"el-button\");\n  const _component_el_button_group = resolveComponent(\"el-button-group\");\n  const _component_date_table = resolveComponent(\"date-table\");\n  return openBlock(), createElementBlock(\"div\", _hoisted_1, [createElementVNode(\"div\", _hoisted_2, [renderSlot(_ctx.$slots, \"header\", {\n    date: _ctx.i18nDate\n  }, () => [createElementVNode(\"div\", _hoisted_3, toDisplayString(_ctx.i18nDate), 1), _ctx.validatedRange.length === 0 ? (openBlock(), createElementBlock(\"div\", _hoisted_4, [createVNode(_component_el_button_group, null, {\n    default: withCtx(() => [createVNode(_component_el_button, {\n      size: \"mini\",\n      onClick: _cache[0] || (_cache[0] = $event => _ctx.selectDate(\"prev-month\"))\n    }, {\n      default: withCtx(() => [createTextVNode(toDisplayString(_ctx.t(\"el.datepicker.prevMonth\")), 1)]),\n      _: 1\n    }), createVNode(_component_el_button, {\n      size: \"mini\",\n      onClick: _cache[1] || (_cache[1] = $event => _ctx.selectDate(\"today\"))\n    }, {\n      default: withCtx(() => [createTextVNode(toDisplayString(_ctx.t(\"el.datepicker.today\")), 1)]),\n      _: 1\n    }), createVNode(_component_el_button, {\n      size: \"mini\",\n      onClick: _cache[2] || (_cache[2] = $event => _ctx.selectDate(\"next-month\"))\n    }, {\n      default: withCtx(() => [createTextVNode(toDisplayString(_ctx.t(\"el.datepicker.nextMonth\")), 1)]),\n      _: 1\n    })]),\n    _: 1\n  })])) : createCommentVNode(\"v-if\", true)])]), _ctx.validatedRange.length === 0 ? (openBlock(), createElementBlock(\"div\", _hoisted_5, [createVNode(_component_date_table, {\n    date: _ctx.date,\n    \"selected-day\": _ctx.realSelectedDay,\n    onPick: _ctx.pickDay\n  }, createSlots({\n    _: 2\n  }, [_ctx.$slots.dateCell ? {\n    name: \"dateCell\",\n    fn: withCtx(data => [renderSlot(_ctx.$slots, \"dateCell\", normalizeProps(guardReactiveProps(data)))])\n  } : void 0]), 1032, [\"date\", \"selected-day\", \"onPick\"])])) : (openBlock(), createElementBlock(\"div\", _hoisted_6, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.validatedRange, (range_, index) => {\n    return openBlock(), createBlock(_component_date_table, {\n      key: index,\n      date: range_[0],\n      \"selected-day\": _ctx.realSelectedDay,\n      range: range_,\n      \"hide-header\": index !== 0,\n      onPick: _ctx.pickDay\n    }, createSlots({\n      _: 2\n    }, [_ctx.$slots.dateCell ? {\n      name: \"dateCell\",\n      fn: withCtx(data => [renderSlot(_ctx.$slots, \"dateCell\", normalizeProps(guardReactiveProps(data)))])\n    } : void 0]), 1032, [\"date\", \"selected-day\", \"range\", \"hide-header\", \"onPick\"]);\n  }), 128))]))]);\n}\nexport { render };","map":{"version":3,"names":["class","createElementBlock","_hoisted_1","createElementVNode","_hoisted_2","renderSlot","_ctx","$slots","date","i18nDate","_hoisted_3","toDisplayString","validatedRange","length","openBlock","_hoisted_4","createVNode","_component_el_button_group","_component_el_button","size","onClick","_cache","$event","selectDate","t","_hoisted_5","_component_date_table","realSelectedDay","onPick","pickDay","dateCell","fn","withCtx","data","normalizeProps","guardReactiveProps","_hoisted_6","Fragment","renderList","range_","index","createBlock","key","range"],"sources":["../../../../../../packages/components/calendar/src/calendar.vue?vue&type=template&id=76705c76&lang.js"],"sourcesContent":["<template>\n  <div class=\"el-calendar\">\n    <div class=\"el-calendar__header\">\n      <slot name=\"header\" :date=\"i18nDate\">\n        <div class=\"el-calendar__title\">{{ i18nDate }}</div>\n        <div\n          v-if=\"validatedRange.length === 0\"\n          class=\"el-calendar__button-group\"\n        >\n          <el-button-group>\n            <el-button size=\"mini\" @click=\"selectDate('prev-month')\">\n              {{ t('el.datepicker.prevMonth') }}\n            </el-button>\n            <el-button size=\"mini\" @click=\"selectDate('today')\">\n              {{ t('el.datepicker.today') }}\n            </el-button>\n            <el-button size=\"mini\" @click=\"selectDate('next-month')\">\n              {{ t('el.datepicker.nextMonth') }}\n            </el-button>\n          </el-button-group>\n        </div>\n      </slot>\n    </div>\n    <div v-if=\"validatedRange.length === 0\" class=\"el-calendar__body\">\n      <date-table :date=\"date\" :selected-day=\"realSelectedDay\" @pick=\"pickDay\">\n        <template v-if=\"$slots.dateCell\" #dateCell=\"data\">\n          <slot name=\"dateCell\" v-bind=\"data\"></slot>\n        </template>\n      </date-table>\n    </div>\n    <div v-else class=\"el-calendar__body\">\n      <date-table\n        v-for=\"(range_, index) in validatedRange\"\n        :key=\"index\"\n        :date=\"range_[0]\"\n        :selected-day=\"realSelectedDay\"\n        :range=\"range_\"\n        :hide-header=\"index !== 0\"\n        @pick=\"pickDay\"\n      >\n        <template v-if=\"$slots.dateCell\" #dateCell=\"data\">\n          <slot name=\"dateCell\" v-bind=\"data\"></slot>\n        </template>\n      </date-table>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { ref, computed, defineComponent } from 'vue'\nimport dayjs from 'dayjs'\nimport { ElButton, ElButtonGroup } from '@element-plus/components/button'\nimport { useLocale } from '@element-plus/hooks'\nimport { debugWarn } from '@element-plus/utils/error'\nimport DateTable from './date-table.vue'\nimport { calendarProps, calendarEmits } from './calendar'\n\nimport type { ComputedRef } from 'vue'\nimport type { Dayjs } from 'dayjs'\n\ntype DateType =\n  | 'prev-month'\n  | 'next-month'\n  | 'prev-year'\n  | 'next-year'\n  | 'today'\n\nexport default defineComponent({\n  name: 'ElCalendar',\n\n  components: {\n    DateTable,\n    ElButton,\n    ElButtonGroup,\n  },\n\n  props: calendarProps,\n  emits: calendarEmits,\n\n  setup(props, { emit }) {\n    const { t, lang } = useLocale()\n    const selectedDay = ref<Dayjs>()\n    const now = dayjs().locale(lang.value)\n\n    const prevMonthDayjs = computed(() => {\n      return date.value.subtract(1, 'month')\n    })\n    const curMonthDatePrefix = computed(() => {\n      return dayjs(date.value).locale(lang.value).format('YYYY-MM')\n    })\n\n    const nextMonthDayjs = computed(() => {\n      return date.value.add(1, 'month')\n    })\n\n    const prevYearDayjs = computed(() => {\n      return date.value.subtract(1, 'year')\n    })\n\n    const nextYearDayjs = computed(() => {\n      return date.value.add(1, 'year')\n    })\n\n    const i18nDate = computed(() => {\n      const pickedMonth = `el.datepicker.month${date.value.format('M')}`\n      return `${date.value.year()} ${t('el.datepicker.year')} ${t(pickedMonth)}`\n    })\n\n    const realSelectedDay = computed<Dayjs | undefined>({\n      get() {\n        if (!props.modelValue) return selectedDay.value\n        return date.value\n      },\n      set(val) {\n        if (!val) return\n        selectedDay.value = val\n        const result = val.toDate()\n\n        emit('input', result)\n        emit('update:modelValue', result)\n      },\n    })\n\n    const date: ComputedRef<Dayjs> = computed(() => {\n      if (!props.modelValue) {\n        if (realSelectedDay.value) {\n          return realSelectedDay.value\n        } else if (validatedRange.value.length) {\n          return validatedRange.value[0][0]\n        }\n        return now\n      } else {\n        return dayjs(props.modelValue).locale(lang.value)\n      }\n    })\n\n    // https://github.com/element-plus/element-plus/issues/3155\n    // Calculate the validate date range according to the start and end dates\n    const calculateValidatedDateRange = (\n      startDayjs: Dayjs,\n      endDayjs: Dayjs\n    ): [Dayjs, Dayjs][] => {\n      const firstDay = startDayjs.startOf('week')\n      const lastDay = endDayjs.endOf('week')\n      const firstMonth = firstDay.get('month')\n      const lastMonth = lastDay.get('month')\n\n      // Current mouth\n      if (firstMonth === lastMonth) {\n        return [[firstDay, lastDay]]\n      }\n      // Two adjacent months\n      else if (firstMonth + 1 === lastMonth) {\n        const firstMonthLastDay = firstDay.endOf('month')\n        const lastMonthFirstDay = lastDay.startOf('month')\n\n        // Whether the last day of the first month and the first day of the last month is in the same week\n        const isSameWeek = firstMonthLastDay.isSame(lastMonthFirstDay, 'week')\n        const lastMonthStartDay = isSameWeek\n          ? lastMonthFirstDay.add(1, 'week')\n          : lastMonthFirstDay\n\n        return [\n          [firstDay, firstMonthLastDay],\n          [lastMonthStartDay.startOf('week'), lastDay],\n        ]\n      }\n      // Three consecutive months (compatible: 2021-01-30 to 2021-02-28)\n      else if (firstMonth + 2 === lastMonth) {\n        const firstMonthLastDay = firstDay.endOf('month')\n        const secondMonthFirstDay = firstDay.add(1, 'month').startOf('month')\n\n        // Whether the last day of the first month and the second month is in the same week\n        const secondMonthStartDay = firstMonthLastDay.isSame(\n          secondMonthFirstDay,\n          'week'\n        )\n          ? secondMonthFirstDay.add(1, 'week')\n          : secondMonthFirstDay\n\n        const secondMonthLastDay = secondMonthStartDay.endOf('month')\n        const lastMonthFirstDay = lastDay.startOf('month')\n\n        // Whether the last day of the second month and the last day of the last month is in the same week\n        const lastMonthStartDay = secondMonthLastDay.isSame(\n          lastMonthFirstDay,\n          'week'\n        )\n          ? lastMonthFirstDay.add(1, 'week')\n          : lastMonthFirstDay\n\n        return [\n          [firstDay, firstMonthLastDay],\n          [secondMonthStartDay.startOf('week'), secondMonthLastDay],\n          [lastMonthStartDay.startOf('week'), lastDay],\n        ]\n      }\n      // Other cases\n      else {\n        debugWarn(\n          'ElCalendar',\n          'start time and end time interval must not exceed two months'\n        )\n        return []\n      }\n    }\n\n    // if range is valid, we get a two-digit array\n    const validatedRange = computed(() => {\n      if (!props.range) return []\n      const rangeArrDayjs = props.range.map((_) => dayjs(_).locale(lang.value))\n      const [startDayjs, endDayjs] = rangeArrDayjs\n      if (startDayjs.isAfter(endDayjs)) {\n        debugWarn('ElCalendar', 'end time should be greater than start time')\n        return []\n      }\n      if (startDayjs.isSame(endDayjs, 'month')) {\n        // same month\n        return calculateValidatedDateRange(startDayjs, endDayjs)\n      } else {\n        // two months\n        if (startDayjs.add(1, 'month').month() !== endDayjs.month()) {\n          debugWarn(\n            'ElCalendar',\n            'start time and end time interval must not exceed two months'\n          )\n          return []\n        }\n        return calculateValidatedDateRange(startDayjs, endDayjs)\n      }\n    })\n\n    const pickDay = (day: Dayjs) => {\n      realSelectedDay.value = day\n    }\n\n    const selectDate = (type: DateType) => {\n      let day: Dayjs\n      if (type === 'prev-month') {\n        day = prevMonthDayjs.value\n      } else if (type === 'next-month') {\n        day = nextMonthDayjs.value\n      } else if (type === 'prev-year') {\n        day = prevYearDayjs.value\n      } else if (type === 'next-year') {\n        day = nextYearDayjs.value\n      } else {\n        day = now\n      }\n\n      if (day.isSame(date.value, 'day')) return\n      pickDay(day)\n    }\n\n    return {\n      selectedDay,\n      curMonthDatePrefix,\n      i18nDate,\n      realSelectedDay,\n      date,\n      validatedRange,\n      pickDay,\n      selectDate,\n      t,\n    }\n  },\n})\n</script>\n"],"mappings":";;EACOA,KAAA,EAAM;AAAA;;EACJA,KAAA,EAAM;AAAA;;EAEFA,KAAA,EAAM;AAAA;;;EAGTA,KAAA,EAAM;AAAA;;;EAgB4BA,KAAA,EAAM;AAAA;;;EAOlCA,KAAA,EAAM;AAAA;;;;;sBA7BpBC,kBAAA,QAAAC,UAAA,GACEC,kBAAA,QAAAC,UAAA,GACEC,UAAA,CAAAC,IAAA,CAAAC,MAAA;IAAqBC,IAAA,EAAMF,IAAA,CAAAG;EAAA,GAA3B,OACEN,kBAAA,QAAAO,UAAA,EAAAC,eAAA,CAAmCL,IAAA,CAAAG,QAAA,OAE3BH,IAAA,CAAAM,cAAA,CAAeC,MAAA,UAAAC,SAAA,IADvBb,kBAAA,QAAAc,UAAA,GAIEC,WAAA,CAAAC,0BAAA;qBACE,OAAAD,WAAA,CAAAE,oBAAA;MAAWC,IAAA,EAAK;MAAQC,OAAA,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAOhB,IAAA,CAAAiB,UAAA;;uBAC7B,O,gCAAGjB,IAAA,CAAAkB,CAAA,iC;;QAELR,WAAA,CAAAE,oBAAA;MAAWC,IAAA,EAAK;MAAQC,OAAA,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAOhB,IAAA,CAAAiB,UAAA;;uBAC7B,O,gCAAGjB,IAAA,CAAAkB,CAAA,6B;;QAELR,WAAA,CAAAE,oBAAA;MAAWC,IAAA,EAAK;MAAQC,OAAA,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAOhB,IAAA,CAAAiB,UAAA;;uBAC7B,O,gCAAGjB,IAAA,CAAAkB,CAAA,iC;;;;gDAMFlB,IAAA,CAAAM,cAAA,CAAeC,MAAA,UAAAC,SAAA,IAA1Bb,kBAAA,QAAAwB,UAAA,GACET,WAAA,CAAAU,qBAAA;IAAalB,IAAA,EAAMF,IAAA,CAAAE,IAAA;IAAO,gBAAcF,IAAA,CAAAqB,eAAA;IAAkBC,MAAA,EAAMtB,IAAA,CAAAuB;;;MAC9CvB,IAAA,CAAAC,MAAA,CAAOuB,QAAA;UAAW;IAAAC,EAAA,EAAAC,OAAA,CAAUC,IAAA,KAC1C5B,UAAA,CAAAC,IAAA,CAAAC,MAAA,cAAA2B,cAAA,CAAAC,kBAAA,CAA8BF,IAAA;EAAA,W,gEAIpChC,kBAAA,QAAAmC,UAAA,I,iBACEnC,kBAAA,CAAAoC,QAAA,QAAAC,UAAA,CAC4BhC,IAAA,CAAAM,cAAA,GAAlB2B,MAAA,EAAQC,KAAA;wBADlBC,WAAA,CAAAf,qBAAA;MAEGgB,GAAA,EAAKF,KAAA;MACLhC,IAAA,EAAM+B,MAAA;MACN,gBAAcjC,IAAA,CAAAqB,eAAA;MACdgB,KAAA,EAAOJ,MAAA;MACP,eAAaC,KAAA;MACbZ,MAAA,EAAMtB,IAAA,CAAAuB;;;QAESvB,IAAA,CAAAC,MAAA,CAAOuB,QAAA;YAAW;MAAAC,EAAA,EAAAC,OAAA,CAAUC,IAAA,KAC1C5B,UAAA,CAAAC,IAAA,CAAAC,MAAA,cAAA2B,cAAA,CAAAC,kBAAA,CAA8BF,IAAA;IAAA,W","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}