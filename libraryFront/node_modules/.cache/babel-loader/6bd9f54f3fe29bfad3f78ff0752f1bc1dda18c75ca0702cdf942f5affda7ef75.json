{"ast":null,"code":"import { watch, isRef } from 'vue';\nconst useRestoreActive = (toggle, initialFocus) => {\n  let previousActive;\n  watch(() => toggle.value, val => {\n    var _a, _b;\n    if (val) {\n      previousActive = document.activeElement;\n      if (isRef(initialFocus)) {\n        (_b = (_a = initialFocus.value).focus) == null ? void 0 : _b.call(_a);\n      }\n    } else {\n      if (process.env.NODE_ENV === \"testing\") {\n        previousActive.focus.call(previousActive);\n      } else {\n        previousActive.focus();\n      }\n    }\n  });\n};\nexport { useRestoreActive };","map":{"version":3,"names":["useRestoreActive","toggle","initialFocus","previousActive","watch","value","val","_a","_b","document","activeElement","isRef","focus","call","process","env","NODE_ENV"],"sources":["../../../../../packages/hooks/use-restore-active/index.ts"],"sourcesContent":["import { isRef, watch } from 'vue'\nimport type { Ref } from 'vue'\n\n/**\n * This method provides dialogable components the ability to restore previously activated element before\n * the dialog gets opened\n */\nexport const useRestoreActive = (\n  toggle: Ref<boolean>,\n  initialFocus?: Ref<HTMLElement>\n) => {\n  let previousActive: HTMLElement\n  watch(\n    () => toggle.value,\n    (val) => {\n      if (val) {\n        previousActive = document.activeElement as HTMLElement\n        if (isRef(initialFocus)) {\n          initialFocus.value.focus?.()\n        }\n      } else {\n        if (process.env.NODE_ENV === 'testing') {\n          previousActive.focus.call(previousActive)\n        } else {\n          previousActive.focus()\n        }\n      }\n    }\n  )\n}\n"],"mappings":";MAOaA,gBAAA,GAAmBA,CAC9BC,MAAA,EACAC,YAAA,KACG;EACH,IAAIC,cAAA;EACJC,KAAA,CACE,MAAMH,MAAA,CAAOI,KAAA,EACZC,GAAA,IAAQ;IAdb,IAAAC,EAAA,EAAAC,EAAA;IAeM,IAAIF,GAAA,EAAK;MACPH,cAAA,GAAiBM,QAAA,CAASC,aAAA;MAC1B,IAAIC,KAAA,CAAMT,YAAA,GAAe;QACvB,CAAAM,EAAA,IAAAD,EAAA,GAAAL,YAAA,CAAaG,KAAA,EAAMO,KAAA,KAAnB,gBAAAJ,EAAA,CAAAK,IAAA,CAAAN,EAAA;MAAA;IAAA,OAEG;MACL,IAAIO,OAAA,CAAQC,GAAA,CAAIC,QAAA,KAAa,WAAW;QACtCb,cAAA,CAAeS,KAAA,CAAMC,IAAA,CAAKV,cAAA;MAAA,OACrB;QACLA,cAAA,CAAeS,KAAA;MAAA;IAAA;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}