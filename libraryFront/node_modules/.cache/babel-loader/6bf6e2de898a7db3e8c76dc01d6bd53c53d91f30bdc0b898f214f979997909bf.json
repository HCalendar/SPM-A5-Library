{"ast":null,"code":"import { isRef, watch, onScopeDispose } from 'vue';\nimport scrollbarWidth from '../../utils/scrollbar-width.mjs';\nimport { throwError } from '../../utils/error.mjs';\nimport { hasClass, removeClass, getStyle, addClass } from '../../utils/dom.mjs';\nimport isServer from '../../utils/isServer.mjs';\nconst useLockscreen = trigger => {\n  if (!isRef(trigger)) {\n    throwError(\"[useLockscreen]\", \"You need to pass a ref param to this function\");\n  }\n  if (isServer || hasClass(document.body, \"el-popup-parent--hidden\")) {\n    return;\n  }\n  let scrollBarWidth = 0;\n  let withoutHiddenClass = false;\n  let bodyPaddingRight = \"0\";\n  let computedBodyPaddingRight = 0;\n  const cleanup = () => {\n    removeClass(document.body, \"el-popup-parent--hidden\");\n    if (withoutHiddenClass) {\n      document.body.style.paddingRight = bodyPaddingRight;\n    }\n  };\n  watch(trigger, val => {\n    if (!val) {\n      cleanup();\n      return;\n    }\n    withoutHiddenClass = !hasClass(document.body, \"el-popup-parent--hidden\");\n    if (withoutHiddenClass) {\n      bodyPaddingRight = document.body.style.paddingRight;\n      computedBodyPaddingRight = parseInt(getStyle(document.body, \"paddingRight\"), 10);\n    }\n    scrollBarWidth = scrollbarWidth();\n    const bodyHasOverflow = document.documentElement.clientHeight < document.body.scrollHeight;\n    const bodyOverflowY = getStyle(document.body, \"overflowY\");\n    if (scrollBarWidth > 0 && (bodyHasOverflow || bodyOverflowY === \"scroll\") && withoutHiddenClass) {\n      document.body.style.paddingRight = `${computedBodyPaddingRight + scrollBarWidth}px`;\n    }\n    addClass(document.body, \"el-popup-parent--hidden\");\n  });\n  onScopeDispose(() => cleanup());\n};\nexport { useLockscreen };","map":{"version":3,"names":["useLockscreen","trigger","isRef","throwError","isServer","hasClass","document","body","scrollBarWidth","withoutHiddenClass","bodyPaddingRight","computedBodyPaddingRight","cleanup","removeClass","style","paddingRight","watch","val","parseInt","getStyle","scrollbarWidth","bodyHasOverflow","documentElement","clientHeight","scrollHeight","bodyOverflowY","addClass","onScopeDispose"],"sources":["../../../../../packages/hooks/use-lockscreen/index.ts"],"sourcesContent":["import { watch, isRef, onScopeDispose } from 'vue'\n\nimport getScrollBarWidth from '@element-plus/utils/scrollbar-width'\nimport { throwError } from '@element-plus/utils/error'\nimport {\n  addClass,\n  removeClass,\n  hasClass,\n  getStyle,\n} from '@element-plus/utils/dom'\nimport isServer from '@element-plus/utils/isServer'\n\nimport type { Ref } from 'vue'\n\n/**\n * Hook that monitoring the ref value to lock or unlock the screen.\n * When the trigger became true, it assumes modal is now opened and vice versa.\n * @param trigger {Ref<boolean>}\n */\nexport const useLockscreen = (trigger: Ref<boolean>) => {\n  if (!isRef(trigger)) {\n    throwError(\n      '[useLockscreen]',\n      'You need to pass a ref param to this function'\n    )\n  }\n  if (isServer || hasClass(document.body, 'el-popup-parent--hidden')) {\n    return\n  }\n\n  let scrollBarWidth = 0\n  let withoutHiddenClass = false\n  let bodyPaddingRight = '0'\n  let computedBodyPaddingRight = 0\n\n  const cleanup = () => {\n    removeClass(document.body, 'el-popup-parent--hidden')\n    if (withoutHiddenClass) {\n      document.body.style.paddingRight = bodyPaddingRight\n    }\n  }\n  watch(trigger, (val) => {\n    if (!val) {\n      cleanup()\n      return\n    }\n\n    withoutHiddenClass = !hasClass(document.body, 'el-popup-parent--hidden')\n    if (withoutHiddenClass) {\n      bodyPaddingRight = document.body.style.paddingRight\n      computedBodyPaddingRight = parseInt(\n        getStyle(document.body, 'paddingRight'),\n        10\n      )\n    }\n    scrollBarWidth = getScrollBarWidth()\n    const bodyHasOverflow =\n      document.documentElement.clientHeight < document.body.scrollHeight\n    const bodyOverflowY = getStyle(document.body, 'overflowY')\n    if (\n      scrollBarWidth > 0 &&\n      (bodyHasOverflow || bodyOverflowY === 'scroll') &&\n      withoutHiddenClass\n    ) {\n      document.body.style.paddingRight = `${\n        computedBodyPaddingRight + scrollBarWidth\n      }px`\n    }\n    addClass(document.body, 'el-popup-parent--hidden')\n  })\n  onScopeDispose(() => cleanup())\n}\n"],"mappings":";;;;;MAmBaA,aAAA,GAAiBC,OAAA,IAA0B;EACtD,IAAI,CAACC,KAAA,CAAMD,OAAA,GAAU;IACnBE,UAAA,CACE,mBACA;EAAA;EAGJ,IAAIC,QAAA,IAAYC,QAAA,CAASC,QAAA,CAASC,IAAA,EAAM,4BAA4B;IAClE;EAAA;EAGF,IAAIC,cAAA,GAAiB;EACrB,IAAIC,kBAAA,GAAqB;EACzB,IAAIC,gBAAA,GAAmB;EACvB,IAAIC,wBAAA,GAA2B;EAE/B,MAAMC,OAAA,GAAUA,CAAA,KAAM;IACpBC,WAAA,CAAYP,QAAA,CAASC,IAAA,EAAM;IAC3B,IAAIE,kBAAA,EAAoB;MACtBH,QAAA,CAASC,IAAA,CAAKO,KAAA,CAAMC,YAAA,GAAeL,gBAAA;IAAA;EAAA;EAGvCM,KAAA,CAAMf,OAAA,EAAUgB,GAAA,IAAQ;IACtB,IAAI,CAACA,GAAA,EAAK;MACRL,OAAA;MACA;IAAA;IAGFH,kBAAA,GAAqB,CAACJ,QAAA,CAASC,QAAA,CAASC,IAAA,EAAM;IAC9C,IAAIE,kBAAA,EAAoB;MACtBC,gBAAA,GAAmBJ,QAAA,CAASC,IAAA,CAAKO,KAAA,CAAMC,YAAA;MACvCJ,wBAAA,GAA2BO,QAAA,CACzBC,QAAA,CAASb,QAAA,CAASC,IAAA,EAAM,iBACxB;IAAA;IAGJC,cAAA,GAAiBY,cAAA;IACjB,MAAMC,eAAA,GACJf,QAAA,CAASgB,eAAA,CAAgBC,YAAA,GAAejB,QAAA,CAASC,IAAA,CAAKiB,YAAA;IACxD,MAAMC,aAAA,GAAgBN,QAAA,CAASb,QAAA,CAASC,IAAA,EAAM;IAC9C,IACEC,cAAA,GAAiB,MAAAa,eAAA,IACGI,aAAA,KAAkB,aACtChB,kBAAA,EACA;MACAH,QAAA,CAASC,IAAA,CAAKO,KAAA,CAAMC,YAAA,GAAe,GACjCJ,wBAAA,GAA2BH,cAAA;IAAA;IAG/BkB,QAAA,CAASpB,QAAA,CAASC,IAAA,EAAM;EAAA;EAE1BoB,cAAA,CAAe,MAAMf,OAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}