{"ast":null,"code":"import { watch } from 'vue';\nimport debounce from 'lodash/debounce';\nimport useStore from './index.mjs';\nconst InitialStateMap = {\n  rowKey: \"rowKey\",\n  defaultExpandAll: \"defaultExpandAll\",\n  selectOnIndeterminate: \"selectOnIndeterminate\",\n  indent: \"indent\",\n  lazy: \"lazy\",\n  data: \"data\",\n  [\"treeProps.hasChildren\"]: {\n    key: \"lazyColumnIdentifier\",\n    default: \"hasChildren\"\n  },\n  [\"treeProps.children\"]: {\n    key: \"childrenColumnName\",\n    default: \"children\"\n  }\n};\nfunction createStore(table, props) {\n  if (!table) {\n    throw new Error(\"Table is required.\");\n  }\n  const store = useStore();\n  store.toggleAllSelection = debounce(store._toggleAllSelection, 10);\n  Object.keys(InitialStateMap).forEach(key => {\n    handleValue(getArrKeysValue(props, key), key, store);\n  });\n  proxyTableProps(store, props);\n  return store;\n}\nfunction proxyTableProps(store, props) {\n  Object.keys(InitialStateMap).forEach(key => {\n    watch(() => getArrKeysValue(props, key), value => {\n      handleValue(value, key, store);\n    });\n  });\n}\nfunction handleValue(value, propsKey, store) {\n  let newVal = value;\n  let storeKey = InitialStateMap[propsKey];\n  if (typeof InitialStateMap[propsKey] === \"object\") {\n    storeKey = storeKey.key;\n    newVal = newVal || InitialStateMap[propsKey].default;\n  }\n  store.states[storeKey].value = newVal;\n}\nfunction getArrKeysValue(props, keys) {\n  if (keys.includes(\".\")) {\n    const keyList = keys.split(\".\");\n    let value = props;\n    keyList.forEach(key => {\n      value = value[key];\n    });\n    return value;\n  } else {\n    return props[keys];\n  }\n}\nexport { createStore };","map":{"version":3,"names":["InitialStateMap","rowKey","defaultExpandAll","selectOnIndeterminate","indent","lazy","data","key","default","table","props","Error","store","useStore","toggleAllSelection","debounce","_toggleAllSelection","Object","keys","forEach","handleValue","getArrKeysValue","proxyTableProps","watch","value","propsKey","newVal","storeKey","states","includes","keyList","split"],"sources":["../../../../../../../packages/components/table/src/store/helper.ts"],"sourcesContent":["import { watch } from 'vue'\nimport debounce from 'lodash/debounce'\nimport useStore from '.'\n\nimport type { Store } from '.'\nimport type { Table, TableProps } from '../table/defaults'\n\nconst InitialStateMap = {\n  rowKey: 'rowKey',\n  defaultExpandAll: 'defaultExpandAll',\n  selectOnIndeterminate: 'selectOnIndeterminate',\n  indent: 'indent',\n  lazy: 'lazy',\n  data: 'data',\n  ['treeProps.hasChildren']: {\n    key: 'lazyColumnIdentifier',\n    default: 'hasChildren',\n  },\n  ['treeProps.children']: {\n    key: 'childrenColumnName',\n    default: 'children',\n  },\n}\n\nexport function createStore<T>(table: Table<T>, props: TableProps<T>) {\n  if (!table) {\n    throw new Error('Table is required.')\n  }\n\n  const store = useStore<T>()\n  // fix https://github.com/ElemeFE/element/issues/14075\n  // related pr https://github.com/ElemeFE/element/pull/14146\n  store.toggleAllSelection = debounce(store._toggleAllSelection, 10)\n  Object.keys(InitialStateMap).forEach((key) => {\n    handleValue(getArrKeysValue(props, key), key, store)\n  })\n  proxyTableProps(store, props)\n  return store\n}\n\nfunction proxyTableProps<T>(store: Store<T>, props: TableProps<T>) {\n  Object.keys(InitialStateMap).forEach((key) => {\n    watch(\n      () => getArrKeysValue(props, key),\n      (value) => {\n        handleValue(value, key, store)\n      }\n    )\n  })\n}\n\nfunction handleValue<T>(value, propsKey: string, store: Store<T>) {\n  let newVal = value\n  let storeKey = InitialStateMap[propsKey]\n  if (typeof InitialStateMap[propsKey] === 'object') {\n    storeKey = storeKey.key\n    newVal = newVal || InitialStateMap[propsKey].default\n  }\n  store.states[storeKey].value = newVal\n}\n\nfunction getArrKeysValue<T>(props: TableProps<T>, keys: string) {\n  if (keys.includes('.')) {\n    const keyList = keys.split('.')\n    let value = props\n    keyList.forEach((key) => {\n      value = value[key]\n    })\n    return value\n  } else {\n    return props[keys]\n  }\n}\n"],"mappings":";;;AAOA,MAAMA,eAAA,GAAkB;EACtBC,MAAA,EAAQ;EACRC,gBAAA,EAAkB;EAClBC,qBAAA,EAAuB;EACvBC,MAAA,EAAQ;EACRC,IAAA,EAAM;EACNC,IAAA,EAAM;EAAA,CACL,0BAA0B;IACzBC,GAAA,EAAK;IACLC,OAAA,EAAS;EAAA;EAAA,CAEV,uBAAuB;IACtBD,GAAA,EAAK;IACLC,OAAA,EAAS;EAAA;AAAA;qBAIkBC,KAAA,EAAiBC,KAAA,EAAsB;EACpE,IAAI,CAACD,KAAA,EAAO;IACV,MAAM,IAAIE,KAAA,CAAM;EAAA;EAGlB,MAAMC,KAAA,GAAQC,QAAA;EAGdD,KAAA,CAAME,kBAAA,GAAqBC,QAAA,CAASH,KAAA,CAAMI,mBAAA,EAAqB;EAC/DC,MAAA,CAAOC,IAAA,CAAKlB,eAAA,EAAiBmB,OAAA,CAASZ,GAAA,IAAQ;IAC5Ca,WAAA,CAAYC,eAAA,CAAgBX,KAAA,EAAOH,GAAA,GAAMA,GAAA,EAAKK,KAAA;EAAA;EAEhDU,eAAA,CAAgBV,KAAA,EAAOF,KAAA;EACvB,OAAOE,KAAA;AAAA;AAGT,SAAAU,gBAA4BV,KAAA,EAAiBF,KAAA,EAAsB;EACjEO,MAAA,CAAOC,IAAA,CAAKlB,eAAA,EAAiBmB,OAAA,CAASZ,GAAA,IAAQ;IAC5CgB,KAAA,CACE,MAAMF,eAAA,CAAgBX,KAAA,EAAOH,GAAA,GAC5BiB,KAAA,IAAU;MACTJ,WAAA,CAAYI,KAAA,EAAOjB,GAAA,EAAKK,KAAA;IAAA;EAAA;AAAA;AAMhC,SAAAQ,YAAwBI,KAAA,EAAOC,QAAA,EAAkBb,KAAA,EAAiB;EAChE,IAAIc,MAAA,GAASF,KAAA;EACb,IAAIG,QAAA,GAAW3B,eAAA,CAAgByB,QAAA;EAC/B,IAAI,OAAOzB,eAAA,CAAgByB,QAAA,MAAc,UAAU;IACjDE,QAAA,GAAWA,QAAA,CAASpB,GAAA;IACpBmB,MAAA,GAASA,MAAA,IAAU1B,eAAA,CAAgByB,QAAA,EAAUjB,OAAA;EAAA;EAE/CI,KAAA,CAAMgB,MAAA,CAAOD,QAAA,EAAUH,KAAA,GAAQE,MAAA;AAAA;AAGjC,SAAAL,gBAA4BX,KAAA,EAAsBQ,IAAA,EAAc;EAC9D,IAAIA,IAAA,CAAKW,QAAA,CAAS,MAAM;IACtB,MAAMC,OAAA,GAAUZ,IAAA,CAAKa,KAAA,CAAM;IAC3B,IAAIP,KAAA,GAAQd,KAAA;IACZoB,OAAA,CAAQX,OAAA,CAASZ,GAAA,IAAQ;MACvBiB,KAAA,GAAQA,KAAA,CAAMjB,GAAA;IAAA;IAEhB,OAAOiB,KAAA;EAAA,OACF;IACL,OAAOd,KAAA,CAAMQ,IAAA;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}