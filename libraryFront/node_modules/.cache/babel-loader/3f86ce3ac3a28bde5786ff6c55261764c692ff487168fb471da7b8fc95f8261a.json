{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { h } from 'vue';\nimport { ElCheckbox } from '../../checkbox/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { ArrowRight, Loading } from '@element-plus/icons-vue';\nimport { getPropByPath } from '../../../utils/util.mjs';\nconst cellStarts = {\n  default: {\n    order: \"\"\n  },\n  selection: {\n    width: 48,\n    minWidth: 48,\n    realWidth: 48,\n    order: \"\",\n    className: \"el-table-column--selection\"\n  },\n  expand: {\n    width: 48,\n    minWidth: 48,\n    realWidth: 48,\n    order: \"\"\n  },\n  index: {\n    width: 48,\n    minWidth: 48,\n    realWidth: 48,\n    order: \"\"\n  }\n};\nconst cellForced = {\n  selection: {\n    renderHeader({\n      store\n    }) {\n      function isDisabled() {\n        return store.states.data.value && store.states.data.value.length === 0;\n      }\n      return h(ElCheckbox, {\n        disabled: isDisabled(),\n        size: store.states.tableSize.value,\n        indeterminate: store.states.selection.value.length > 0 && !store.states.isAllSelected.value,\n        \"onUpdate:modelValue\": store.toggleAllSelection,\n        modelValue: store.states.isAllSelected.value\n      });\n    },\n    renderCell({\n      row,\n      column,\n      store,\n      $index\n    }) {\n      return h(ElCheckbox, {\n        disabled: column.selectable ? !column.selectable.call(null, row, $index) : false,\n        size: store.states.tableSize.value,\n        onChange: () => {\n          store.commit(\"rowSelectedChanged\", row);\n        },\n        onClick: event => event.stopPropagation(),\n        modelValue: store.isSelected(row)\n      });\n    },\n    sortable: false,\n    resizable: false\n  },\n  index: {\n    renderHeader({\n      column\n    }) {\n      return column.label || \"#\";\n    },\n    renderCell({\n      column,\n      $index\n    }) {\n      let i = $index + 1;\n      const index = column.index;\n      if (typeof index === \"number\") {\n        i = $index + index;\n      } else if (typeof index === \"function\") {\n        i = index($index);\n      }\n      return h(\"div\", {}, [i]);\n    },\n    sortable: false\n  },\n  expand: {\n    renderHeader({\n      column\n    }) {\n      return column.label || \"\";\n    },\n    renderCell({\n      row,\n      store\n    }) {\n      const classes = [\"el-table__expand-icon\"];\n      if (store.states.expandRows.value.indexOf(row) > -1) {\n        classes.push(\"el-table__expand-icon--expanded\");\n      }\n      const callback = function (e) {\n        e.stopPropagation();\n        store.toggleRowExpansion(row);\n      };\n      return h(\"div\", {\n        class: classes,\n        onClick: callback\n      }, {\n        default: () => {\n          return [h(ElIcon, null, {\n            default: () => {\n              return [h(ArrowRight)];\n            }\n          })];\n        }\n      });\n    },\n    sortable: false,\n    resizable: false,\n    className: \"el-table__expand-column\"\n  }\n};\nfunction defaultRenderCell({\n  row,\n  column,\n  $index\n}) {\n  var _a;\n  const property = column.property;\n  const value = property && getPropByPath(row, property, false).v;\n  if (column && column.formatter) {\n    return column.formatter(row, column, value, $index);\n  }\n  return ((_a = value == null ? void 0 : value.toString) == null ? void 0 : _a.call(value)) || \"\";\n}\nfunction treeCellPrefix({\n  row,\n  treeNode,\n  store\n}) {\n  if (!treeNode) return null;\n  const ele = [];\n  const callback = function (e) {\n    e.stopPropagation();\n    store.loadOrToggle(row);\n  };\n  if (treeNode.indent) {\n    ele.push(h(\"span\", {\n      class: \"el-table__indent\",\n      style: {\n        \"padding-left\": `${treeNode.indent}px`\n      }\n    }));\n  }\n  if (typeof treeNode.expanded === \"boolean\" && !treeNode.noLazyChildren) {\n    const expandClasses = [\"el-table__expand-icon\", treeNode.expanded ? \"el-table__expand-icon--expanded\" : \"\"];\n    let icon = ArrowRight;\n    if (treeNode.loading) {\n      icon = Loading;\n    }\n    ele.push(h(\"div\", {\n      class: expandClasses,\n      onClick: callback\n    }, {\n      default: () => {\n        return [h(ElIcon, {\n          class: {\n            \"is-loading\": treeNode.loading\n          }\n        }, {\n          default: () => [h(icon)]\n        })];\n      }\n    }));\n  } else {\n    ele.push(h(\"span\", {\n      class: \"el-table__placeholder\"\n    }));\n  }\n  return ele;\n}\nexport { cellForced, cellStarts, defaultRenderCell, treeCellPrefix };","map":{"version":3,"names":["cellStarts","default","order","selection","width","minWidth","realWidth","className","expand","index","cellForced","renderHeader","store","isDisabled","states","data","value","length","h","ElCheckbox","disabled","size","tableSize","indeterminate","isAllSelected","toggleAllSelection","modelValue","renderCell","row","column","$index","selectable","call","onChange","commit","onClick","event","stopPropagation","isSelected","sortable","resizable","label","i","classes","expandRows","indexOf","push","callback","e","toggleRowExpansion","class","ElIcon","ArrowRight","_a","property","getPropByPath","v","formatter","toString","treeNode","ele","loadOrToggle","indent","style","expanded","noLazyChildren","expandClasses","icon","loading","Loading"],"sources":["../../../../../../packages/components/table/src/config.ts"],"sourcesContent":["import { h } from 'vue'\nimport ElCheckbox from '@element-plus/components/checkbox'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { ArrowRight, Loading } from '@element-plus/icons-vue'\nimport { getPropByPath } from '@element-plus/utils/util'\n\nimport type { VNode } from 'vue'\nimport type { TableColumnCtx } from './table-column/defaults'\nimport type { Store } from './store'\nimport type { TreeNode } from './table/defaults'\n\nexport const cellStarts = {\n  default: {\n    order: '',\n  },\n  selection: {\n    width: 48,\n    minWidth: 48,\n    realWidth: 48,\n    order: '',\n    className: 'el-table-column--selection',\n  },\n  expand: {\n    width: 48,\n    minWidth: 48,\n    realWidth: 48,\n    order: '',\n  },\n  index: {\n    width: 48,\n    minWidth: 48,\n    realWidth: 48,\n    order: '',\n  },\n}\n\n// 这些选项不应该被覆盖\nexport const cellForced = {\n  selection: {\n    renderHeader<T>({ store }: { store: Store<T> }) {\n      function isDisabled() {\n        return store.states.data.value && store.states.data.value.length === 0\n      }\n      return h(ElCheckbox, {\n        disabled: isDisabled(),\n        size: store.states.tableSize.value,\n        indeterminate:\n          store.states.selection.value.length > 0 &&\n          !store.states.isAllSelected.value,\n        'onUpdate:modelValue': store.toggleAllSelection,\n        modelValue: store.states.isAllSelected.value,\n      })\n    },\n    renderCell<T>({\n      row,\n      column,\n      store,\n      $index,\n    }: {\n      row: T\n      column: TableColumnCtx<T>\n      store: Store<T>\n      $index: string\n    }) {\n      return h(ElCheckbox, {\n        disabled: column.selectable\n          ? !column.selectable.call(null, row, $index)\n          : false,\n        size: store.states.tableSize.value,\n        onChange: () => {\n          store.commit('rowSelectedChanged', row)\n        },\n        onClick: (event: Event) => event.stopPropagation(),\n        modelValue: store.isSelected(row),\n      })\n    },\n    sortable: false,\n    resizable: false,\n  },\n  index: {\n    renderHeader<T>({ column }: { column: TableColumnCtx<T> }) {\n      return column.label || '#'\n    },\n    renderCell<T>({\n      column,\n      $index,\n    }: {\n      column: TableColumnCtx<T>\n      $index: number\n    }) {\n      let i = $index + 1\n      const index = column.index\n\n      if (typeof index === 'number') {\n        i = $index + index\n      } else if (typeof index === 'function') {\n        i = index($index)\n      }\n      return h('div', {}, [i])\n    },\n    sortable: false,\n  },\n  expand: {\n    renderHeader<T>({ column }: { column: TableColumnCtx<T> }) {\n      return column.label || ''\n    },\n    renderCell<T>({ row, store }: { row: T; store: Store<T> }) {\n      const classes = ['el-table__expand-icon']\n      if (store.states.expandRows.value.indexOf(row) > -1) {\n        classes.push('el-table__expand-icon--expanded')\n      }\n      const callback = function (e: Event) {\n        e.stopPropagation()\n        store.toggleRowExpansion(row)\n      }\n      return h(\n        'div',\n        {\n          class: classes,\n          onClick: callback,\n        },\n        {\n          default: () => {\n            return [\n              h(ElIcon, null, {\n                default: () => {\n                  return [h(ArrowRight)]\n                },\n              }),\n            ]\n          },\n        }\n      )\n    },\n    sortable: false,\n    resizable: false,\n    className: 'el-table__expand-column',\n  },\n}\n\nexport function defaultRenderCell<T>({\n  row,\n  column,\n  $index,\n}: {\n  row: T\n  column: TableColumnCtx<T>\n  $index: number\n}) {\n  const property = column.property\n  const value = property && getPropByPath(row, property, false).v\n  if (column && column.formatter) {\n    return column.formatter(row, column, value, $index)\n  }\n  return value?.toString?.() || ''\n}\n\nexport function treeCellPrefix<T>({\n  row,\n  treeNode,\n  store,\n}: {\n  row: T\n  treeNode: TreeNode\n  store: Store<T>\n}) {\n  if (!treeNode) return null\n  const ele: VNode[] = []\n  const callback = function (e) {\n    e.stopPropagation()\n    store.loadOrToggle(row)\n  }\n  if (treeNode.indent) {\n    ele.push(\n      h('span', {\n        class: 'el-table__indent',\n        style: { 'padding-left': `${treeNode.indent}px` },\n      })\n    )\n  }\n  if (typeof treeNode.expanded === 'boolean' && !treeNode.noLazyChildren) {\n    const expandClasses = [\n      'el-table__expand-icon',\n      treeNode.expanded ? 'el-table__expand-icon--expanded' : '',\n    ]\n    let icon = ArrowRight\n    if (treeNode.loading) {\n      icon = Loading\n    }\n\n    ele.push(\n      h(\n        'div',\n        {\n          class: expandClasses,\n          onClick: callback,\n        },\n        {\n          default: () => {\n            return [\n              h(\n                ElIcon,\n                { class: { 'is-loading': treeNode.loading } },\n                {\n                  default: () => [h(icon)],\n                }\n              ),\n            ]\n          },\n        }\n      )\n    )\n  } else {\n    ele.push(\n      h('span', {\n        class: 'el-table__placeholder',\n      })\n    )\n  }\n  return ele\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}