{"ast":null,"code":"import { resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle, renderSlot, normalizeProps, guardReactiveProps, toDisplayString, createCommentVNode, createBlock, withCtx, resolveDynamicComponent } from 'vue';\nconst _hoisted_1 = [\"aria-valuenow\"];\nconst _hoisted_2 = {\n  key: 0,\n  class: \"el-progress-bar\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"el-progress-bar__innerText\"\n};\nconst _hoisted_4 = {\n  viewBox: \"0 0 100 100\"\n};\nconst _hoisted_5 = [\"d\", \"stroke-width\"];\nconst _hoisted_6 = [\"d\", \"stroke\", \"stroke-linecap\", \"stroke-width\"];\nconst _hoisted_7 = {\n  key: 0\n};\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([\"el-progress\", [`el-progress--${_ctx.type}`, _ctx.status ? `is-${_ctx.status}` : \"\", {\n      \"el-progress--without-text\": !_ctx.showText,\n      \"el-progress--text-inside\": _ctx.textInside\n    }]]),\n    role: \"progressbar\",\n    \"aria-valuenow\": _ctx.percentage,\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\"\n  }, [_ctx.type === \"line\" ? (openBlock(), createElementBlock(\"div\", _hoisted_2, [createElementVNode(\"div\", {\n    class: \"el-progress-bar__outer\",\n    style: normalizeStyle({\n      height: `${_ctx.strokeWidth}px`\n    })\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass([\"el-progress-bar__inner\", {\n      \"el-progress-bar__inner--indeterminate\": _ctx.indeterminate\n    }]),\n    style: normalizeStyle(_ctx.barStyle)\n  }, [(_ctx.showText || _ctx.$slots.default) && _ctx.textInside ? (openBlock(), createElementBlock(\"div\", _hoisted_3, [renderSlot(_ctx.$slots, \"default\", normalizeProps(guardReactiveProps(_ctx.slotData)), () => [createElementVNode(\"span\", null, toDisplayString(_ctx.content), 1)])])) : createCommentVNode(\"v-if\", true)], 6)], 4)])) : (openBlock(), createElementBlock(\"div\", {\n    key: 1,\n    class: \"el-progress-circle\",\n    style: normalizeStyle({\n      height: `${_ctx.width}px`,\n      width: `${_ctx.width}px`\n    })\n  }, [(openBlock(), createElementBlock(\"svg\", _hoisted_4, [createElementVNode(\"path\", {\n    class: \"el-progress-circle__track\",\n    d: _ctx.trackPath,\n    stroke: \"#e5e9f2\",\n    \"stroke-width\": _ctx.relativeStrokeWidth,\n    fill: \"none\",\n    style: normalizeStyle(_ctx.trailPathStyle)\n  }, null, 12, _hoisted_5), createElementVNode(\"path\", {\n    class: \"el-progress-circle__path\",\n    d: _ctx.trackPath,\n    stroke: _ctx.stroke,\n    fill: \"none\",\n    \"stroke-linecap\": _ctx.strokeLinecap,\n    \"stroke-width\": _ctx.percentage ? _ctx.relativeStrokeWidth : 0,\n    style: normalizeStyle(_ctx.circlePathStyle)\n  }, null, 12, _hoisted_6)]))], 4)), (_ctx.showText || _ctx.$slots.default) && !_ctx.textInside ? (openBlock(), createElementBlock(\"div\", {\n    key: 2,\n    class: \"el-progress__text\",\n    style: normalizeStyle({\n      fontSize: `${_ctx.progressTextSize}px`\n    })\n  }, [renderSlot(_ctx.$slots, \"default\", normalizeProps(guardReactiveProps(_ctx.slotData)), () => [!_ctx.status ? (openBlock(), createElementBlock(\"span\", _hoisted_7, toDisplayString(_ctx.content), 1)) : (openBlock(), createBlock(_component_el_icon, {\n    key: 1\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.statusIcon)))]),\n    _: 1\n  }))])], 4)) : createCommentVNode(\"v-if\", true)], 10, _hoisted_1);\n}\nexport { render };","map":{"version":3,"names":["class","viewBox","createElementBlock","normalizeClass","role","_ctx","percentage","type","openBlock","_hoisted_2","createElementVNode","style","normalizeStyle","height","strokeWidth","barStyle","showText","$slots","default","textInside","_hoisted_3","renderSlot","normalizeProps","guardReactiveProps","slotData","toDisplayString","content","width","_hoisted_4","d","trackPath","stroke","relativeStrokeWidth","fill","trailPathStyle","strokeLinecap","circlePathStyle","fontSize","progressTextSize","status","_hoisted_7","createBlock","_component_el_icon","key","resolveDynamicComponent","statusIcon"],"sources":["../../../../../../packages/components/progress/src/progress.vue?vue&type=template&id=9158c3b6&lang.js"],"sourcesContent":["<template>\n  <div\n    class=\"el-progress\"\n    :class=\"[\n      `el-progress--${type}`,\n      status ? `is-${status}` : '',\n      {\n        'el-progress--without-text': !showText,\n        'el-progress--text-inside': textInside,\n      },\n    ]\"\n    role=\"progressbar\"\n    :aria-valuenow=\"percentage\"\n    aria-valuemin=\"0\"\n    aria-valuemax=\"100\"\n  >\n    <div v-if=\"type === 'line'\" class=\"el-progress-bar\">\n      <div\n        class=\"el-progress-bar__outer\"\n        :style=\"{ height: `${strokeWidth}px` }\"\n      >\n        <div\n          :class=\"[\n            'el-progress-bar__inner',\n            { 'el-progress-bar__inner--indeterminate': indeterminate },\n          ]\"\n          :style=\"barStyle\"\n        >\n          <div\n            v-if=\"(showText || $slots.default) && textInside\"\n            class=\"el-progress-bar__innerText\"\n          >\n            <slot v-bind=\"slotData\">\n              <span>{{ content }}</span>\n            </slot>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div\n      v-else\n      class=\"el-progress-circle\"\n      :style=\"{ height: `${width}px`, width: `${width}px` }\"\n    >\n      <svg viewBox=\"0 0 100 100\">\n        <path\n          class=\"el-progress-circle__track\"\n          :d=\"trackPath\"\n          stroke=\"#e5e9f2\"\n          :stroke-width=\"relativeStrokeWidth\"\n          fill=\"none\"\n          :style=\"trailPathStyle\"\n        />\n        <path\n          class=\"el-progress-circle__path\"\n          :d=\"trackPath\"\n          :stroke=\"stroke\"\n          fill=\"none\"\n          :stroke-linecap=\"strokeLinecap\"\n          :stroke-width=\"percentage ? relativeStrokeWidth : 0\"\n          :style=\"circlePathStyle\"\n        />\n      </svg>\n    </div>\n    <div\n      v-if=\"(showText || $slots.default) && !textInside\"\n      class=\"el-progress__text\"\n      :style=\"{ fontSize: `${progressTextSize}px` }\"\n    >\n      <slot v-bind=\"slotData\">\n        <span v-if=\"!status\">{{ content }}</span>\n        <el-icon v-else><component :is=\"statusIcon\" /></el-icon>\n      </slot>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent } from 'vue'\nimport { ElIcon } from '@element-plus/components/icon'\nimport {\n  WarningFilled,\n  CircleCheck,\n  CircleClose,\n  Check,\n  Close,\n} from '@element-plus/icons-vue'\nimport { progressProps } from './progress'\nimport type { CSSProperties } from 'vue'\n\nexport default defineComponent({\n  name: 'ElProgress',\n  components: {\n    ElIcon,\n    CircleCheck,\n    CircleClose,\n    Check,\n    Close,\n    WarningFilled,\n  },\n  props: progressProps,\n\n  setup(props) {\n    const barStyle = computed(\n      (): CSSProperties => ({\n        width: `${props.percentage}%`,\n        animationDuration: `${props.duration}s`,\n        backgroundColor: getCurrentColor(props.percentage),\n      })\n    )\n\n    const relativeStrokeWidth = computed(() =>\n      ((props.strokeWidth / props.width) * 100).toFixed(1)\n    )\n\n    const radius = computed(() => {\n      if (props.type === 'circle' || props.type === 'dashboard') {\n        return parseInt(`${50 - parseFloat(relativeStrokeWidth.value) / 2}`, 10)\n      } else {\n        return 0\n      }\n    })\n\n    const trackPath = computed(() => {\n      const r = radius.value\n      const isDashboard = props.type === 'dashboard'\n      return `\n          M 50 50\n          m 0 ${isDashboard ? '' : '-'}${r}\n          a ${r} ${r} 0 1 1 0 ${isDashboard ? '-' : ''}${r * 2}\n          a ${r} ${r} 0 1 1 0 ${isDashboard ? '' : '-'}${r * 2}\n          `\n    })\n\n    const perimeter = computed(() => 2 * Math.PI * radius.value)\n\n    const rate = computed(() => (props.type === 'dashboard' ? 0.75 : 1))\n\n    const strokeDashoffset = computed(() => {\n      const offset = (-1 * perimeter.value * (1 - rate.value)) / 2\n      return `${offset}px`\n    })\n\n    const trailPathStyle = computed(\n      (): CSSProperties => ({\n        strokeDasharray: `${perimeter.value * rate.value}px, ${\n          perimeter.value\n        }px`,\n        strokeDashoffset: strokeDashoffset.value,\n      })\n    )\n\n    const circlePathStyle = computed(\n      (): CSSProperties => ({\n        strokeDasharray: `${\n          perimeter.value * rate.value * (props.percentage / 100)\n        }px, ${perimeter.value}px`,\n        strokeDashoffset: strokeDashoffset.value,\n        transition: 'stroke-dasharray 0.6s ease 0s, stroke 0.6s ease',\n      })\n    )\n\n    const stroke = computed(() => {\n      let ret: string\n      if (props.color) {\n        ret = getCurrentColor(props.percentage)\n      } else {\n        switch (props.status) {\n          case 'success':\n            ret = '#13ce66'\n            break\n          case 'exception':\n            ret = '#ff4949'\n            break\n          case 'warning':\n            ret = '#e6a23c'\n            break\n          default:\n            ret = '#20a0ff'\n        }\n      }\n      return ret\n    })\n\n    const statusIcon = computed(() => {\n      if (props.status === 'warning') {\n        return WarningFilled\n      }\n      if (props.type === 'line') {\n        return props.status === 'success' ? CircleCheck : CircleClose\n      } else {\n        return props.status === 'success' ? Check : Close\n      }\n    })\n\n    const progressTextSize = computed(() => {\n      return props.type === 'line'\n        ? 12 + props.strokeWidth * 0.4\n        : props.width * 0.111111 + 2\n    })\n\n    const content = computed(() => props.format(props.percentage))\n\n    const getCurrentColor = (percentage: number) => {\n      const { color } = props\n      if (typeof color === 'function') {\n        return color(percentage)\n      } else if (typeof color === 'string') {\n        return color\n      } else {\n        const span = 100 / color.length\n        const seriesColors = color.map((seriesColor, index) => {\n          if (typeof seriesColor === 'string') {\n            return {\n              color: seriesColor,\n              percentage: (index + 1) * span,\n            }\n          }\n          return seriesColor\n        })\n        const colors = seriesColors.sort((a, b) => a.percentage - b.percentage)\n\n        for (const color of colors) {\n          if (color.percentage > percentage) return color.color\n        }\n        return colors[colors.length - 1]?.color\n      }\n    }\n\n    const slotData = computed(() => {\n      return {\n        percentage: props.percentage,\n      }\n    })\n\n    return {\n      barStyle,\n      relativeStrokeWidth,\n      radius,\n      trackPath,\n      perimeter,\n      rate,\n      strokeDashoffset,\n      trailPathStyle,\n      circlePathStyle,\n      stroke,\n      statusIcon,\n      progressTextSize,\n      content,\n      slotData,\n    }\n  },\n})\n</script>\n"],"mappings":";;;;EAgBgCA,KAAA,EAAM;AAAA;;;EAc1BA,KAAA,EAAM;AAAA;;EAcPC,OAAA,EAAQ;AAAA;;;;;;;;sBA3CjBC,kBAAA;IACEF,KAAA,EAAAG,cAAA,EAAM,gB;;;;IASNC,IAAA,EAAK;IACJ,iBAAeC,IAAA,CAAAC,UAAA;IAChB,iBAAc;IACd,iBAAc;EAAA,IAEHD,IAAA,CAAAE,IAAA,eAAAC,SAAA,IAAXN,kBAAA,QAAAO,UAAA,GACEC,kBAAA;IACEV,KAAA,EAAM;IACLW,KAAA,EAAAC,cAAA;MAAAC,MAAA,KAAoBR,IAAA,CAAAS,WAAA;IAAA;MAErBJ,kBAAA;IACGV,KAAA,EAAAG,cAAA,E;;;IAIAQ,KAAA,EAAAC,cAAA,CAAOP,IAAA,CAAAU,QAAA;MAGC,CAAAV,IAAA,CAAAW,QAAA,IAAYX,IAAA,CAAAY,MAAA,CAAOC,OAAA,KAAYb,IAAA,CAAAc,UAAA,IAAAX,SAAA,IADxCN,kBAAA,QAAAkB,UAAA,GAIEC,UAAA,CAAAhB,IAAA,CAAAY,MAAA,aAAAK,cAAA,CAAAC,kBAAA,CAAclB,IAAA,CAAAmB,QAAA,IAAd,OACEd,kBAAA,eAAAe,eAAA,CAASpB,IAAA,CAAAqB,OAAA,M,qEAMnBxB,kBAAA;;IAEEF,KAAA,EAAM;IACLW,KAAA,EAAAC,cAAA;MAAAC,MAAA,KAAoBR,IAAA,CAAAsB,KAAA;MAAAA,KAAA,KAAqBtB,IAAA,CAAAsB,KAAA;IAAA;oBAE1CzB,kBAAA,QAAA0B,UAAA,GACElB,kBAAA;IACEV,KAAA,EAAM;IACL6B,CAAA,EAAGxB,IAAA,CAAAyB,SAAA;IACJC,MAAA,EAAO;IACN,gBAAc1B,IAAA,CAAA2B,mBAAA;IACfC,IAAA,EAAK;IACJtB,KAAA,EAAAC,cAAA,CAAOP,IAAA,CAAA6B,cAAA;4BAEVxB,kBAAA;IACEV,KAAA,EAAM;IACL6B,CAAA,EAAGxB,IAAA,CAAAyB,SAAA;IACHC,MAAA,EAAQ1B,IAAA,CAAA0B,MAAA;IACTE,IAAA,EAAK;IACJ,kBAAgB5B,IAAA,CAAA8B,aAAA;IAChB,gBAAc9B,IAAA,CAAAC,UAAA,GAAaD,IAAA,CAAA2B,mBAAA;IAC3BrB,KAAA,EAAAC,cAAA,CAAOP,IAAA,CAAA+B,eAAA;qCAKL,CAAA/B,IAAA,CAAAW,QAAA,IAAYX,IAAA,CAAAY,MAAA,CAAOC,OAAA,MAAab,IAAA,CAAAc,UAAA,IAAAX,SAAA,IADzCN,kBAAA;;IAEEF,KAAA,EAAM;IACLW,KAAA,EAAAC,cAAA;MAAAyB,QAAA,KAAsBhC,IAAA,CAAAiC,gBAAA;IAAA;MAEvBjB,UAAA,CAAAhB,IAAA,CAAAY,MAAA,aAAAK,cAAA,CAAAC,kBAAA,CAAclB,IAAA,CAAAmB,QAAA,IAAd,O,CACenB,IAAA,CAAAkC,MAAA,IAAA/B,SAAA,IAAbN,kBAAA,SAAAsC,UAAA,EAAAf,eAAA,CAAwBpB,IAAA,CAAAqB,OAAA,UAAAlB,SAAA,IACxBiC,WAAA,CAAAC,kBAAA;IAAAC,GAAA;EAAA;qBAAgB,Q,aAAAF,WAAA,CAA8BG,uBAAA,CAAdvC,IAAA,CAAAwC,UAAA,I","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}