{"ast":null,"code":"import { resolveComponent, openBlock, createBlock, withCtx, resolveDynamicComponent, createCommentVNode, createElementBlock, Fragment, renderList } from 'vue';\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_option = resolveComponent(\"el-option\");\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_el_select = resolveComponent(\"el-select\");\n  return openBlock(), createBlock(_component_el_select, {\n    ref: \"select\",\n    \"model-value\": _ctx.value,\n    disabled: _ctx.disabled,\n    clearable: _ctx.clearable,\n    \"clear-icon\": _ctx.clearIcon,\n    size: _ctx.size,\n    placeholder: _ctx.placeholder,\n    \"default-first-option\": \"\",\n    filterable: _ctx.editable,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = event => _ctx.$emit(\"update:modelValue\", event)),\n    onChange: _cache[1] || (_cache[1] = event => _ctx.$emit(\"change\", event)),\n    onBlur: _cache[2] || (_cache[2] = event => _ctx.$emit(\"blur\", event)),\n    onFocus: _cache[3] || (_cache[3] = event => _ctx.$emit(\"focus\", event))\n  }, {\n    prefix: withCtx(() => [_ctx.prefixIcon ? (openBlock(), createBlock(_component_el_icon, {\n      key: 0,\n      class: \"el-input__prefix-icon\"\n    }, {\n      default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.prefixIcon)))]),\n      _: 1\n    })) : createCommentVNode(\"v-if\", true)]),\n    default: withCtx(() => [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.items, item => {\n      return openBlock(), createBlock(_component_el_option, {\n        key: item.value,\n        label: item.value,\n        value: item.value,\n        disabled: item.disabled\n      }, null, 8, [\"label\", \"value\", \"disabled\"]);\n    }), 128))]),\n    _: 1\n  }, 8, [\"model-value\", \"disabled\", \"clearable\", \"clear-icon\", \"size\", \"placeholder\", \"filterable\"]);\n}\nexport { render };","map":{"version":3,"names":["createBlock","_component_el_select","ref","_ctx","value","disabled","clearable","clearIcon","size","placeholder","filterable","editable","_cache","event","$emit","onChange","onBlur","onFocus","prefix","withCtx","prefixIcon","openBlock","_component_el_icon","class","resolveDynamicComponent","createElementBlock","Fragment","renderList","items","item","_component_el_option","key","label"],"sources":["../../../../../../packages/components/time-select/src/time-select.vue?vue&type=template&id=5beb6389&lang.js"],"sourcesContent":["<template>\n  <el-select\n    ref=\"select\"\n    :model-value=\"value\"\n    :disabled=\"disabled\"\n    :clearable=\"clearable\"\n    :clear-icon=\"clearIcon\"\n    :size=\"size\"\n    :placeholder=\"placeholder\"\n    default-first-option\n    :filterable=\"editable\"\n    @update:model-value=\"(event) => $emit('update:modelValue', event)\"\n    @change=\"(event) => $emit('change', event)\"\n    @blur=\"(event) => $emit('blur', event)\"\n    @focus=\"(event) => $emit('focus', event)\"\n  >\n    <el-option\n      v-for=\"item in items\"\n      :key=\"item.value\"\n      :label=\"item.value\"\n      :value=\"item.value\"\n      :disabled=\"item.disabled\"\n    />\n    <template #prefix>\n      <el-icon v-if=\"prefixIcon\" class=\"el-input__prefix-icon\">\n        <component :is=\"prefixIcon\" />\n      </el-icon>\n    </template>\n  </el-select>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, ref } from 'vue'\nimport ElSelect from '@element-plus/components/select'\nimport ElIcon from '@element-plus/components/icon'\nimport { CircleClose, Clock } from '@element-plus/icons-vue'\n\nimport type { PropType, Component } from 'vue'\nimport type { ComponentSize } from '@element-plus/utils/types'\n\nconst { Option: ElOption } = ElSelect\n\ninterface Time {\n  hours: number\n  minutes: number\n}\n\nconst parseTime = (time: string): null | Time => {\n  const values = (time || '').split(':')\n  if (values.length >= 2) {\n    const hours = parseInt(values[0], 10)\n    const minutes = parseInt(values[1], 10)\n    return {\n      hours,\n      minutes,\n    }\n  }\n  return null\n}\nconst compareTime = (time1: string, time2: string): number => {\n  const value1 = parseTime(time1)\n  const value2 = parseTime(time2)\n  const minutes1 = value1.minutes + value1.hours * 60\n  const minutes2 = value2.minutes + value2.hours * 60\n  if (minutes1 === minutes2) {\n    return 0\n  }\n  return minutes1 > minutes2 ? 1 : -1\n}\nconst formatTime = (time: Time): string => {\n  return `${time.hours < 10 ? `0${time.hours}` : time.hours}:${\n    time.minutes < 10 ? `0${time.minutes}` : time.minutes\n  }`\n}\nconst nextTime = (time: string, step: string): string => {\n  const timeValue = parseTime(time)\n  const stepValue = parseTime(step)\n  const next = {\n    hours: timeValue.hours,\n    minutes: timeValue.minutes,\n  }\n  next.minutes += stepValue.minutes\n  next.hours += stepValue.hours\n  next.hours += Math.floor(next.minutes / 60)\n  next.minutes = next.minutes % 60\n  return formatTime(next)\n}\n\nexport default defineComponent({\n  name: 'ElTimeSelect',\n  components: { ElSelect, ElOption, ElIcon },\n  model: {\n    prop: 'value',\n    event: 'change',\n  },\n  props: {\n    modelValue: String,\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    editable: {\n      type: Boolean,\n      default: true,\n    },\n    clearable: {\n      type: Boolean,\n      default: true,\n    },\n    size: {\n      type: String as PropType<ComponentSize>,\n      default: '',\n      validator: (value: string) =>\n        !value || ['medium', 'small', 'mini'].indexOf(value) !== -1,\n    },\n    placeholder: {\n      type: String,\n      default: '',\n    },\n    start: {\n      type: String,\n      default: '09:00',\n    },\n    end: {\n      type: String,\n      default: '18:00',\n    },\n    step: {\n      type: String,\n      default: '00:30',\n    },\n    minTime: {\n      type: String,\n      default: '',\n    },\n    maxTime: {\n      type: String,\n      default: '',\n    },\n    name: {\n      type: String,\n      default: '',\n    },\n    prefixIcon: {\n      type: [String, Object] as PropType<string | Component>,\n      default: Clock,\n    },\n    clearIcon: {\n      type: [String, Object] as PropType<string | Component>,\n      default: CircleClose,\n    },\n  },\n  emits: ['change', 'blur', 'focus', 'update:modelValue'],\n  setup(props) {\n    // computed\n    const select = ref(null)\n    const value = computed(() => props.modelValue)\n    const items = computed(() => {\n      const result = []\n      if (props.start && props.end && props.step) {\n        let current = props.start\n        while (compareTime(current, props.end) <= 0) {\n          result.push({\n            value: current,\n            disabled:\n              compareTime(current, props.minTime || '-1:-1') <= 0 ||\n              compareTime(current, props.maxTime || '100:100') >= 0,\n          })\n          current = nextTime(current, props.step)\n        }\n      }\n      return result\n    })\n    const blur = () => {\n      select.value?.blur?.()\n    }\n    const focus = () => {\n      select.value?.focus?.()\n    }\n\n    return {\n      select,\n      value,\n      items,\n      blur,\n      focus,\n    }\n  },\n})\n</script>\n"],"mappings":";;;;;sBACEA,WAAA,CAAAC,oBAAA;IACEC,GAAA,EAAI;IACH,eAAaC,IAAA,CAAAC,KAAA;IACbC,QAAA,EAAUF,IAAA,CAAAE,QAAA;IACVC,SAAA,EAAWH,IAAA,CAAAG,SAAA;IACX,cAAYH,IAAA,CAAAI,SAAA;IACZC,IAAA,EAAML,IAAA,CAAAK,IAAA;IACNC,WAAA,EAAaN,IAAA,CAAAM,WAAA;IACd;IACCC,UAAA,EAAYP,IAAA,CAAAQ,QAAA;IACZ,uBAAAC,MAAA,QAAAA,MAAA,MAAqBC,KAAA,IAAUV,IAAA,CAAAW,KAAA,sBAA2BD,KAAA;IAC1DE,QAAA,EAAAH,MAAA,QAAAA,MAAA,MAASC,KAAA,IAAUV,IAAA,CAAAW,KAAA,WAAgBD,KAAA;IACnCG,MAAA,EAAAJ,MAAA,QAAAA,MAAA,MAAOC,KAAA,IAAUV,IAAA,CAAAW,KAAA,SAAcD,KAAA;IAC/BI,OAAA,EAAAL,MAAA,QAAAA,MAAA,MAAQC,KAAA,IAAUV,IAAA,CAAAW,KAAA,UAAeD,KAAA;EAAA;IASvBK,MAAA,EAAAC,OAAA,CACT,OAAehB,IAAA,CAAAiB,UAAA,IAAAC,SAAA,IAAfrB,WAAA,CAAAsB,kBAAA;;MAA2BC,KAAA,EAAM;IAAA;uBAC/B,Q,aAAAvB,WAAA,CAAAwB,uBAAA,CAAgBrB,IAAA,CAAAiB,UAAA,I;;;qBARlB,Q,iBADFK,kBAAA,CAAAC,QAAA,QAAAC,UAAA,CACiBxB,IAAA,CAAAyB,KAAA,EAARC,IAAA;0BADT7B,WAAA,CAAA8B,oBAAA;QAEGC,GAAA,EAAKF,IAAA,CAAKzB,KAAA;QACV4B,KAAA,EAAOH,IAAA,CAAKzB,KAAA;QACZA,KAAA,EAAOyB,IAAA,CAAKzB,KAAA;QACZC,QAAA,EAAUwB,IAAA,CAAKxB;MAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}