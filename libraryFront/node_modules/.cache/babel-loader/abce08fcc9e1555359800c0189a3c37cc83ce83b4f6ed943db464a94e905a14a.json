{"ast":null,"code":"import { resolveComponent, resolveDirective, openBlock, createBlock, withCtx, withDirectives, createElementVNode, normalizeClass, createVNode, withModifiers, createElementBlock, Fragment, renderList, toDisplayString, withKeys, vModelText, createCommentVNode, vShow, renderSlot } from 'vue';\nconst _hoisted_1 = {\n  key: 0,\n  ref: \"tagWrapper\",\n  class: \"el-cascader__tags\"\n};\nconst _hoisted_2 = [\"placeholder\"];\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = {\n  class: \"el-cascader__empty-text\"\n};\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_circle_close = resolveComponent(\"circle-close\");\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_arrow_down = resolveComponent(\"arrow-down\");\n  const _component_el_input = resolveComponent(\"el-input\");\n  const _component_el_tag = resolveComponent(\"el-tag\");\n  const _component_el_cascader_panel = resolveComponent(\"el-cascader-panel\");\n  const _component_check = resolveComponent(\"check\");\n  const _component_el_scrollbar = resolveComponent(\"el-scrollbar\");\n  const _component_el_popper = resolveComponent(\"el-popper\");\n  const _directive_clickoutside = resolveDirective(\"clickoutside\");\n  return openBlock(), createBlock(_component_el_popper, {\n    ref: \"popper\",\n    visible: _ctx.popperVisible,\n    \"onUpdate:visible\": _cache[17] || (_cache[17] = $event => _ctx.popperVisible = $event),\n    \"manual-mode\": \"\",\n    \"append-to-body\": _ctx.popperAppendToBody,\n    placement: \"bottom-start\",\n    \"popper-class\": `el-cascader__dropdown ${_ctx.popperClass}`,\n    \"popper-options\": _ctx.popperOptions,\n    \"fallback-placements\": [\"bottom-start\", \"top-start\", \"right\", \"left\"],\n    \"stop-popper-mouse-event\": false,\n    transition: \"el-zoom-in-top\",\n    \"gpu-acceleration\": false,\n    effect: _ctx.Effect.LIGHT,\n    pure: \"\",\n    onAfterLeave: _ctx.hideSuggestionPanel\n  }, {\n    trigger: withCtx(() => [withDirectives(createElementVNode(\"div\", {\n      class: normalizeClass([\"el-cascader\", _ctx.realSize && `el-cascader--${_ctx.realSize}`, {\n        \"is-disabled\": _ctx.isDisabled\n      }]),\n      onClick: _cache[11] || (_cache[11] = () => _ctx.togglePopperVisible(_ctx.readonly ? void 0 : true)),\n      onKeydown: _cache[12] || (_cache[12] = (...args) => _ctx.handleKeyDown && _ctx.handleKeyDown(...args)),\n      onMouseenter: _cache[13] || (_cache[13] = $event => _ctx.inputHover = true),\n      onMouseleave: _cache[14] || (_cache[14] = $event => _ctx.inputHover = false)\n    }, [createVNode(_component_el_input, {\n      ref: \"input\",\n      modelValue: _ctx.inputValue,\n      \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.inputValue = $event),\n      modelModifiers: {\n        trim: true\n      },\n      placeholder: _ctx.inputPlaceholder,\n      readonly: _ctx.readonly,\n      disabled: _ctx.isDisabled,\n      \"validate-event\": false,\n      size: _ctx.realSize,\n      class: normalizeClass({\n        \"is-focus\": _ctx.popperVisible\n      }),\n      onCompositionstart: _ctx.handleComposition,\n      onCompositionupdate: _ctx.handleComposition,\n      onCompositionend: _ctx.handleComposition,\n      onFocus: _cache[2] || (_cache[2] = e => _ctx.$emit(\"focus\", e)),\n      onBlur: _cache[3] || (_cache[3] = e => _ctx.$emit(\"blur\", e)),\n      onInput: _ctx.handleInput\n    }, {\n      suffix: withCtx(() => [_ctx.clearBtnVisible ? (openBlock(), createBlock(_component_el_icon, {\n        key: \"clear\",\n        class: \"el-input__icon icon-circle-close\",\n        onClick: withModifiers(_ctx.handleClear, [\"stop\"])\n      }, {\n        default: withCtx(() => [createVNode(_component_circle_close)]),\n        _: 1\n      }, 8, [\"onClick\"])) : (openBlock(), createBlock(_component_el_icon, {\n        key: \"arrow-down\",\n        class: normalizeClass([\"el-input__icon\", \"icon-arrow-down\", _ctx.popperVisible && \"is-reverse\"]),\n        onClick: _cache[0] || (_cache[0] = withModifiers($event => _ctx.togglePopperVisible(), [\"stop\"]))\n      }, {\n        default: withCtx(() => [createVNode(_component_arrow_down)]),\n        _: 1\n      }, 8, [\"class\"]))]),\n      _: 1\n    }, 8, [\"modelValue\", \"placeholder\", \"readonly\", \"disabled\", \"size\", \"class\", \"onCompositionstart\", \"onCompositionupdate\", \"onCompositionend\", \"onInput\"]), _ctx.multiple ? (openBlock(), createElementBlock(\"div\", _hoisted_1, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.presentTags, tag => {\n      return openBlock(), createBlock(_component_el_tag, {\n        key: tag.key,\n        type: \"info\",\n        size: _ctx.tagSize,\n        hit: tag.hitState,\n        closable: tag.closable,\n        \"disable-transitions\": \"\",\n        onClose: $event => _ctx.deleteTag(tag)\n      }, {\n        default: withCtx(() => [createElementVNode(\"span\", null, toDisplayString(tag.text), 1)]),\n        _: 2\n      }, 1032, [\"size\", \"hit\", \"closable\", \"onClose\"]);\n    }), 128)), _ctx.filterable && !_ctx.isDisabled ? withDirectives((openBlock(), createElementBlock(\"input\", {\n      key: 0,\n      \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => _ctx.searchInputValue = $event),\n      type: \"text\",\n      class: \"el-cascader__search-input\",\n      placeholder: _ctx.presentText ? \"\" : _ctx.inputPlaceholder,\n      onInput: _cache[5] || (_cache[5] = e => _ctx.handleInput(_ctx.searchInputValue, e)),\n      onClick: _cache[6] || (_cache[6] = withModifiers($event => _ctx.togglePopperVisible(true), [\"stop\"])),\n      onKeydown: _cache[7] || (_cache[7] = withKeys((...args) => _ctx.handleDelete && _ctx.handleDelete(...args), [\"delete\"])),\n      onCompositionstart: _cache[8] || (_cache[8] = (...args) => _ctx.handleComposition && _ctx.handleComposition(...args)),\n      onCompositionupdate: _cache[9] || (_cache[9] = (...args) => _ctx.handleComposition && _ctx.handleComposition(...args)),\n      onCompositionend: _cache[10] || (_cache[10] = (...args) => _ctx.handleComposition && _ctx.handleComposition(...args))\n    }, null, 40, _hoisted_2)), [[vModelText, _ctx.searchInputValue, void 0, {\n      trim: true\n    }]]) : createCommentVNode(\"v-if\", true)], 512)) : createCommentVNode(\"v-if\", true)], 34), [[_directive_clickoutside, () => _ctx.togglePopperVisible(false), _ctx.popperPaneRef]])]),\n    default: withCtx(() => [withDirectives(createVNode(_component_el_cascader_panel, {\n      ref: \"panel\",\n      modelValue: _ctx.checkedValue,\n      \"onUpdate:modelValue\": _cache[15] || (_cache[15] = $event => _ctx.checkedValue = $event),\n      options: _ctx.options,\n      props: _ctx.props,\n      border: false,\n      \"render-label\": _ctx.$slots.default,\n      onExpandChange: _ctx.handleExpandChange,\n      onClose: _cache[16] || (_cache[16] = $event => _ctx.togglePopperVisible(false))\n    }, null, 8, [\"modelValue\", \"options\", \"props\", \"render-label\", \"onExpandChange\"]), [[vShow, !_ctx.filtering]]), _ctx.filterable ? withDirectives((openBlock(), createBlock(_component_el_scrollbar, {\n      key: 0,\n      ref: \"suggestionPanel\",\n      tag: \"ul\",\n      class: \"el-cascader__suggestion-panel\",\n      \"view-class\": \"el-cascader__suggestion-list\",\n      onKeydown: _ctx.handleSuggestionKeyDown\n    }, {\n      default: withCtx(() => [_ctx.suggestions.length ? (openBlock(true), createElementBlock(Fragment, {\n        key: 0\n      }, renderList(_ctx.suggestions, item => {\n        return openBlock(), createElementBlock(\"li\", {\n          key: item.uid,\n          class: normalizeClass([\"el-cascader__suggestion-item\", item.checked && \"is-checked\"]),\n          tabindex: -1,\n          onClick: $event => _ctx.handleSuggestionClick(item)\n        }, [createElementVNode(\"span\", null, toDisplayString(item.text), 1), item.checked ? (openBlock(), createBlock(_component_el_icon, {\n          key: 0\n        }, {\n          default: withCtx(() => [createVNode(_component_check)]),\n          _: 1\n        })) : createCommentVNode(\"v-if\", true)], 10, _hoisted_3);\n      }), 128)) : renderSlot(_ctx.$slots, \"empty\", {\n        key: 1\n      }, () => [createElementVNode(\"li\", _hoisted_4, toDisplayString(_ctx.t(\"el.cascader.noMatch\")), 1)])]),\n      _: 3\n    }, 8, [\"onKeydown\"])), [[vShow, _ctx.filtering]]) : createCommentVNode(\"v-if\", true)]),\n    _: 3\n  }, 8, [\"visible\", \"append-to-body\", \"popper-class\", \"popper-options\", \"effect\", \"onAfterLeave\"]);\n}\nexport { render };","map":{"version":3,"names":["ref","class","createBlock","_component_el_popper","visible","_ctx","popperVisible","$event","popperAppendToBody","placement","popperClass","popperOptions","transition","effect","Effect","LIGHT","pure","onAfterLeave","hideSuggestionPanel","trigger","withCtx","createElementVNode","normalizeClass","onClick","_cache","togglePopperVisible","readonly","onKeydown","args","handleKeyDown","onMouseenter","inputHover","onMouseleave","createVNode","_component_el_input","modelValue","inputValue","trim","placeholder","inputPlaceholder","disabled","isDisabled","size","realSize","onCompositionstart","handleComposition","onCompositionupdate","onCompositionend","onFocus","e","$emit","onBlur","onInput","handleInput","suffix","clearBtnVisible","openBlock","_component_el_icon","key","withModifiers","handleClear","_component_circle_close","_component_arrow_down","multiple","createElementBlock","_hoisted_1","Fragment","renderList","presentTags","tag","_component_el_tag","type","tagSize","hit","hitState","closable","onClose","deleteTag","toDisplayString","text","filterable","withDirectives","searchInputValue","presentText","withKeys","handleDelete","createCommentVNode","popperPaneRef","default","_component_el_cascader_panel","checkedValue","options","props","border","$slots","onExpandChange","handleExpandChange","filtering","_component_el_scrollbar","handleSuggestionKeyDown","suggestions","length","item","uid","tabindex","handleSuggestionClick","checked","_component_check","_","renderSlot","_hoisted_4","t"],"sources":["../../../../../../packages/components/cascader/src/index.vue?vue&type=template&id=0429c2db&lang.js"],"sourcesContent":["<template>\n  <el-popper\n    ref=\"popper\"\n    v-model:visible=\"popperVisible\"\n    manual-mode\n    :append-to-body=\"popperAppendToBody\"\n    placement=\"bottom-start\"\n    :popper-class=\"`el-cascader__dropdown ${popperClass}`\"\n    :popper-options=\"popperOptions\"\n    :fallback-placements=\"['bottom-start', 'top-start', 'right', 'left']\"\n    :stop-popper-mouse-event=\"false\"\n    transition=\"el-zoom-in-top\"\n    :gpu-acceleration=\"false\"\n    :effect=\"Effect.LIGHT\"\n    pure\n    @after-leave=\"hideSuggestionPanel\"\n  >\n    <template #trigger>\n      <div\n        v-clickoutside:[popperPaneRef]=\"() => togglePopperVisible(false)\"\n        :class=\"[\n          'el-cascader',\n          realSize && `el-cascader--${realSize}`,\n          { 'is-disabled': isDisabled },\n        ]\"\n        @click=\"() => togglePopperVisible(readonly ? undefined : true)\"\n        @keydown=\"handleKeyDown\"\n        @mouseenter=\"inputHover = true\"\n        @mouseleave=\"inputHover = false\"\n      >\n        <el-input\n          ref=\"input\"\n          v-model.trim=\"inputValue\"\n          :placeholder=\"inputPlaceholder\"\n          :readonly=\"readonly\"\n          :disabled=\"isDisabled\"\n          :validate-event=\"false\"\n          :size=\"realSize\"\n          :class=\"{ 'is-focus': popperVisible }\"\n          @compositionstart=\"handleComposition\"\n          @compositionupdate=\"handleComposition\"\n          @compositionend=\"handleComposition\"\n          @focus=\"(e) => $emit('focus', e)\"\n          @blur=\"(e) => $emit('blur', e)\"\n          @input=\"handleInput\"\n        >\n          <template #suffix>\n            <el-icon\n              v-if=\"clearBtnVisible\"\n              key=\"clear\"\n              class=\"el-input__icon icon-circle-close\"\n              @click.stop=\"handleClear\"\n            >\n              <circle-close />\n            </el-icon>\n            <el-icon\n              v-else\n              key=\"arrow-down\"\n              :class=\"[\n                'el-input__icon',\n                'icon-arrow-down',\n                popperVisible && 'is-reverse',\n              ]\"\n              @click.stop=\"togglePopperVisible()\"\n            >\n              <arrow-down />\n            </el-icon>\n          </template>\n        </el-input>\n\n        <div v-if=\"multiple\" ref=\"tagWrapper\" class=\"el-cascader__tags\">\n          <el-tag\n            v-for=\"tag in presentTags\"\n            :key=\"tag.key\"\n            type=\"info\"\n            :size=\"tagSize\"\n            :hit=\"tag.hitState\"\n            :closable=\"tag.closable\"\n            disable-transitions\n            @close=\"deleteTag(tag)\"\n          >\n            <span>{{ tag.text }}</span>\n          </el-tag>\n          <input\n            v-if=\"filterable && !isDisabled\"\n            v-model.trim=\"searchInputValue\"\n            type=\"text\"\n            class=\"el-cascader__search-input\"\n            :placeholder=\"presentText ? '' : inputPlaceholder\"\n            @input=\"(e) => handleInput(searchInputValue, e)\"\n            @click.stop=\"togglePopperVisible(true)\"\n            @keydown.delete=\"handleDelete\"\n            @compositionstart=\"handleComposition\"\n            @compositionupdate=\"handleComposition\"\n            @compositionend=\"handleComposition\"\n          />\n        </div>\n      </div>\n    </template>\n\n    <template #default>\n      <el-cascader-panel\n        v-show=\"!filtering\"\n        ref=\"panel\"\n        v-model=\"checkedValue\"\n        :options=\"options\"\n        :props=\"props\"\n        :border=\"false\"\n        :render-label=\"$slots.default\"\n        @expand-change=\"handleExpandChange\"\n        @close=\"togglePopperVisible(false)\"\n      />\n      <el-scrollbar\n        v-if=\"filterable\"\n        v-show=\"filtering\"\n        ref=\"suggestionPanel\"\n        tag=\"ul\"\n        class=\"el-cascader__suggestion-panel\"\n        view-class=\"el-cascader__suggestion-list\"\n        @keydown=\"handleSuggestionKeyDown\"\n      >\n        <template v-if=\"suggestions.length\">\n          <li\n            v-for=\"item in suggestions\"\n            :key=\"item.uid\"\n            :class=\"[\n              'el-cascader__suggestion-item',\n              item.checked && 'is-checked',\n            ]\"\n            :tabindex=\"-1\"\n            @click=\"handleSuggestionClick(item)\"\n          >\n            <span>{{ item.text }}</span>\n            <el-icon v-if=\"item.checked\"><check /></el-icon>\n          </li>\n        </template>\n        <slot v-else name=\"empty\">\n          <li class=\"el-cascader__empty-text\">\n            {{ t('el.cascader.noMatch') }}\n          </li>\n        </slot>\n      </el-scrollbar>\n    </template>\n  </el-popper>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  inject,\n  nextTick,\n  onMounted,\n  onBeforeUnmount,\n  ref,\n  watch,\n} from 'vue'\nimport { isPromise } from '@vue/shared'\nimport debounce from 'lodash/debounce'\n\nimport ElCascaderPanel, {\n  CommonProps,\n} from '@element-plus/components/cascader-panel'\nimport ElInput from '@element-plus/components/input'\nimport ElPopper, { Effect } from '@element-plus/components/popper'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElTag from '@element-plus/components/tag'\nimport ElIcon from '@element-plus/components/icon'\n\nimport { elFormKey, elFormItemKey } from '@element-plus/tokens'\nimport { ClickOutside as Clickoutside } from '@element-plus/directives'\nimport { useLocale, useSize } from '@element-plus/hooks'\n\nimport { EVENT_CODE, focusNode, getSibling } from '@element-plus/utils/aria'\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '@element-plus/utils/constants'\nimport isServer from '@element-plus/utils/isServer'\nimport {\n  addResizeListener,\n  removeResizeListener,\n} from '@element-plus/utils/resize-event'\nimport { isValidComponentSize } from '@element-plus/utils/validators'\nimport { isKorean } from '@element-plus/utils/isDef'\nimport { CircleClose, Check, ArrowDown } from '@element-plus/icons-vue'\n\nimport type { Options } from '@element-plus/components/popper'\nimport type { ComputedRef, PropType, Ref } from 'vue'\nimport type { ElFormContext, ElFormItemContext } from '@element-plus/tokens'\nimport type {\n  CascaderValue,\n  CascaderNode,\n  Tag,\n} from '@element-plus/components/cascader-panel'\nimport type { ComponentSize } from '@element-plus/utils/types'\n\ntype cascaderPanelType = InstanceType<typeof ElCascaderPanel>\ntype popperType = InstanceType<typeof ElPopper>\ntype inputType = InstanceType<typeof ElInput>\ntype suggestionPanelType = InstanceType<typeof ElScrollbar>\n\nconst DEFAULT_INPUT_HEIGHT = 40\n\nconst INPUT_HEIGHT_MAP = {\n  medium: 36,\n  small: 32,\n  mini: 28,\n}\n\nconst popperOptions: Partial<Options> = {\n  modifiers: [\n    {\n      name: 'arrowPosition',\n      enabled: true,\n      phase: 'main',\n      fn: ({ state }) => {\n        const { modifiersData, placement } = state as any\n        if (['right', 'left'].includes(placement)) return\n        modifiersData.arrow.x = 35\n      },\n      requires: ['arrow'],\n    },\n  ],\n}\n\nexport default defineComponent({\n  name: 'ElCascader',\n\n  components: {\n    ElCascaderPanel,\n    ElInput,\n    ElPopper,\n    ElScrollbar,\n    ElTag,\n    ElIcon,\n    CircleClose,\n    Check,\n    ArrowDown,\n  },\n\n  directives: {\n    Clickoutside,\n  },\n\n  props: {\n    ...CommonProps,\n    size: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    placeholder: {\n      type: String,\n    },\n    disabled: Boolean,\n    clearable: Boolean,\n    filterable: Boolean,\n    filterMethod: {\n      type: Function as PropType<\n        (node: CascaderNode, keyword: string) => boolean\n      >,\n      default: (node: CascaderNode, keyword: string) =>\n        node.text.includes(keyword),\n    },\n    separator: {\n      type: String,\n      default: ' / ',\n    },\n    showAllLevels: {\n      type: Boolean,\n      default: true,\n    },\n    collapseTags: Boolean,\n    debounce: {\n      type: Number,\n      default: 300,\n    },\n    beforeFilter: {\n      type: Function as PropType<(value: string) => boolean | Promise<any>>,\n      default: () => true,\n    },\n    popperClass: {\n      type: String,\n      default: '',\n    },\n    popperAppendToBody: {\n      type: Boolean,\n      default: true,\n    },\n  },\n\n  emits: [\n    UPDATE_MODEL_EVENT,\n    CHANGE_EVENT,\n    'focus',\n    'blur',\n    'visible-change',\n    'expand-change',\n    'remove-tag',\n  ],\n\n  setup(props, { emit }) {\n    let inputInitialHeight = 0\n    let pressDeleteCount = 0\n\n    const { t } = useLocale()\n    const elForm = inject(elFormKey, {} as ElFormContext)\n    const elFormItem = inject(elFormItemKey, {} as ElFormItemContext)\n\n    const popper: Ref<popperType | null> = ref(null)\n    const input: Ref<inputType | null> = ref(null)\n    const tagWrapper = ref(null)\n    const panel: Ref<cascaderPanelType | null> = ref(null)\n    const suggestionPanel: Ref<suggestionPanelType | null> = ref(null)\n    const popperVisible = ref(false)\n    const inputHover = ref(false)\n    const filtering = ref(false)\n    const inputValue = ref('')\n    const searchInputValue = ref('')\n    const presentTags: Ref<Tag[]> = ref([])\n    const suggestions: Ref<CascaderNode[]> = ref([])\n    const isOnComposition = ref(false)\n\n    const isDisabled = computed(() => props.disabled || elForm.disabled)\n    const inputPlaceholder = computed(\n      () => props.placeholder || t('el.cascader.placeholder')\n    )\n    const realSize = useSize()\n    const tagSize = computed(() =>\n      ['small', 'mini'].includes(realSize.value) ? 'mini' : 'small'\n    )\n    const multiple = computed(() => !!props.props.multiple)\n    const readonly = computed(() => !props.filterable || multiple.value)\n    const searchKeyword = computed(() =>\n      multiple.value ? searchInputValue.value : inputValue.value\n    )\n    const checkedNodes: ComputedRef<CascaderNode[]> = computed(\n      () => panel.value?.checkedNodes || []\n    )\n    const clearBtnVisible = computed(() => {\n      if (\n        !props.clearable ||\n        isDisabled.value ||\n        filtering.value ||\n        !inputHover.value\n      )\n        return false\n\n      return !!checkedNodes.value.length\n    })\n    const presentText = computed(() => {\n      const { showAllLevels, separator } = props\n      const nodes = checkedNodes.value\n      return nodes.length\n        ? multiple.value\n          ? ' '\n          : nodes[0].calcText(showAllLevels, separator)\n        : ''\n    })\n\n    const checkedValue = computed<CascaderValue>({\n      get() {\n        return props.modelValue\n      },\n      set(val) {\n        emit(UPDATE_MODEL_EVENT, val)\n        emit(CHANGE_EVENT, val)\n        elFormItem.validate?.('change')\n      },\n    })\n\n    const popperPaneRef = computed(() => {\n      return popper.value?.popperRef\n    })\n\n    const togglePopperVisible = (visible?: boolean) => {\n      if (isDisabled.value) return\n\n      visible = visible ?? !popperVisible.value\n\n      if (visible !== popperVisible.value) {\n        popperVisible.value = visible\n        input.value?.input?.setAttribute('aria-expanded', `${visible}`)\n\n        if (visible) {\n          updatePopperPosition()\n          nextTick(panel.value?.scrollToExpandingNode)\n        } else if (props.filterable) {\n          const { value } = presentText\n          inputValue.value = value\n          searchInputValue.value = value\n        }\n\n        emit('visible-change', visible)\n      }\n    }\n\n    const updatePopperPosition = () => {\n      nextTick(popper.value?.update)\n    }\n\n    const hideSuggestionPanel = () => {\n      filtering.value = false\n    }\n\n    const genTag = (node: CascaderNode): Tag => {\n      const { showAllLevels, separator } = props\n      return {\n        node,\n        key: node.uid,\n        text: node.calcText(showAllLevels, separator),\n        hitState: false,\n        closable: !isDisabled.value && !node.isDisabled,\n      }\n    }\n\n    const deleteTag = (tag: Tag) => {\n      const node = tag.node as CascaderNode\n      node.doCheck(false)\n      panel.value?.calculateCheckedValue()\n      emit('remove-tag', node.valueByOption)\n    }\n\n    const calculatePresentTags = () => {\n      if (!multiple.value) return\n\n      const nodes = checkedNodes.value\n      const tags: Tag[] = []\n\n      if (nodes.length) {\n        const [first, ...rest] = nodes\n        const restCount = rest.length\n\n        tags.push(genTag(first))\n\n        if (restCount) {\n          if (props.collapseTags) {\n            tags.push({\n              key: -1,\n              text: `+ ${restCount}`,\n              closable: false,\n            })\n          } else {\n            rest.forEach((node) => tags.push(genTag(node)))\n          }\n        }\n      }\n\n      presentTags.value = tags\n    }\n\n    const calculateSuggestions = () => {\n      const { filterMethod, showAllLevels, separator } = props\n      const res = panel.value\n        ?.getFlattedNodes(!props.props.checkStrictly)\n        ?.filter((node) => {\n          if (node.isDisabled) return false\n          node.calcText(showAllLevels, separator)\n          return filterMethod(node, searchKeyword.value)\n        })\n\n      if (multiple.value) {\n        presentTags.value.forEach((tag) => {\n          tag.hitState = false\n        })\n      }\n\n      filtering.value = true\n      suggestions.value = res!\n      updatePopperPosition()\n    }\n\n    const focusFirstNode = () => {\n      let firstNode!: HTMLElement\n\n      if (filtering.value && suggestionPanel.value) {\n        firstNode = suggestionPanel.value.$el.querySelector(\n          '.el-cascader__suggestion-item'\n        )\n      } else {\n        firstNode = panel.value?.$el.querySelector(\n          '.el-cascader-node[tabindex=\"-1\"]'\n        )\n      }\n\n      if (firstNode) {\n        firstNode.focus()\n        !filtering.value && firstNode.click()\n      }\n    }\n\n    const updateStyle = () => {\n      const inputInner = input.value?.input\n      const tagWrapperEl = tagWrapper.value\n      const suggestionPanelEl = suggestionPanel.value?.$el\n\n      if (isServer || !inputInner) return\n\n      if (suggestionPanelEl) {\n        const suggestionList = suggestionPanelEl.querySelector(\n          '.el-cascader__suggestion-list'\n        )\n        suggestionList.style.minWidth = `${inputInner.offsetWidth}px`\n      }\n\n      if (tagWrapperEl) {\n        const { offsetHeight } = tagWrapperEl\n        const height =\n          presentTags.value.length > 0\n            ? `${Math.max(offsetHeight + 6, inputInitialHeight)}px`\n            : `${inputInitialHeight}px`\n        inputInner.style.height = height\n        updatePopperPosition()\n      }\n    }\n\n    const getCheckedNodes = (leafOnly: boolean) => {\n      return panel.value?.getCheckedNodes(leafOnly)\n    }\n\n    const handleExpandChange = (value: CascaderValue) => {\n      updatePopperPosition()\n      emit('expand-change', value)\n    }\n\n    const handleComposition = (event: CompositionEvent) => {\n      const text = (event.target as HTMLInputElement)?.value\n      if (event.type === 'compositionend') {\n        isOnComposition.value = false\n        nextTick(() => handleInput(text))\n      } else {\n        const lastCharacter = text[text.length - 1] || ''\n        isOnComposition.value = !isKorean(lastCharacter)\n      }\n    }\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isOnComposition.value) return\n\n      switch (e.code) {\n        case EVENT_CODE.enter:\n          togglePopperVisible()\n          break\n        case EVENT_CODE.down:\n          togglePopperVisible(true)\n          nextTick(focusFirstNode)\n          e.preventDefault()\n          break\n        case EVENT_CODE.esc:\n        case EVENT_CODE.tab:\n          togglePopperVisible(false)\n          break\n      }\n    }\n\n    const handleClear = () => {\n      panel.value?.clearCheckedNodes()\n      togglePopperVisible(false)\n    }\n\n    const handleSuggestionClick = (node: CascaderNode) => {\n      const { checked } = node\n\n      if (multiple.value) {\n        panel.value?.handleCheckChange(node, !checked, false)\n      } else {\n        !checked && panel.value?.handleCheckChange(node, true, false)\n        togglePopperVisible(false)\n      }\n    }\n\n    const handleSuggestionKeyDown = (e: KeyboardEvent) => {\n      const target = e.target as HTMLElement\n      const { code } = e\n\n      switch (code) {\n        case EVENT_CODE.up:\n        case EVENT_CODE.down: {\n          const distance = code === EVENT_CODE.up ? -1 : 1\n          focusNode(\n            getSibling(\n              target,\n              distance,\n              '.el-cascader__suggestion-item[tabindex=\"-1\"]'\n            )\n          )\n          break\n        }\n        case EVENT_CODE.enter:\n          target.click()\n          break\n        case EVENT_CODE.esc:\n        case EVENT_CODE.tab:\n          togglePopperVisible(false)\n          break\n      }\n    }\n\n    const handleDelete = () => {\n      const tags = presentTags.value\n      const lastTag = tags[tags.length - 1]\n      pressDeleteCount = searchInputValue.value ? 0 : pressDeleteCount + 1\n\n      if (!lastTag || !pressDeleteCount) return\n\n      if (lastTag.hitState) {\n        deleteTag(lastTag)\n      } else {\n        lastTag.hitState = true\n      }\n    }\n\n    const handleFilter = debounce(() => {\n      const { value } = searchKeyword\n\n      if (!value) return\n\n      const passed = props.beforeFilter(value)\n\n      if (isPromise(passed)) {\n        passed.then(calculateSuggestions).catch(() => {\n          /* prevent log error */\n        })\n      } else if (passed !== false) {\n        calculateSuggestions()\n      } else {\n        hideSuggestionPanel()\n      }\n    }, props.debounce)\n\n    const handleInput = (val: string, e?: KeyboardEvent) => {\n      !popperVisible.value && togglePopperVisible(true)\n\n      if (e?.isComposing) return\n\n      val ? handleFilter() : hideSuggestionPanel()\n    }\n\n    watch(filtering, updatePopperPosition)\n\n    watch([checkedNodes, isDisabled], calculatePresentTags)\n\n    watch(presentTags, () => {\n      nextTick(() => updateStyle())\n    })\n\n    watch(presentText, (val) => (inputValue.value = val), { immediate: true })\n\n    onMounted(() => {\n      const inputEl = input.value?.$el\n      inputInitialHeight =\n        inputEl?.offsetHeight ||\n        INPUT_HEIGHT_MAP[realSize.value] ||\n        DEFAULT_INPUT_HEIGHT\n      addResizeListener(inputEl, updateStyle)\n    })\n\n    onBeforeUnmount(() => {\n      removeResizeListener(input.value?.$el, updateStyle)\n    })\n\n    return {\n      Effect,\n      popperOptions,\n      popper,\n      popperPaneRef,\n      input,\n      tagWrapper,\n      panel,\n      suggestionPanel,\n      popperVisible,\n      inputHover,\n      inputPlaceholder,\n      filtering,\n      presentText,\n      checkedValue,\n      inputValue,\n      searchInputValue,\n      presentTags,\n      suggestions,\n      isDisabled,\n      isOnComposition,\n      realSize,\n      tagSize,\n      multiple,\n      readonly,\n      clearBtnVisible,\n      t,\n      togglePopperVisible,\n      hideSuggestionPanel,\n      deleteTag,\n      focusFirstNode,\n      getCheckedNodes,\n      handleExpandChange,\n      handleKeyDown,\n      handleComposition,\n      handleClear,\n      handleSuggestionClick,\n      handleSuggestionKeyDown,\n      handleDelete,\n      handleInput,\n    }\n  },\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}