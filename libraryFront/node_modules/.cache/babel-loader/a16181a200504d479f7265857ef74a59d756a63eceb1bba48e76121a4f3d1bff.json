{"ast":null,"code":"import { defineComponent, computed } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { CircleCheck, CircleClose, Check, Close, WarningFilled } from '@element-plus/icons-vue';\nimport { progressProps } from './progress.mjs';\nvar script = defineComponent({\n  name: \"ElProgress\",\n  components: {\n    ElIcon,\n    CircleCheck,\n    CircleClose,\n    Check,\n    Close,\n    WarningFilled\n  },\n  props: progressProps,\n  setup(props) {\n    const barStyle = computed(() => ({\n      width: `${props.percentage}%`,\n      animationDuration: `${props.duration}s`,\n      backgroundColor: getCurrentColor(props.percentage)\n    }));\n    const relativeStrokeWidth = computed(() => (props.strokeWidth / props.width * 100).toFixed(1));\n    const radius = computed(() => {\n      if (props.type === \"circle\" || props.type === \"dashboard\") {\n        return parseInt(`${50 - parseFloat(relativeStrokeWidth.value) / 2}`, 10);\n      } else {\n        return 0;\n      }\n    });\n    const trackPath = computed(() => {\n      const r = radius.value;\n      const isDashboard = props.type === \"dashboard\";\n      return `\n          M 50 50\n          m 0 ${isDashboard ? \"\" : \"-\"}${r}\n          a ${r} ${r} 0 1 1 0 ${isDashboard ? \"-\" : \"\"}${r * 2}\n          a ${r} ${r} 0 1 1 0 ${isDashboard ? \"\" : \"-\"}${r * 2}\n          `;\n    });\n    const perimeter = computed(() => 2 * Math.PI * radius.value);\n    const rate = computed(() => props.type === \"dashboard\" ? 0.75 : 1);\n    const strokeDashoffset = computed(() => {\n      const offset = -1 * perimeter.value * (1 - rate.value) / 2;\n      return `${offset}px`;\n    });\n    const trailPathStyle = computed(() => ({\n      strokeDasharray: `${perimeter.value * rate.value}px, ${perimeter.value}px`,\n      strokeDashoffset: strokeDashoffset.value\n    }));\n    const circlePathStyle = computed(() => ({\n      strokeDasharray: `${perimeter.value * rate.value * (props.percentage / 100)}px, ${perimeter.value}px`,\n      strokeDashoffset: strokeDashoffset.value,\n      transition: \"stroke-dasharray 0.6s ease 0s, stroke 0.6s ease\"\n    }));\n    const stroke = computed(() => {\n      let ret;\n      if (props.color) {\n        ret = getCurrentColor(props.percentage);\n      } else {\n        switch (props.status) {\n          case \"success\":\n            ret = \"#13ce66\";\n            break;\n          case \"exception\":\n            ret = \"#ff4949\";\n            break;\n          case \"warning\":\n            ret = \"#e6a23c\";\n            break;\n          default:\n            ret = \"#20a0ff\";\n        }\n      }\n      return ret;\n    });\n    const statusIcon = computed(() => {\n      if (props.status === \"warning\") {\n        return WarningFilled;\n      }\n      if (props.type === \"line\") {\n        return props.status === \"success\" ? CircleCheck : CircleClose;\n      } else {\n        return props.status === \"success\" ? Check : Close;\n      }\n    });\n    const progressTextSize = computed(() => {\n      return props.type === \"line\" ? 12 + props.strokeWidth * 0.4 : props.width * 0.111111 + 2;\n    });\n    const content = computed(() => props.format(props.percentage));\n    const getCurrentColor = percentage => {\n      var _a;\n      const {\n        color\n      } = props;\n      if (typeof color === \"function\") {\n        return color(percentage);\n      } else if (typeof color === \"string\") {\n        return color;\n      } else {\n        const span = 100 / color.length;\n        const seriesColors = color.map((seriesColor, index) => {\n          if (typeof seriesColor === \"string\") {\n            return {\n              color: seriesColor,\n              percentage: (index + 1) * span\n            };\n          }\n          return seriesColor;\n        });\n        const colors = seriesColors.sort((a, b) => a.percentage - b.percentage);\n        for (const color2 of colors) {\n          if (color2.percentage > percentage) return color2.color;\n        }\n        return (_a = colors[colors.length - 1]) == null ? void 0 : _a.color;\n      }\n    };\n    const slotData = computed(() => {\n      return {\n        percentage: props.percentage\n      };\n    });\n    return {\n      barStyle,\n      relativeStrokeWidth,\n      radius,\n      trackPath,\n      perimeter,\n      rate,\n      strokeDashoffset,\n      trailPathStyle,\n      circlePathStyle,\n      stroke,\n      statusIcon,\n      progressTextSize,\n      content,\n      slotData\n    };\n  }\n});\nexport { script as default };","map":{"version":3,"names":["script","defineComponent","name","components","ElIcon","CircleCheck","CircleClose","Check","Close","WarningFilled","props","progressProps","setup","barStyle","computed","width","percentage","animationDuration","duration","backgroundColor","getCurrentColor","relativeStrokeWidth","strokeWidth","toFixed","radius","type","parseInt","parseFloat","value","trackPath","r","isDashboard","perimeter","Math","PI","rate","strokeDashoffset","offset","trailPathStyle","strokeDasharray","circlePathStyle","transition","stroke","ret","color","status","statusIcon","progressTextSize","content","format","span","length","seriesColors","map","seriesColor","index","colors","sort","a","b","color2","_a","slotData"],"sources":["../../../../../../packages/components/progress/src/progress.vue"],"sourcesContent":["<template>\n  <div\n    class=\"el-progress\"\n    :class=\"[\n      `el-progress--${type}`,\n      status ? `is-${status}` : '',\n      {\n        'el-progress--without-text': !showText,\n        'el-progress--text-inside': textInside,\n      },\n    ]\"\n    role=\"progressbar\"\n    :aria-valuenow=\"percentage\"\n    aria-valuemin=\"0\"\n    aria-valuemax=\"100\"\n  >\n    <div v-if=\"type === 'line'\" class=\"el-progress-bar\">\n      <div\n        class=\"el-progress-bar__outer\"\n        :style=\"{ height: `${strokeWidth}px` }\"\n      >\n        <div\n          :class=\"[\n            'el-progress-bar__inner',\n            { 'el-progress-bar__inner--indeterminate': indeterminate },\n          ]\"\n          :style=\"barStyle\"\n        >\n          <div\n            v-if=\"(showText || $slots.default) && textInside\"\n            class=\"el-progress-bar__innerText\"\n          >\n            <slot v-bind=\"slotData\">\n              <span>{{ content }}</span>\n            </slot>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div\n      v-else\n      class=\"el-progress-circle\"\n      :style=\"{ height: `${width}px`, width: `${width}px` }\"\n    >\n      <svg viewBox=\"0 0 100 100\">\n        <path\n          class=\"el-progress-circle__track\"\n          :d=\"trackPath\"\n          stroke=\"#e5e9f2\"\n          :stroke-width=\"relativeStrokeWidth\"\n          fill=\"none\"\n          :style=\"trailPathStyle\"\n        />\n        <path\n          class=\"el-progress-circle__path\"\n          :d=\"trackPath\"\n          :stroke=\"stroke\"\n          fill=\"none\"\n          :stroke-linecap=\"strokeLinecap\"\n          :stroke-width=\"percentage ? relativeStrokeWidth : 0\"\n          :style=\"circlePathStyle\"\n        />\n      </svg>\n    </div>\n    <div\n      v-if=\"(showText || $slots.default) && !textInside\"\n      class=\"el-progress__text\"\n      :style=\"{ fontSize: `${progressTextSize}px` }\"\n    >\n      <slot v-bind=\"slotData\">\n        <span v-if=\"!status\">{{ content }}</span>\n        <el-icon v-else><component :is=\"statusIcon\" /></el-icon>\n      </slot>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent } from 'vue'\nimport { ElIcon } from '@element-plus/components/icon'\nimport {\n  WarningFilled,\n  CircleCheck,\n  CircleClose,\n  Check,\n  Close,\n} from '@element-plus/icons-vue'\nimport { progressProps } from './progress'\nimport type { CSSProperties } from 'vue'\n\nexport default defineComponent({\n  name: 'ElProgress',\n  components: {\n    ElIcon,\n    CircleCheck,\n    CircleClose,\n    Check,\n    Close,\n    WarningFilled,\n  },\n  props: progressProps,\n\n  setup(props) {\n    const barStyle = computed(\n      (): CSSProperties => ({\n        width: `${props.percentage}%`,\n        animationDuration: `${props.duration}s`,\n        backgroundColor: getCurrentColor(props.percentage),\n      })\n    )\n\n    const relativeStrokeWidth = computed(() =>\n      ((props.strokeWidth / props.width) * 100).toFixed(1)\n    )\n\n    const radius = computed(() => {\n      if (props.type === 'circle' || props.type === 'dashboard') {\n        return parseInt(`${50 - parseFloat(relativeStrokeWidth.value) / 2}`, 10)\n      } else {\n        return 0\n      }\n    })\n\n    const trackPath = computed(() => {\n      const r = radius.value\n      const isDashboard = props.type === 'dashboard'\n      return `\n          M 50 50\n          m 0 ${isDashboard ? '' : '-'}${r}\n          a ${r} ${r} 0 1 1 0 ${isDashboard ? '-' : ''}${r * 2}\n          a ${r} ${r} 0 1 1 0 ${isDashboard ? '' : '-'}${r * 2}\n          `\n    })\n\n    const perimeter = computed(() => 2 * Math.PI * radius.value)\n\n    const rate = computed(() => (props.type === 'dashboard' ? 0.75 : 1))\n\n    const strokeDashoffset = computed(() => {\n      const offset = (-1 * perimeter.value * (1 - rate.value)) / 2\n      return `${offset}px`\n    })\n\n    const trailPathStyle = computed(\n      (): CSSProperties => ({\n        strokeDasharray: `${perimeter.value * rate.value}px, ${\n          perimeter.value\n        }px`,\n        strokeDashoffset: strokeDashoffset.value,\n      })\n    )\n\n    const circlePathStyle = computed(\n      (): CSSProperties => ({\n        strokeDasharray: `${\n          perimeter.value * rate.value * (props.percentage / 100)\n        }px, ${perimeter.value}px`,\n        strokeDashoffset: strokeDashoffset.value,\n        transition: 'stroke-dasharray 0.6s ease 0s, stroke 0.6s ease',\n      })\n    )\n\n    const stroke = computed(() => {\n      let ret: string\n      if (props.color) {\n        ret = getCurrentColor(props.percentage)\n      } else {\n        switch (props.status) {\n          case 'success':\n            ret = '#13ce66'\n            break\n          case 'exception':\n            ret = '#ff4949'\n            break\n          case 'warning':\n            ret = '#e6a23c'\n            break\n          default:\n            ret = '#20a0ff'\n        }\n      }\n      return ret\n    })\n\n    const statusIcon = computed(() => {\n      if (props.status === 'warning') {\n        return WarningFilled\n      }\n      if (props.type === 'line') {\n        return props.status === 'success' ? CircleCheck : CircleClose\n      } else {\n        return props.status === 'success' ? Check : Close\n      }\n    })\n\n    const progressTextSize = computed(() => {\n      return props.type === 'line'\n        ? 12 + props.strokeWidth * 0.4\n        : props.width * 0.111111 + 2\n    })\n\n    const content = computed(() => props.format(props.percentage))\n\n    const getCurrentColor = (percentage: number) => {\n      const { color } = props\n      if (typeof color === 'function') {\n        return color(percentage)\n      } else if (typeof color === 'string') {\n        return color\n      } else {\n        const span = 100 / color.length\n        const seriesColors = color.map((seriesColor, index) => {\n          if (typeof seriesColor === 'string') {\n            return {\n              color: seriesColor,\n              percentage: (index + 1) * span,\n            }\n          }\n          return seriesColor\n        })\n        const colors = seriesColors.sort((a, b) => a.percentage - b.percentage)\n\n        for (const color of colors) {\n          if (color.percentage > percentage) return color.color\n        }\n        return colors[colors.length - 1]?.color\n      }\n    }\n\n    const slotData = computed(() => {\n      return {\n        percentage: props.percentage,\n      }\n    })\n\n    return {\n      barStyle,\n      relativeStrokeWidth,\n      radius,\n      trackPath,\n      perimeter,\n      rate,\n      strokeDashoffset,\n      trailPathStyle,\n      circlePathStyle,\n      stroke,\n      statusIcon,\n      progressTextSize,\n      content,\n      slotData,\n    }\n  },\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}